[{"content":"This is the example org-mode file used for the Denver Emacs org-mode introduction talk. Everything in this talk should work without any custom settings or installation with a reasonably recent Emacs version.\nLet\u0026rsquo;s start with a headline, this is kind of like Markdown\u0026rsquo;s # character:\nThis is an example headline Text can be put into the headline. You can create another headline at the same level with another * character\nAnother headline Nesting headlines is as easy as adding another start\nNested headline Another nested headline Deeper Another headline Deeper\u0026hellip;\nDeeper\u0026hellip;.. Basic markup You can really go as deep as you want. This is the general building block for org-mode navigation.\nNext, let\u0026rsquo;s talk about some markup\nunderscores let you underline things stars add emphasis slashes are italics pluses are strikethrough equal signs are verbatim text tildes can also be used You can generate lists with the - character (seen above), or create numbered ones:\nNumber one thing Number two thing Number three Showing and hiding headlines You can hide the contents of a headline by putting the point (cursor) or it and hitting TAB.\nYou can also toggle hiding and showing of all headlines with SHIFT-TAB.\nTables Auto expanding tables are one of the coolest features of org-mode, because tables in Markdown just plain suck. In order to create a new table, you can start typing it manually, or press C-c |, which will prompt for the table\u0026rsquo;s dimensions.\nFirst Name Last Name Years using Emacs Lee Hinman 5 Mike Hunsinger 2 Daniel Glauser 4 Really-long-first-name-guy long-last-name-pers 1 Org-mode links :PROPERTIES:\u0026hellip;\nIn an org-mode file, you can press C-c l to store a pointer to wherever you are in the file. Then, with (or without) text highlighted hit C-C C-l to make it into a link. The example file for Magit If you don\u0026rsquo;t want to store a pointer (ie, link to a website or something), you can just hit C-c C-l and type or paste the link. To manually create a link, do something like:\nThe Denver Emacs Meetup Group\nWritequit site\nGoogle\u0026rsquo;s web site\n(ignore the *_SRC blocks for now, we\u0026rsquo;ll get there)\n[[http://google.com/][Google]] You can link to files, images, websites, emails, irc, and all kinds of things.\nVarious things you can add in headers One of the most common uses for org-mode is a sort of \u0026ldquo;task list\u0026rdquo; or TODO list. Org-mode supports this by allowing markers in the headline for the state of a task. Let\u0026rsquo;s look at an example:\nTODO This is a task that needs doing TODO Another todo task sub task one sub task two sub task three Learn about org-mode TODO learn todos TODO learn other stuff You can toggle each task in a list with the C-c C-c keyboard shortcut.\nDONE I\u0026rsquo;ve already finished this one You can change the status of a task by hitting C-c t in the body of a task anywhere, which will prompt for the state to put it in.\nYou can create as many of these as you\u0026rsquo;d like, for example (from my own config, use what works best for you, configuring them is a little out of scope right here) here\u0026rsquo;s what I use:\nTODO something that needs doing DONE something that\u0026rsquo;s already done INPROGRESS something I\u0026rsquo;m currently doing WAITING waiting for someone else before doing anything NEEDSREVIEW there\u0026rsquo;s a PR for this, it needs someone to look at it HOLD this is in permanent hold until further notice CANCELLED I don\u0026rsquo;t need this any more SOMEDAY I\u0026rsquo;d like to do this someday in the waaaaay off future A lot of people just use \u0026ldquo;TODO\u0026rdquo; and \u0026ldquo;DONE\u0026rdquo; though.\nAdding tags and priorities You can add tags by putting them surrounded in \u0026ldquo;:\u0026rdquo; in the headline. Additionally, priorities\nHeadline with a tag Another tagged headline Headline with multiple tags Tags are just another way of organizing things.\nImportant task Medium task Non-important task Again you can configure these, or just use the 3 built in ones.\nTODO [1/3] Task with sub headlines TODO Finish thing TODO Finish that other thing DONE Done with a thing [33%] Task with sub headlines (percent cookie) TODO Finish thing TODO Finish that other thing DONE Done with a thing The TODO-planner payoff :PROPERTIES:\u0026hellip; So TODOs are all well and good, but what is a really neat feature is when you can easily capture new TODOs and display them easily.\nIn order to do this, let\u0026rsquo;s configure a couple of Emacs options in your emacs init:\n(require 'org) ;; Setup C-c c to capture new TODOs (global-set-key (kbd \u0026quot;C-c c\u0026quot;) 'org-capture) ;; Setup a key bind for the agenda (global-set-key (kbd \u0026quot;C-c a\u0026quot;) 'org-agenda) ;; Set up agenda to know about our file, you can use a list of files or ;; directories here (setq org-agenda-files '(\u0026quot;~/todo.org\u0026quot;)) ;; A new template (setq org-capture-templates '((\u0026quot;t\u0026quot; \u0026quot;Todo\u0026quot; entry (file \u0026quot;~/todo.org\u0026quot;) \u0026quot;* TODO %?\\n%U\\n\u0026quot;))) Now, hit C-c c to bring up the capture template list, then t to capture a new TODO item.\nOnce you\u0026rsquo;ve captured a few TODOs, you can try out the agenda by hitting C-c a, which will prompt for what agenda you\u0026rsquo;d like to see, for now hit t to see the TODO list agenda.\nExporting an org-mode buffer Org has a lot of export options, they are all contained behind a C-c C-e export backend, exporting to HTML, markdown, plain text, pdf, etc.\nShow off other features of org-mode if we have more time Maybe not in excruciating detail, but we can show off the power and cover it in more detail at a later time:\nrefiling (org-refile) source code blocks org-babel clocking in/out table formulas custom agenda views capturing notes (not just TODOs) publishing projects remotely via TRAMP \\(a + b\\)\n(defun my/function () \u0026quot;docstring\u0026quot; (interactive) (progn (+ 1 1) (message \u0026quot;Hi\u0026quot;))) echo $data \u0026gt; /tmp/foo for i in `cat /tmp/foo`; do echo $i done echo \u0026quot;hi\u0026quot; # do some things echo \u0026quot;stuff\u0026quot; echo \u0026quot;more stuff\u0026quot; echo \u0026lt;\u0026lt;hi\u0026gt;\u0026gt; To enter and edit a block of text, use C-c C-'\n","date":"2022-08-03","permalink":"https://blog.dotslashsteve.sh/post/blogpostnhumber2/","tags":null,"title":"Blog Post number 2"},{"content":"post\u0026rsquo;s content !\ndef recurse(n, output): if n \u0026gt; 100: output += \u0026quot;All done!\\n\u0026quot; return output else: output += f\u0026quot;Working on {n}\\n\u0026quot; output = recurse(n+1, output) return output return recurse(75, \u0026quot;\u0026quot;) Working on 75 Working on 76 Working on 77 Working on 78 Working on 79 Working on 80 Working on 81 Working on 82 Working on 83 Working on 84 Working on 85 Working on 86 Working on 87 Working on 88 Working on 89 Working on 90 Working on 91 Working on 92 Working on 93 Working on 94 Working on 95 Working on 96 Working on 97 Working on 98 Working on 99 Working on 100 All done! ","date":"2021-10-18","permalink":"https://blog.dotslashsteve.sh/post/blog-post-name-in-url/","tags":null,"title":"Blog Post name"}]