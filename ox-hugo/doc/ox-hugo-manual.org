#+TITLE: Ox-Hugo Manual
#+AUTHOR: Kaushal Modi

#+HUGO_BASE_DIR: .
#+HUGO_SECTION: doc

#+OPTIONS: creator:t

#+MACRO: imageclick [[file:./static/images/$1][file:/images/$1]]
#+MACRO: commit commit [[https://github.com/kaushalmodi/ox-hugo/commit/$1][$1]]
#+MACRO: issue #[[https://github.com/kaushalmodi/ox-hugo/issues/$1][$1]]
#+MACRO: bfissue Blackfriday #[[https://github.com/russross/blackfriday/issues/$1][$1]]
#+MACRO: hugoissue Hugo #[[https://github.com/gohugoio/hugo/issues/$1][$1]]
#+MACRO: ox-hugo-test-file  [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content-org/all-posts.org][=all-posts.org=]]
#+MACRO: doc [[/doc/$1][$2]]
#+MACRO: user @[[https://github.com/$1][*$1*]]

* Changelog
:PROPERTIES:
:CUSTOM_ID: changelog
:END:
** COMMENT v
*** Features
*** Backward-incompatible changes
*** Fixes
*** Meta
** v0.8 <2018-01-26 Fri>
*** Features
- Support exporting content files and attachments (images, documents)
  to Page Bundles organization structure (Hugo v0.32+) --
  {{{issue(111)}}}.
- Support exporting =resources= front-matter (Hugo v0.33+) --
  {{{issue(115)}}}.
- Support exporting =headless= front-matter (Hugo v0.35+).
- Advanced table styling is now possible by specifying =#+ATTR_HTML=
  and =#+ATTR_CSS= (this one is unique to =ox-html=) above Org
  tables. See its [[https://ox-hugo.scripter.co/doc/table-styling/][documentation]] -- {{{issue(93)}}}.
  - Similarly, support =#+ATTR_HTML= and =#+ATTR_CSS= for paragraphs,
    example blocks, source blocks, plain lists and quote blocks too --
    {{{issue(113)}}}.
- Now =publishdate= and =expirydate= front-matter properties get
  auto-derived from =SCHEDULED= and =DEADLINE= special properties if
  associated with the valid Hugo post subtree --
  {{{commit(0807f42d)}}}.
  - Date values can now be easily set using the =C-c .= binding in the
    =HUGO_PUBLISHDATE= and =HUGO_EXPIRYDATE= properties too.
- Export source blocks and table captions -- {{{issue(38)}}}. Here's a
  suggested CSS for the captions:
  #+BEGIN_SRC css
  figcaption,
  .src-block-caption,
  .table-caption {
      font-style: italic;
      text-align: center;
  }
  #+END_SRC
- Export descriptive or definition lists in Blackfriday-friendly
  Markdown format -- {{{issue(114)}}}.
- Support Org Special Blocks [[https://www.gnu.org/software/emacs/manual/html_node/org/Special-blocks.html][like in HTML and LaTeX exports]] --
  {{{issue(105)}}}. Here's one little example:
  #+BEGIN_SRC org
  ,#+BEGIN_mark
  /Some/ *marked* text
  ,#+END_mark
  #+END_SRC
- Allow setting =:EXPORT_HUGO_SECTION:= in the valid Hugo post subtree
  itself.
- Enable replacing any key in the front-matter with anything; it's
  even possible to swap the keys now (tagsâ†”categories:
  {{{commit(fb21e82c)}}}). New keyword:
  =HUGO_FRONT_MATTER_KEY_REPLACE= -- see {{{commit(b72a5fb0)}}}.
- Now all the Org keyword values that should get merged, get merged --
  {{{commit(38eba6d5)}}}.
- Add =title= as a valid property of =menu= front-matter (Hugo
  v0.32+).
*** Backward-incompatible changes
- A "better user-experience" change.. now you do not need to use
  /double-underscores/ as /space/ replacement in =#+HUGO_TAGS=,
  =#+HUGO_CATEGORIES= and =#+KEYWORDS=. See this commit for details
  and examples -- {{{commit(319435db)}}}.
*** Fixes
- Fix =HUGO_LEVEL_OFFSET= not getting set -- {{{issue(117)}}}, thanks
  {{{user(shimmy1996)}}}!
- Fix internal subtree counter not getting reset after a file-based
  export.
- Fix clickable image links with =#+NAME= -- {{{commit(fef0ec50)}}}.
- Make title text rendering more robust.. now Markdown markup
  characters like =*=, =_= and =`= show up fine, verbatim, in the
  title.
- Make em dash, en dash, horizontal ellipsis render in post titles
  too -- {{{hugoissue(4175)}}} (/Upstream bug fix/), and in source
  block captions and table captions too.
- Fix double-escaping of =#= and =![= in Markdown export --
  {{{issue(110)}}} (/fix in upstream =ox-md.el=/).
*** Meta
- Re-write the logic for parsing meta-data for various kinds of dates,
  and optimize the logic for parsing newline separated lists like tags
  and categories.
- The =bare_min= theme used for the test site is made more portable
  (at some point, that theme might be moved to a separate repo).
** v0.7 <2017-12-18 Mon>
*** Features
- *Now C-c C-e H H works for both per-subtree and per-file flows* --
  {{{commit(b1b5d28b)}}}.
- Support Org heading based internal links -- {{{issue(88)}}}.
- Support list values for custom front-matter variables --
  {{{issue(99)}}}.
- Support specifying multiple [[https://gohugo.io/templates/output-formats/][hugo output formats]] .. Now the =outputs=
  front-matter variable is a list.
- Support the Org =#+AUTHOR= and =#+CREATOR= keywords and their
  respective Org Export Options -- {{{issue(106)}}}.
- Support Org Export Snippets and Export Blocks --
  {{{commit(1149f20cd)}}}.
- Now post titles can be set to =nil= i.e. be not be a part of the
  front-matter .. /because you can/.
- Improve the messages printed by =ox-hugo= on doing per-subtree or
  per-file exports.. the progress of files exported using per-subtree
  flow is now clearer, and the name of the file exported using
  per-file flow is now explicit.. Helps when you batch export a dozen
  files with a mix of these 2 flows.
*** Backward-incompatible changes
- Obsolete /org-hugo-export-subtree-\ast{}/ functions and replace them with
  /org-hugo-export-wim-\ast{}/ (What I Mean) functions. See the doc string
  of =org-hugo-export-wim-to-md= for details.

  If you are using the [[https://ox-hugo.scripter.co/doc/auto-export-on-saving/][Auto-export on saving]] flow, note the function
  name change there too!
*** Fixes
- Fix number of backticks in code fence when code contains code fence
  (/pathological corner case/).
- Better document the =HUGO_CODE_FENCE= keyword -- {{{issue(102)}}}.
- Don't render =(c)=, =(r)=, =(tm)= inside Latex equations --
  {{{issue(104)}}} (/Upstream bug workaround/).
- Better recognition of TOML-compatible integers and floats in meta
  data for front-matter so that valid integers/floats don't get
  unnecessarily double-quoted.
*** Meta
- Add a [[https://github.com/kaushalmodi/ox-hugo/blob/master/test/site/themes/bare_min/layouts/partials/debugprint.html][=debugprint.html=]] partial to help pretty-print various Hugo
  objects like Page Params, File and SiteInfo for debug on the test
  site.
- The test site now has [[https://ox-hugo.scripter.co/test/tags/][tags]] and [[https://ox-hugo.scripter.co/test/categories/][categories]] pages.
- Add few real world example posts containing complex Latex equations:
  [[https://ox-hugo.scripter.co/test/real-examples/multifractals-in-ecology-using-r/][1]], [[https://ox-hugo.scripter.co/test/real-examples/nn-intro/][2]].
- Turns out =ox-hugo= works on emacs 24.4 too (/but please upgrade
  to the latest Emacs and Org stable versions!/).
** v0.6 <2017-11-09 Thu>
*** Features
- Support the =num= export option. Now you can prefix all post
  headings (or some not.. the ones with =UNNUMBERED= property set to
  =t=) with their section numbers -- {{{issue(76)}}}.
- Org TOC's are now exported as unordered Markdown lists. This allows
  having TOC's with unnumbered headings too! This also enables
  prefixing the section headings with their full section numbers, and
  also having only selected headings unnumbered (both in the post body
  and the TOC).
- Add support for exporting internal links to source blocks, tables
  and images by their block names! -- {{{issue(29)}}}.
- Org table column alignment markers (=<l>=, =<r>=, =<c>=) are now
  exported to equivalent Markdown tables.. so a center-aligned column
  in Org buffer will remain center-aligned in the final HTML too! --
  {{{issue(95)}}}.
- Allow setting multiple Hugo aliases for a post. Also infer the
  section name from inherited =HUGO_SECTION= values (subtree-based
  exports) for those alias prefixes.
- Prevent a footnote ref to appear by itself on a newline (based on
  wrapping) in the browser -- {{{issue(96)}}}.
- If Hugo shortcodes are used specifically in Markdown (=md=) source
  blocks, they will be auto-escaped (useful when you want to
  document/talk about some Hugo shortcode in a blog post) --
  {{{issue(94)}}}.
- If an Org table has just 1 row, don't make it render as a header row
  in the final HTML.
- If you have a case where you need to have an Org source block
  instead a quote block, and then a source block after that quote
  block (/I know, a very common case../ :wink:), Blackfriday barfs
  ({{{bfissue(407)}}}). But we now have a workaround, which /just
  works/ -- {{{issue(98)}}}.
- Now =ATTR_HTML= above even hyper-linked images works (earlier it
  worked only above non-hyper-linked images).
*** Backward-incompatible changes
- Org TOC's are exported as unordered Markdown lists instead of
  ordered Markdown lists, and now full section numbers (like 1.2.3)
  are shown in the TOC instead of just the last digit (like 3.) --
  {{{commit(4be378e7)}}}.
- The =num= Org export option is default to =nil= (only for
  =ox-hugo=). So Org TOC's are exported without section numbers by
  default. To get section numbers, set =num= to =t= or =onlytoc=.
*** Fixes
- Now exporting 1-row Org tables works too.
- Add missing http/https/ftp prefix for hyper-linked images.
*** Meta
- Add documentation on how you can have
  {{{doc(images-in-content,Images live in the same directory as Org
  source)}}} -- {{{issue(91)}}}.
- Now only Org files for the [[https://ox-hugo.scripter.co][documentation site]] need to be committed
  to git. =ox-hugo= then exports those to Markdown, and then Hugo
  publishes those to HTML (as before) --- all on Netlify.
- Be sure to check out the moderately revamped [[https://ox-hugo.scripter.co/test/][Test Site]]. That might
  be of interest even if you want to check out what the new features
  and changes look like, without first installing/updating =ox-hugo=
  yourself :smile:.
** v0.5 <2017-11-06 Mon>
*** Features
- Export TOC as a Markdown ordered list. See {{{doc(org-toc,Table of
  Contents)}}} -- {{{issue(88)}}}.
- =#+ATTR_HTML= above http/https/ftp links is now supported (useful
  for specifying the =target=, =rel=, attributes, for example).
** v0.4.1 <2017-10-29 Sun>
*** Features
- Support specifying the =:height= parameter in the =#+ATTR_HTML=
  above image links. That eventually gets transformed to the =height=
  parameter in the =figure= tag in the HTML generated by Hugo. This
  feature requires building Hugo from its master branch with commit
  [[https://github.com/gohugoio/hugo/commit/488631fe0abc3667355345c7eb98ba7a2204deb5][488631fe]] (or Hugo v0.31+).
*** Fixes
- Fix =EXPORT_HUGO_SECTION= not getting inherited {{{issue(90)}}}.
** v0.4 <2017-10-28 Sat>
*** Backward-incompatible changes
- Restore the default Org behavior of =#+TAGS=. Now that keyword (and
  the =EXPORT_TAGS= property) is *not* used by =ox-hugo=. Fixes
  {{{issue(89)}}}.
- File-based exports must now use =#+HUGO_TAGS= to set the post tags.
- Subtree-based exports can use the =EXPORT_HUGO_TAGS= property to
  override Org-style tags on the same headline (and the ones inherited
  from Org-style tags from any of the parent subtrees and
  =#+FILETAGS=).
  - Note that for subtree-based exports, =#+FILETAGS= can be used to
    set tags globally in the file. Earlier =#+TAGS= was used for that
    purpose.
- Subtree-based exports can use the =EXPORT_HUGO_CATEGORIES= property
  to override Org-style categories (tags with "@" prefix) on the same
  headline (and the ones inherited from Org-style categories from any
  of the parent subtrees and =#+FILETAGS=).
  - Note that for subtree-based exports, =#+FILETAGS= can be used to
    set categories (tags with "@") globally in the file.

See the new section added to documentation:
{{{doc(tags-and-categories,*Tags and Categories*)}}}
*** Features
- Support specifying the =:width= parameter in the =#+ATTR_HTML= above
  image links. That eventually gets transformed to the =width=
  parameter in the =figure= tag in the HTML generated by Hugo.
** v0.3.2 <2017-10-24 Tue>
*** Fixes
- Fix issue with headline metadata parsing (ALLTAGS, CLOSED, TODO)
  when a post Org heading was immediately followed by that post's
  sub-heading.  This issue was seen in subtree-based exports
  {{{issue(87)}}}.
** v0.3.1 <2017-10-19 Thu>
*** Fixes
- Fix the source block line number annotation when the line numbers
  increased in number of digits in the same code block.
** v0.3 <2017-10-18 Wed>
*** Features
- Source blocks can now be exported with line numbers and/or
  highlighting!

  See {{{doc(source-blocks,Source Blocks)}}} for details.
** v0.2.3 <2017-10-11 Wed>
*** Fixes
- =org-hugo-slug= earlier stripped off only the =code= HTML tag
  (~<code> .. </code>~) from the input string, if present. Now it does
  that for *any* HTML tag, like =span=. For example, this HTML gets
  stripped off from the above heading (only inside =org-hugo-slug=
  when deriving the slug string): ~<span
  class="timestamp-wrapper"><span class="timestamp">&lt;2017-10-11
  Wed&gt;</span></span>~.
** v0.2.2 <2017-10-10 Tue>
*** Backward-incompatible changes
- Now =ox-hugo= by default requires text, to be sub/super-scripted, to
  be wrapped in ={}=. So now =a_b= will be exported as =a_b=, but
  =a_{b}= will be exported as =a<sub>b</sub>=. To revert back to the
  earlier behavior, user needs to add =#+OPTIONS: ^:t= to their Org
  file.
** v0.2.1 <2017-09-28 Thu>
*** Fixes
- Single column tables now export correctly {{{issue(84)}}}.
- Ignore =HUGO_WEIGHT= set to =auto= for /per-file/ exports
  {{{issue(83)}}}.
** v0.2 <2017-09-27 Wed>
*** Features
- Add support for all Hugo =figure= shortcode parameters
  {{{issue(79)}}}.
- New option =org-hugo-delete-trailing-ws= defaults to =t=; now Hugo
  deletes trailing white-spaces by default.
- New options =org-hugo-default-static-subdirectory-for-externals= and
  =org-hugo-external-file-extensions-allowed-for-copying= (related to
  {{{issue(69)}}}).
*** Fixes
- Remove =HUGO_STATIC_IMAGE= option; fix attachment re-write
  {{{issue(69)}}}.
- Fix incorrectly inserted hard line-breaks {{{issue(72)}}}. Added a
  new option =HUGO_PRESERVE_FILLING=.
- Fix error happening when a post title was set to an empty string
  [[[https://github.com/kaushalmodi/ox-hugo/commit/ba9e8365f6ee42f030ed806bf5ec42d6acce4c76][ba9e8365]]].
*** Backward-incompatible changes
- Switch the default value of =org-hugo-use-code-for-kbd= option to
  =nil= [[[https://github.com/kaushalmodi/ox-hugo/commit/88ba15ae9bc809b0983315446c88fecfda3534e5][88ba15ae]]].
** v0.1.3 <2017-09-13 Wed>
- Now a HUGO key value set to ="nil"=, like =#+HUGO_CODE_FENCE: nil=,
  will evaluate as /nil/ instead of /t/, as now
  =org-hugo--plist-get-true-p= is used to parse boolean keys instead
  of =plist-get=.
** v0.1.2 <2017-09-12 Tue>
- Make DateTime matching better; new internal variable
  =org-hugo--date-time-regexp=. Earlier time zones ahead of UTC (with
  =+= sign) were not detected as dates in =org-hugo--quote-string= and
  thus were unnecessarily quoted.
** v0.1.1 <2017-09-11 Mon>
- Use CLOSED log drawer info if available to set the date in
  front-matter {{{issue(68)}}}.
- Code optimization: Use of =org-entry-get= at places instead of
  maintaining global variables.
* Homepage
:PROPERTIES:
:EXPORT_TITLE: Org to Markdown for Hugo
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_TYPE: homepage
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_MENU: :menu main
:CUSTOM_ID: main
:END:
#+INCLUDE: "./ox-hugo-manual.org::#introduction" :only-contents t
** Screenshots
#+INCLUDE: "./ox-hugo-manual.org::#screenshots_intro" :only-contents t
#+INCLUDE: "./ox-hugo-manual.org::#screenshots" :only-contents t

#+INCLUDE: "./ox-hugo-manual.org::#demo" :minlevel 2

** Installation
#+INCLUDE: "./ox-hugo-manual.org::#installation" :only-contents t
** Usage
#+INCLUDE: "./ox-hugo-manual.org::#usage" :only-contents t
** Thanks
#+INCLUDE: "./ox-hugo-manual.org::#thanks" :only-contents t
** Future Plans                                                    :noexport:
There is a plan to create a =hugo.el= that would do things like:
- New post creation using =org-capture= (port code from [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-hugo.el][here]]).
- Interactive functions to toggle /draft/ state,
  add/remove/increment/decrement /publishdate/ property.
- Option to use template =config.toml= and some default hugo theme. So
  all a new user would need to do is to (i) have the =hugo= [[https://github.com/gohugoio/hugo/releases][binary]] in
  =PATH= (ii) define their =hugo= blog dir in the =defcustom= (iii)
  =M-x hugo=.
- Set separate faces for titles based on /draft/ state and
  /futureness/.
* Test Site
:PROPERTIES:
:EXPORT_HUGO_SECTION: test
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu main
:END:
# Generate an empty _index.md in test/ for that subdirectory to get
# generated.
* Issues/Requests
:PROPERTIES:
:EXPORT_HUGO_SECTION: issues
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_MENU: :menu main
:END:
* Changelog
:PROPERTIES:
:EXPORT_FILE_NAME: changelog
:EXPORT_HUGO_MENU: :menu main
:END:
#+INCLUDE: "./ox-hugo-manual.org::#changelog" :only-contents t
* Reused Sections
** Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:
=ox-hugo= is an Org exporter backend that exports Org to
[[https://gohugo.io/][Hugo]]-compatible Markdown ([[https://github.com/russross/blackfriday][Blackfriday]]) and also generates the
front-matter (in TOML or YAML format).

This project consists of =ox-blackfriday.el= too. It is a derivation
of [[https://github.com/larstvei/ox-gfm][=ox-gfm=]] with support added for Blackfriday Markdown tables and
many other tweaks. =ox-hugo= backend extends from this.
** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
This package requires emacs 24.4+ and Org 9.0+. It is available on
Melpa ([[https://melpa.org/#/ox-hugo]]).
** COMMENT Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
Once the package is installed, you will need to /require/ it so that
the =ox-hugo= export options are available in the /Org Export
Dispatcher/ menu (the one you see when you hit =C-c C-e= to initiate
any export).

You can do that by adding the below to your config:
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox
  (require 'ox-hugo))
#+END_SRC
If you use =use-package=, you can do the below instead:
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after ox)
#+END_SRC

*Spacemacs*

Spacemacs users can choose to add this snippet to their
=dotspacemacs/user-config= function in =.spacemacs=:

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/user-config ()
  ;; Other stuff
  ;; ..

  ;; ox-hugo config
  (use-package ox-hugo
    :ensure t                           ;Auto-install the package from Melpa
    :after ox))
#+END_SRC

If you do so, you *also need to* add =ox-hugo= to
=dotspacemacs-additional-packages=.

/Verified to work on Spacemacs =develop= branch with =spacemacs-base=
distribution, =emacs= editing style./
*** Before you export
:PROPERTIES:
:CUSTOM_ID: before-you-export
:END:
Before you export check that these properties are set as you need:
- HUGO_SECTION :: The default Hugo section name for all the posts.  See
                  [[http://gohugo.io/content/sections/][here]] for more information on Hugo sections.  It is
                  common for this property to be set to =posts= or
                  =blog=.  The default value is set using
                  =org-hugo-default-section-directory=.
- HUGO_BASE_DIR :: Root directory of the source for the Hugo site. If
                   this is set to =~/hugo/=, the exported Markdown
                   files will be saved to
                   =~/hugo/content/<HUGO_SECTION>/= directory.  By
                   default, the Markdown files reside in a hierarchy
                   under the =content/= directory in the site root
                   directory ([[http://gohugo.io/content/organization/][ref]]). If you try to export without
                   setting this property, you will get this error:
  #+BEGIN_EXAMPLE
  user-error: It is mandatory to set the HUGO_BASE_DIR property
  #+END_EXAMPLE

*Important*: If you choose to export an Org subtree as a post, you
 need to set the =EXPORT_FILE_NAME= subtree property. That property is
 used by this package to figure out where the current post starts.
*** Export bindings
The common =ox-hugo= export bindings are:
**** For both one-post-per-subtree and one-post-per-file flows
- =C-c C-e H H= :: Export "What I Mean".
  - If point is in a /valid Hugo post subtree/, export that
    subtree to a Hugo post in Markdown.

    A /valid Hugo post subtree/ is an Org subtree has the
    =EXPORT_FILE_NAME= property set.
  - If the file is intended to be exported as a whole (i.e. has the
    =#+TITLE= keyword), export the whole Org file to a Hugo post in
    Markdown.
- =C-c C-e H A= :: Export *all* "What I Mean"
  - If the Org file has one or more 'valid Hugo post subtrees', export
    them to Hugo posts in Markdown.
  - If the file is intended to be exported as a whole (i.e. no 'valid
    Hugo post subtrees' at all, and has the =#+TITLE= keyword), export
    the whole Org file to a Hugo post in Markdown.
**** For only the one-post-per-file flow
- =C-c C-e H h= :: Export the Org file to a Hugo post in Markdown.
*** Customization Options
Do =M-x customize-group=, and select =org-export-hugo= to see the
available customization options for this package.
** Screenshots Intro
:PROPERTIES:
:CUSTOM_ID: screenshots_intro
:END:
Before you read further, you can see below how =ox-hugo= translates
Org to Markdown (Org on the left; exported Markdown with Hugo
front-matter on the right).
** Screenshots
:PROPERTIES:
:CUSTOM_ID: screenshots
:END:
*** One post per Org subtree (preferred)
:PROPERTIES:
:CUSTOM_ID: screenshot-one-post-per-subtree
:END:
{{{imageclick(one-post-per-subtree.png)}}}
- Files in above screenshot :: [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content-org/screenshot-subtree-export-example.org][Org]] -> [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content/writing-hugo-blog-in-org-subtree-export.md][Markdown]]
*** One post per Org file
:PROPERTIES:
:CUSTOM_ID: screenshot-one-post-per-file
:END:
{{{imageclick(one-post-per-file.png)}}}
- Files in above screenshot :: [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content-org/writing-hugo-blog-in-org-file-export.org][Org]] -> [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content/writing-hugo-blog-in-org-file-export.md][Markdown]]
*** Editorial
:PROPERTIES:
:CUSTOM_ID: org-blogging-flow-editorial
:END:
The preferred way to organize the posts is as Org subtrees (also the
main reason to write this package, as nothing like that was out there)
as it makes the meta-data management for Hugo front-matter pretty
effortless.

If you are a /one Org-file per post/ type of a person, that flow works
too! Just note that in this flow many of those =#+HUGO_= properties
need to be managed manually.. just as one would manage the front-matter
in Markdown files --- See the Org versions in the above screenshots for
comparison.
** Demo
:PROPERTIES:
:CUSTOM_ID: demo
:END:
[[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site/content-org][Org source]] â†’ [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site/content][=ox-hugo= Exported Markdown]] â†’ https://ox-hugo.scripter.co/test

Now, the test site looks very simple, because:
- It is designed to verify if all the content translates from Org to
  Markdown as expected.
- It uses a [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site/themes/bare_min/][*bare_min*]] /theme/ written just for the debug purpose (not
  extra aesthetics).

/See [[https://themes.gohugo.io/][Hugo Themes]] for examples of really good site prettification and
presentation styles./
*** Actual usage examples
- https://ox-hugo.scripter.co -- =ox-hugo= Documentation Site
- [[https://scripter.co]] -- My blog
** Note to Future Contributors
:PROPERTIES:
:CUSTOM_ID: note-to-future-contributors
:EXPORT_FILE_NAME: contributing-guide
:END:
NOTE TO FUTURE CONTRIBUTORS: I plan to merge this package into GNU
Elpa or Org source at some point.

So you will need to assign your copyright to FSF in order to get your
patches accepted.

- [[https://www.gnu.org/licenses/why-assign.html][Why assign copyright to FSF?]]
- [[https://www.gnu.org/prep/maintain/html_node/Copyright-Papers.html#Copyright-Papers][How to start this process]]

As a bonus, once you have assigned your copyright to FSF, doors open up
for your future contributions to Emacs too!
*** Contribute to documentation
1. Clone this repo.
2. Add/edit documentation to =doc/ox-hugo-manual.org=.
3. Run =make doc=.
   - This generates the Markdown files for the =ox-hugo= documentation
     site and the .org files like =README.org= and =CONTRIBUTING.org=
     for GitHub.
4. Review the changes in the generated .org and .md files.
5. Commit *only the .org files*, push branch and create PR.
   - The =.org= â†’ =.md= conversion is done by =ox-hugo= on Netlify.
*** Contribute to code
1. Clone this repo.
2. Add/edit the .el files, *tests* in =test/site/content-org/=, and
   *documentation* to =doc/ox-hugo-manual.org=.
3. Run =make md doc=.
4. Review the changes in the generated .org and .md files.
   - Ignore the changes shown in =git diff= related to *only* the
     randomly generated Org ID's (like =org17de7a9=).
5. Commit (*don't push your branch yet!*).
   - As mentioned above, commit *only the .org files* for documentation.
6. Run test: =make test= (you *need* to =git commit= i.e. do the above
   step before this step).
7. Fix your commit(s) if the test fails.. repeat till you succeed.
8. Push your feature branch and create PR.
** Debug
:PROPERTIES:
:CUSTOM_ID: debug
:END:
If the =ox-hugo= exports do not work as expected, or if you get an
error backtrace,
1. Open an [[https://github.com/kaushalmodi/ox-hugo/issues][Issue]].
2. Describe the problem you are seeing.
3. Provide the debug info:
   - Do =M-x org-hugo-debug-info=, *That will copy the debug info in
     Markdown format to the kill ring.* So do *not* manually do any
     other kill (copy/cut) operation after that!
   - Paste the Markdown contents in the GitHub issue.
     - You can still hit the /Preview/ tab of the Issue before
       submitting it.
** Test
:PROPERTIES:
:CUSTOM_ID: test
:END:
1. Clone this repo.
2. Run =make test=.
** Thanks
:PROPERTIES:
:CUSTOM_ID: thanks
:END:
- Matt Price ([[https://github.com/titaniumbones][@titaniumbones]])
- Puneeth Chaganti ([[https://github.com/punchagan][@punchagan]])
- Also thanks to [[http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/][holgerschurig.de]], [[http://whyarethingsthewaytheyare.com/setting-up-the-blog/][whyarethingsthewaytheyare.com]] and
  the [[https://github.com/chaseadamsio/goorgeous][=goorgeous=]] project by Chase Adams ([[https://github.com/chaseadamsio][@chaseadamsio]]) for
  inspiration to start this project.
* Menus
** Early Questions
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu early_questions
:END:
*** Why =ox-hugo=?
:PROPERTIES:
:EXPORT_FILE_NAME: why-ox-hugo
:END:
#+BEGIN_VERSE
>    A picture is worth a thousand words.
#+END_VERSE

So let me show you this screenshot that took on my phone (running
Emacs in Termux app on Android), showing the single Org file that
serves as a source of this whole documentation site.

{{{imageclick(ox-hugo-doc-source-viewing-in-Termux-Android.png)}}}

-----

Using Org just as a markup like Markdown is a miniscule part of
its complete feature-set. Org also allows stuff like:
- Easy ordering/manipulation/commenting of subtrees
- Creating tables (with even formulas like in Excel)
- Directly including source code snippets from external files (instead
  of having to copy/paste them in)
- Running code snippets within the Org file and embedding the results
  (Org Babel)
- ..

Using Org for content writing allows using in-built Org features to
translate to Hugo front-matter:

- Org uses an outline structure and can inherit meta data (tags and
  properties) from one subtree to children subtrees.
- Using that feature, one can tag one tree as /emacs/, and everything
  under that tree (all posts under that) will get that tag
  automatically.
- The same concept applies to inheriting any Org /property/ meta data
  like menu entry, category, section name, etc.
- A subtree can be quickly marked to be in TODO state (default binding
  =C-c C-t=). A *TODO* post is marked as a /draft/ Hugo post.
- The /menu-item weights/ and/or /post weights/ can be set to be
  auto-calculated so that the menu items or post order in the final
  HTML appear in the same order as the respective subtrees in Org.

  If the subtrees are re-ordered in Org, the weights get changed too.
- One can have a subtree with section property set to "posts" and all
  post subtrees under that will go to that section. Similarly another
  parent subtree can have that property set to "articles", and so on.
- Images can be displayed inline in the Org buffer.
- After save hooks can be set up in Emacs so that each time I save the
  file, only the current subtree in Org gets exported to
  Markdown. With the Hugo server running with the new switch that auto
  changes the preview to the last changed post (=--navigateToChanged=
  introduced in Hugo 0.25), the flow is seamless -- Save the Org file
  and see the exact changed post in browser.
- *All* posts can simply be subtrees in a single Org file. That way
  one can take advantage of Org subtree filtering and searching
  functions (=org-sparse-tree= bound to =C-c /= by default).
- (and much more..)
*** Do I need to re-write my whole blog in Org?
:PROPERTIES:
:EXPORT_FILE_NAME: do-I-need-to-re-write-my-whole-blog-in-org
:END:
If you are considering to try out =ox-hugo=, and if you have already
been using Hugo, it is normal for this thought to cross your mind:
#+BEGIN_QUOTE
I already have dozens or hundreds of posts written in Markdown. Do I
need to convert them to Org if I want to start using =ox-hugo=?
#+END_QUOTE

The answer is *No*.

This package will export your future posts written in Org to
Markdown. And those files will live along with your already written
Markdown posts. So converting existing Markdown files to Org would be
purely the user's choice, your choice -- but that's by no means a
necessity if you want to start using =ox-hugo=.

.. And if at some point, you want to stop using =ox-hugo=, you still
have the exported Markdown files.
** Getting Started
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu getting_started
:END:
*** Installation
:PROPERTIES:
:EXPORT_FILE_NAME: installation
:END:
#+INCLUDE: "./ox-hugo-manual.org::#installation" :only-contents t
*** Usage
:PROPERTIES:
:EXPORT_FILE_NAME: usage
:END:
#+INCLUDE: "./ox-hugo-manual.org::#usage" :only-contents t
*** How do I try =ox-hugo= on my site?
:PROPERTIES:
:EXPORT_FILE_NAME: how-do-I-try-it
:END:
1. =cd= to your Hugo site base directory -- the one that contains the
   =config.toml= (or =config.yaml= or =config.json=).
2. Start the =hugo server= in that directory:
   #+BEGIN_EXAMPLE
   hugo server -D --navigateToChanged
   #+END_EXAMPLE
   - =--navigateToChanged= requires Hugo 0.25+.
3. Above command will mention the localhost where the site is
   served. Open that in your browser.
4. Create a separate directory for Org content in the Hugo site base
   directory. You can name it anything, but I prefer to name it
   =content-org=

   Examples ---
   - [[https://github.com/kaushalmodi/ox-hugo/tree/master/doc][=ox-hugo= documentation site (you're reading it)]]
   - [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site][=ox-hugo= test site]]
   - [[https://gitlab.com/kaushalmodi/kaushalmodi.gitlab.io][/scripter.co/ -- My blog]]
5. Create an Org file in there and follow the {{{doc(usage,*Usage*)}}}
   section to export it.
*** Blogging Flow
:PROPERTIES:
:EXPORT_FILE_NAME: blogging-flow
:END:
There are 2 major blogging flows that can be used with this package:
1. One post per Org subtree (preferred)
   - Export only the *current* post Org subtree, or
   - Export all valid Hugo post subtrees in a loop.
2. One post per Org file
   - This works but you won't be able to leverage Org-specific
     benefits like tag and property inheritance, use of TODO states to
     translate to post =draft= state, auto weight calculation for
     posts and menu items, etc.

See the {{{doc(org-capture-setup,Org Capture Setup)}}} page to see how
to quickly create new posts.

See the {{{doc(auto-export-on-saving,Auto-export on Saving)}}} page to
learn how to setup up seeing live-preview of the Hugo-rendered HTML
each time you do =C-x C-s= in the Org file. That section explains how
to set that up for either of the above two blogging flows.
** Example
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu example
:END:
*** Screenshots
:PROPERTIES:
:EXPORT_FILE_NAME: screenshots
:END:
#+INCLUDE: "./ox-hugo-manual.org::#screenshots" :only-contents t
*** Hugo test site for this package
:PROPERTIES:
:EXPORT_FILE_NAME: tests-site
:EXPORT_HUGO_SLUG: tests-site
:END:
A [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site][site]] with bare-bones Hugo "theme" is used to live-test the
package --- you'll know why theme is double-quoted once you try out the
site on =hugo=.

Check out the [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content-org/all-posts.org][example single Org file]]. That is created for testing various
Org->Hugo content and meta-data translation features. [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site/content/posts][Here]] are the
exported Markdown files.
**** How to try =ox-hugo= on that site?
1. Clone this repo and do:
   #+BEGIN_EXAMPLE
   make serve HUGO_BASE_DIR=test/site
   #+END_EXAMPLE
   - *Requires Hugo 0.25+ for =--navigateToChanged= switch.*
2. Open =http://localhost:1337= in your browser.
3. In a different terminal, =cd= to the repo directory.
4. Run:
   #+BEGIN_EXAMPLE
   make md
   #+END_EXAMPLE
5. In few seconds, over a hundred test posts will get created, with
   the =hugo server= aided preview in the browser zapping through each
   new created post.
**** Alternative way
1. Clone this repo.
2. =cd= to the =test/site/= directory and do:
   #+BEGIN_EXAMPLE
   hugo server -D --navigateToChanged
   #+END_EXAMPLE
   - =--navigateToChanged= requires Hugo 0.25+.
3. Above command will mention the localhost where the site is
   served. Open that in your browser.
4. In emacs, =(require  'ox-hugo)= or evaluate the =ox-hugo.el= from the
   cloned repo.
5. Open the {{{ox-hugo-test-file}}} file.
6. =C-c C-e H A= -- That will export *all* subtrees in the file to
   Markdown files.
7. In few seconds, over a hundred test posts will get created, with
   the =hugo server= aided preview in the browser zapping through each
   new created post (because of that new feature =--navigateToChanged=
   introduced in Hugo 0.25).
** Org to Hugo
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu org_to_hugo
:END:
*** Org meta-data to Hugo front-matter
:PROPERTIES:
:EXPORT_FILE_NAME: org-meta-data-to-hugo-front-matter
:END:
**** For subtree-based exports
When organizing the posts as Org *subtrees*, many Hugo front-matter
variables get set implicitly using the meta-data parsed from the posts
in Org.

Below, where /subtree/ is mentioned, it implies a *valid Hugo-post
subtree* i.e. an Org subtree that has the =EXPORT_FILE_NAME= property
set.
#+CAPTION: Hugo front-matter translation for subtree-based exports
#+ATTR_HTML: :class sane-table
|-------------------------------------------+----------------------------------------+----------------------------------------------------------------------------|
| Hugo front-matter (TOML)                  | Org                                    | Org description                                                            |
|-------------------------------------------+----------------------------------------+----------------------------------------------------------------------------|
| =title = "foo"=                           | =* foo=                                | Subtree heading                                                            |
| =date = 2017-09-11T14:32:00-04:00=        | =CLOSED: [2017-09-11 Mon 14:32]=       | Auto-inserted =CLOSED= subtree property when switch to Org *DONE* state    |
| =date = 2017-07-24=                       | =:EXPORT_DATE: 2017-07-24=             | Subtree property                                                           |
| =publishdate = 2018-01-26T00:00:00-05:00= | =SCHEDULED: <2018-01-26 Fri>=          | Auto-inserted =SCHEDULED= subtree property using default =C-c C-s= binding |
| =publishdate = 2018-01-26T00:00:00-05:00= | =:EXPORT_HUGO_PUBLISHDATE: 2018-01-26:= | Subtree property                                                           |
| =expirydate = 2999-01-01T00:00:00-05:00=  | =DEADLINE: <2999-01-01 Tue>=           | Auto-inserted =DEADLINE= subtree property using default =C-c C-d= binding  |
| =expirydate = 2999-01-01T00:00:00-05:00=  | =:EXPORT_HUGO_EXPIRYDATE: 2999-01-01:=  | Subtree property                                                           |
| =lastmod = <current date>=                | =:EXPORT_HUGO_AUTO_SET_LASTMOD: t=     | Subtree property                                                           |
| =lastmod = <current date>=                | =#+HUGO_AUTO_SET_LASTMOD: t=           | Org keyword                                                                |
| =tags = ["toto", "zulu"]=                 | =* foo :toto:zulu:=                     | Subtree heading tags                                                       |
| =categories = ["x", "y"]=                 | =* foo :@x:@y:=                         | Subtree heading tags with =@= prefix                                       |
| =draft = true=                            | =* TODO foo=                           | Subtree heading Org Todo state set to =TODO= (or =DRAFT=)                  |
| =draft = false=                           | =* foo=                                | Subtree heading Org Todo state *not* set to =TODO= (or =DRAFT=)            |
| =weight = 123=                            | =:EXPORT_HUGO_WEIGHT: auto=            | When set to =auto=, weight is auto-calculated                              |
| =weight = 123= (in =[menu.foo]=)          | =:EXPORT_HUGO_MENU: :menu foo=         | Menu weight is auto-calculated unless specified                            |
|-------------------------------------------+----------------------------------------+----------------------------------------------------------------------------|
***** Notes
- Precedence for =date= parsing: =CLOSED= subtree property /more than/
  =EXPORT_DATE= subtree property /more than/ =#+DATE:= keyword.
**** For file-based exports
#+CAPTION: Hugo front-matter translation for file-based exports
#+ATTR_HTML: :class sane-table
|-------------------------------------------+--------------------------------------|
| Hugo front-matter (TOML)                  | Org                                  |
|-------------------------------------------+--------------------------------------|
| =title = "foo"=                           | =#+TITLE: foo=                       |
| =date = 2017-07-24=                       | =#+DATE: 2017-07-24=                 |
| =publishdate = 2018-01-26T00:00:00-05:00= | =#+HUGO_PUBLISHDATE: 2018-01-26=     |
| =expirydate = 2999-01-01T00:00:00-05:00=  | =#+HUGO_EXPIRYDATE: 2999-01-01=      |
| =lastmod = <current date>=                | =#+HUGO_AUTO_SET_LASTMOD: t=         |
| =tags = ["toto", "zulu"]=                 | =#+HUGO_TAGS: toto zulu=             |
| =categories = ["x", "y"]=                 | =#+HUGO_CATEGORIES: x y=             |
| =draft = true=                            | =#+HUGO_DRAFT: true=                 |
| =draft = false=                           | =#+HUGO_DRAFT: false= (default)      |
| =weight = 123=                            | =#+HUGO_WEIGHT: 123=                 |
| =weight = 123= (in =[menu.foo]=)          | =#+HUGO_MENU: :menu foo :weight 123= |
|-------------------------------------------+--------------------------------------|
***** Notes
- The auto weight calculation for posts and menu items works *only*
  for subtree exports. For the file-based export flow, one needs to
  specify the weights manually. The value of /weight/ set to ="auto"=
  will be equivalent to /nil/ for the file-based export flow.
*** Formatting
:PROPERTIES:
:EXPORT_FILE_NAME: formatting
:END:
Below table shows the translation of Org markup to Markdown markup in
the exported =.md= files.

See the Org source in [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content-org/all-posts.org][=all-posts.org=]] under /Formatting/ -> /General/
heading and how it exports to Markdown in [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content/posts/general-formatting.md][=general-formatting.md=]].
#+CAPTION: Org markup to Markdown markup
#+ATTR_HTML: :class sane-table
|--------------------+--------------------------------------------------------------------|
| Org                | Markdown                                                           |
|--------------------+--------------------------------------------------------------------|
| =*bold*=           | =**bold**=                                                         |
| =/italics/=        | =_italics_=                                                        |
| ==monospace==      | =`monospace`=                                                      |
| =~key-binding~=    | =`key-binding`=                                                    |
|                    | - if =org-hugo-use-code-for-kbd= is nil [default]                  |
| =~key-binding~=    | =<kbd>key-binding</kbd>=                                           |
|                    | - if =org-hugo-use-code-for-kbd= is non-nil                        |
|                    | - Requires *CSS* to render the =<kbd>= tag as something special.   |
| =+strike-through+= | =~~strike-through~~=                                               |
| =_underline_=      | =<span class = "underline">underline</span>=                       |
|                    | - Requires *CSS* to render this =underline= class as an underline. |
|--------------------+--------------------------------------------------------------------|
*** Image Links
:PROPERTIES:
:EXPORT_FILE_NAME: image-links
:END:
This section will provides few alternatives for linking to images in
Org files in a way that's compatible with =ox-hugo= and Hugo.

For the sake of the below explanation, let's have the /HUGO_BASE_DIR/
(the directory containing the Hugo site's =config.toml= file) be
=~/hugo/=.

In that case, the Hugo /static/ directory will be =~/hugo/static/=.
**** References to files in the /static/ directory
:PROPERTIES:
:CUSTOM_ID: references-to-files-in-the-static-directory
:END:
Now if you have a file =~/hugo/static/images/foo.png=, =ox-hugo= makes
it convenient for you to reference that image by simply
=/images/foo.png=. Note that this is *not* the default behavior of
other Org exporters.

But in the case of Hugo, as the referenced file will /normally/ be in
the Hugo /static/ directory, =ox-hugo= allows the =/images/foo.png=
style of short reference *if* that is a valid path under that Hugo
site's /static/ directory.

See the below examples on how to reference images in different ways:
***** Inline image (Unhyperlinked)
#+BEGIN_SRC org
[[/images/foo.png]]
#+END_SRC
***** Inline image (Hyperlinked to the image itself)
#+BEGIN_SRC org
[[file:/images/foo.png][file:/images/foo.png]]
#+END_SRC
- NOTE :: The =file:= prefix *has to be used* in both Link and
          Description components of the Org link.
***** Link to an image (Image not inlined)
#+BEGIN_SRC org
[[/images/foo.png][Click here to see foo.png]]
#+END_SRC
This style of linking will work for references to non-image files in
the /static/ directory too.
**** References to files *outside* the /static/ directory
:PROPERTIES:
:CUSTOM_ID: references-to-files-outside-the-static-directory
:END:
This is a unique feature of =ox-hugo=.

(i) If a reference is made to a file outside the Hugo /static/
directory *and* (ii) if it has one of the extensions listed in
=org-hugo-external-file-extensions-allowed-for-copying=, then that
file is copied by =ox-hugo= to the /static/ directory.

Here is an example link:
#+BEGIN_SRC org
[[~/some-dir/static/images/foo.png]]
#+END_SRC
***** Source path contains =/static/=
If you link to files outside of the Hugo =static= directory, just
ensure that the path contains the string =/static/= /if you like to
preserve the directory structure/. Necessary directories are then
created inside the /static/ directory to preserve the structure.

Example translations between outside =static= directory paths to the
copied location inside =static=:

#+CAPTION: Where files get copied to if their path contains =static/=
#+ATTR_HTML: :class sane-table
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------|
| File location outside =static=   | Copied-to location inside =static=        | Explanation                                                                                              |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------|
| =~/temp/static/images/foo.png=   | =<HUGO_BASE_DIR>/static/images/foo.png=   | If the *outside* path has =/static/= in it, the directory structure after that is preserved when copied. |
| =~/temp/static/img/foo.png=      | =<HUGO_BASE_DIR>/static/img/foo.png=      | (same as above)                                                                                          |
| =~/temp/static/foo.png=          | =<HUGO_BASE_DIR>/static/foo.png=          | (same as above)                                                                                          |
| =~/temp/static/articles/zoo.pdf= | =<HUGO_BASE_DIR>/static/articles/zoo.pdf= | (same as above)                                                                                          |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------|

See the {{{doc(usage#before-you-export,Usage â†’ Before you export)}}}
section to learn how to set the *HUGO_BASE_DIR*.
***** Source path does not contain =/static/=
Here is an example link where the source path does not contain
=/static/=:
#+BEGIN_SRC org
[[~/some-dir/bar/foo.png]]
#+END_SRC

In this case, that file is copied directly to the
=org-hugo-default-static-subdirectory-for-externals= sub-directory
(=ox-hugo/= by default) within the Hugo static directory. No directory
structure generation happens in this case.

#+CAPTION: Where files get copied to if their path *does not* contain =static/=
#+ATTR_HTML: :class sane-table
|--------------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------|
| File location outside =static= | Copied-to location inside =static=       | Explanation                                                                                                                 |
|--------------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------|
| =~/temp/bar/baz/foo.png=       | =<HUGO_BASE_DIR>/static/ox-hugo/foo.png= | Here, as the *outside* path does not have =/static/= in it, the file is copied to the =ox-hugo/= dir in Hugo =static/= dir. |
|--------------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------|
***** Disable auto-copying
This auto-copying behavior can be disabled completely by setting
=org-hugo-external-file-extensions-allowed-for-copying= to /nil/.. but
you might not want that if you keep your files *outside* the Hugo
static directory.
*** Source blocks
:PROPERTIES:
:EXPORT_FILE_NAME: source-blocks
:END:
=ox-hugo= tries to generate Markdown with fenced code blocks if
possible. It also supports exporting source blocks with line numbers
and/or highlighting enabled for specific lines.
**** Code Fences
By default, the =HUGO_CODE_FENCE= property is set to a non-nil
value. So the code blocks will be exported with GitHub-style
code-fencing with triple-backticks when possible.

Example:

#+BEGIN_SRC md
```emacs-lisp
(message "Hello")
```
#+END_SRC

- Note :: It is necessary to set the Hugo site config variable
          =pygmentsCodeFences= to =true= for syntax highlighting to
          work for fenced code blocks.

The Hugo =highlight= shortcode is automatically used instead of code
fences (even with this property at a non-nil value) if:
- Line numbers are enabled using the Org =-n= / =+n= syntax (see
  below), or
- Line highlighting is enabled using the =:hl_lines= parameter in the
  source block header (see below).

Set the =HUGO_CODE_FENCE= property to =nil= if you want to *always*
use the Hugo =highlight= shortcode.
**** Line numbers
Line numbers can be enabled/configured using the Org =-n= / =+n=
syntax. See the Info node [[https://orgmode.org/manual/Literal-examples.html][=(org) Literal examples=]] for more
information.

Here are some examples fetched from the "Source blocks with line
number annotation" test case in the {{{ox-hugo-test-file}}}.

#+INCLUDE: "../test/site/content-org/all-posts.org::#source-block-line-number-cases" :only-contents t
**** Highlighting
Implementing this feature was interesting, because while Org doesn't
have a syntax to enable highlighting only specific lines, the Hugo
=highlight= shortcode does allow that via =hl_lines= argument.

So the challenge was to present that "lines to be highlighted"
information in the Org source in a nice format and then translate that
to the =hl_lines= =highlight= shortcode argument at the time of
exporting.

It involved /hacking/ the =org-babel-exp-code=. See [[http://lists.gnu.org/archive/html/emacs-orgmode/2017-10/msg00300.html][this discussion on
the =emacs-orgmode= thread]] if interested.

This feature is implemented by using a parameter called =:hl_lines= in
the header of source blocks. This parameter is specific to =ox-hugo=,
and that's why implementing this needed that hack.

If a user wants to highlight lines 1, and then 3 to 5, they would add
=:hl_lines 1,3-5= to the source block header.
# Below 2 include statements fetch the noweb references used in the
# code inserted by the following include statements.
#+INCLUDE: "../test/site/content-org/all-posts.org::#source-block-with-line-numbers-examples"
#+INCLUDE: "../test/site/content-org/all-posts.org::#source-block-with-line-highlighting-examples"
***** Without line numbers
#+INCLUDE: "../test/site/content-org/all-posts.org::#source-blocks-with-highlighting-no-linenums" :only-contents t
***** With line numbers
The Org source for the below is similar to the above, except that the
=-n= switch is also added to enable the line numbers.

#+INCLUDE: "../test/site/content-org/all-posts.org::#source-blocks-with-highlighting-with-linenums-not-starting-from-1" :only-contents t
*** Tags and Categories
:PROPERTIES:
:EXPORT_FILE_NAME: tags-and-categories
:END:
**** Subtree-based Export
***** Tags
For subtree-based exports, the Hugo front-matter =tags= values are
derived from Org tags set for the post subtree headline.

Example:
#+BEGIN_SRC org
,* My post                                                         :tag1:tag2:
#+END_SRC

By default, Org tags from parent headlines, and the tags set in the
=#+FILETAGS= keyword get inherited (as the default value of
=org-use-tag-inheritance= is =t=). If the tag inheritance doesn't work
as expected, check that the value of that variable is set as required.

If the =EXPORT_HUGO_TAGS= property is set for a valid Hugo post
subtree, the value of that property will *completely override* the Org
tags set even on that subtree, the inherited values of Org-style tags
from parent headlines and even =#+FILETAGS=.
****** Marking files to not be exported
Note that if you want to prevent a file from getting exported, you can
assign a special tag to the whole file (example: =no_no_dont_export=),
but that tag *has to be set using the =#+FILETAGS= keyword*
(=#+HUGO_TAGS= keyword is *only* for setting the tags in Hugo
front-matter). This applies to both, file-based and subtree-based[fn:2]
export flows.

Then in your batch export setup, add that special tag to the
=org-export-exclude-tags= variable. You can grep through this repo for
the special tag =dont_export_during_make_test= that is used to mark
few Org files to not be exported during =make test=.
****** Why use =#+FILETAGS= and not =#+TAGS=?
- About =#+FILETAGS= -- [[https://orgmode.org/manual/Tag-inheritance.html][Tag Inheritance]] or =C-h i g (org) Tag
  inheritance=
- About =#+TAGS= -- [[https://orgmode.org/manual/Setting-tags.html][Setting Tags]] or =C-h i g (org) Setting tags=
***** Categories
For subtree-based exports, the Hugo front-matter =categories= values
are derived from Org tags set for the post subtree headline, but only
the ones prefixed with *@*.

Example:
#+BEGIN_SRC org
,* My post                                                       :@cat1:@cat2:
#+END_SRC

As with the tags, by default, the categories (Org tags with "@"
prefix) from parent headlines, and the ones set in the =#+FILETAGS=
keyword too get inherited (as the default value of
=org-use-tag-inheritance= is =t=). If the tag inheritance doesn't work
as expected, check that the value of that variable is set as required.

If the =EXPORT_HUGO_CATEGORIES= property is set for a valid Hugo post
subtree, the value of that property will *completely override* the
categories set even on that subtree, the inherited values of
categories from parent headlines and even =#+FILETAGS=.
**** File-based Export
The tag (and category) inheritance does not apply to the file-based
export flow. So =#+FILETAGS= will have no effect in this flow.

- To set tags, use =#+HUGO_TAGS=.
- To set categories, use =#+HUGO_CATEGORIES=.
**** Hyphens and Spaces in Org tags (and categories)
Hyphens and spaces are not allowed in Org tags (=* Heading :TAG:=).

So =ox-hugo= converts:
- *single underscores* to hyphens if =org-hugo-prefer-hyphen-in-tags=
  is set to non-nil (default).
- *double underscores* to spaces if =org-hugo-allow-spaces-in-tags= is
  set to non-nil (default).

So an Org tag *abc_def* will be exported as /tag/ *"abc-def"*, and
*abc__def* will be exported as /tag/ *"abc def"*.

The same applies to Org tags with prefix =@= which will be exported as
/categories/. So *@abc_def* will be exported as /category/
*"abc-def"*, and *@abc__def* as /category/ *"abc def"*.

To export a tag or category with an underscore, use 3 consecutive
underscores. So an Org tag *abc___def* will be exported as /tag/
*"abc_def"* (and the same for categories). If you rather prefer to
always export /single underscores/ as underscores, set
=org-hugo-prefer-hyphen-in-tags= to nil.

- NOTE :: These two variables *also affect* the tags set via
          =#+FILETAGS= keyword (which is used only in subtree-based
          exported Org files).

These variables do not affect the tags set via keywords =#+HUGO_TAGS=,
=#+HUGO_CATEGORIES= or =#+KEYWORDS= (or their respective subtree
property forms), because Org keywords and properties allow using the
hyphen and space (/in "double-quoted strings"/) characters. So the
underscores in these keywords remain untransformed on export.
**** Examples
- [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content-org/tags-and-categories.org][Org source]]
- Exported Markdown -- [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content/posts/inheriting-tags.md][=inheriting-tags.md=]], [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content/posts/overriding-tags.md][=overriding-tags.md=]]
- Hugo-generated HTML -- [[https://ox-hugo.scripter.co/test/posts/inheriting-tags/][Inheriting tags]], [[https://ox-hugo.scripter.co/test/posts/overriding-tags/][Overriding tags]]
*** Table of Contents
:PROPERTIES:
:EXPORT_FILE_NAME: org-toc
:END:
Hugo can automatically parse the Markdown content and auto-create a
Table of Contents. See its documentation on [[https://gohugo.io/content-management/toc/][Table of Contents]]. So
=ox-hugo= doesn't generate the Org-parsed TOC by default.

The advantage of using Hugo-generated TOC is that it does not clutter
the Markdown source.

Though, the advantage of Org-generated TOC is that you get finer
control on:
- Where to include the TOC --- Location of the =#+TOC= keyword in the
  Org content.
- How many headlines to include in the TOC --- /Example: =#+TOC:
  headlines 2=/ or =:EXPORT_OPTIONS: toc:2=.
- Whether you want *all* the headlines in the TOC to be numbered or
  not --- See =org-hugo-export-with-section-numbers=.
- Whether you want *only some* headlines numbered (both in post body
  and the TOC) --- Set the =UNNUMBERED= property of that headline to
  =t=.

If you'd like to use the Org-generated TOC instead of the
Hugo-generated one, you can do it one of these many ways:
1. The default is to use the Hugo-generated TOC. But that can be
   changed by setting =org-hugo-export-with-toc= variable to a non-nil
   value, like =t= or =2=.
2. Org-generated TOC can be enabled per-post by either setting
   =EXPORT_OPTIONS= subtree property (for subtree-based exports) or
   the =OPTIONS= keyword (for file-based exports) to a non-nil value,
   like ~toc:t~ or ~toc:2~.
3. Above two options will insert the TOC between the front-matter and
   the Markdown content. If you'd like to insert the Org-generated TOC
   anywhere else in the post, you can do it using the =#+TOC=
   keyword.. Example: =#+TOC: headlines 2=.

See Org manual [[https://orgmode.org/manual/Table-of-contents.html][Table of Contents]] section for more info.

/Note that =ox-hugo= does not support =#+TOC: listings= and =#+TOC:
tables=./
*** Table Styling
:PROPERTIES:
:EXPORT_FILE_NAME: table-styling
:END:
Classic =ox-html= allows setting table attributes directly using
=#+ATTR_HTML=. But specifying the attributes directly in the =<table>=
tag is [[https://www.w3.org/TR/2011/WD-html-markup-20110113/table.html#table-constraints][admonished in HTML5]] .. /and so Hugo/Blackfriday do not allow
any way to directly insert attributes *inside* the =<table>= tag./

So a workaround is used by =ox-hugo=.. it wraps the tables with =<div>=
tags with classes, which a user can then use to style the tables using
CSS.. /just as recommended by HTML5/ :smile:.

=ox-hugo= can style different tables in different ways on the same
page, with the help of =#+ATTR_HTML= and =#+ATTR_CSS= (*introduced in
=ox-hugo=*) attributes.

1. =#+ATTR_HTML= is used to assign one or more classes to a table.
   #+BEGIN_SRC org
   ,#+ATTR_HTML: :class sane-table
   #+END_SRC
   - Wraps the table in =<div>= tags with =sane-table= class.
   - Sets style from =#+ATTR_CSS=, if present, for =.sane-table table=
     scope.

   or

   #+BEGIN_SRC org
   ,#+ATTR_HTML: :class zebra-striping sane-table
   #+END_SRC
   - Wraps the table in =<div>= tags with =zebra-striping= *and*
     =sane-table= classes.
   - Sets style from =#+ATTR_CSS=, if present, *only* for the
     =.zebra-striping table= scope i.e. only for the first class
     listed in that attribute. Specifying multiple classes to a table
     is useful if you want that table to inherit the styling from CSS
     rules for multiple classes.
2. =#+ATTR_CSS= is used to assign the specified styles to the
   class of the table it precedes.

   Examples:
   #+BEGIN_SRC org
   ,#+ATTR_CSS: :width 80%
   #+END_SRC

   #+BEGIN_SRC org
   ,#+ATTR_CSS: :text-align left
   #+END_SRC

   - If =#+ATTR_HTML= is used to specify the table class, the style is
     applied to the first of the list of classes (as explained above).
   - If =#+ATTR_HTML= is *not* used to set a custom class name for the
     table, the class name is auto-derived..
     - If the table =#+CAPTION= is present, the class name is
       =table-N= where "N" is the /Nth/ captioned table on that page.
     - If the table is not captioned, the class name is always
       =table-nocaption=. So.. if you want to have different styling
       for different tables, make sure that you either set their
       custom class name using =#+ATTR_HTML=, or caption them.


- All tables exported with the =<div>= tags have the class
  =ox-hugo-table=. This can be useful if you want to set a common
  style for all those tables.
- =#+ATTR_CSS= applies styling only to the =.CLASS table= scope. So if
  you want more styling i.e. for other elements like =td=, =tr=, etc,
  you would need to do that in an =#+EXPORT_BEGIN html= block.

  Example:

  #+BEGIN_SRC org
  ,#+BEGIN_EXPORT html
  <style>
  .my-table th,
  .my-table td {
      padding: 20px;
      text-align: left;
  }
  </style>
  ,#+END_EXPORT
  ,#+CAPTION: Table with verbatim CSS
  ,#+ATTR_HTML: :class my-table
  | h1  | h2  | h3  |
  |-----+-----+-----|
  | abc | def | ghi |
  #+END_SRC

You can find many examples of table styling here:
#+CAPTION: Table Styling Examples
#+ATTR_HTML: :class sane-table
| Org Source                                                                                   | Exported Markdown | Hugo HTML   |
|----------------------------------------------------------------------------------------------+-------------------+-------------|
| {{{ox-hugo-test-file}}} -- search for =* Table Styling= or =:EXPORT_FILE_NAME: table-styling= | [[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content/posts/table-styling.md][table-styling.md]]  | [[https://ox-hugo.scripter.co/test/posts/table-styling/][Hugo output]] |

-----

/Credit: [[https://css-tricks.com/complete-guide-table-element/][Guide to styling tables in HTML5-friendly manner]]/ --- /css-tricks.com/
** Enhancements
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu enhancements
:END:
*** Auto-export on Saving
:PROPERTIES:
:EXPORT_FILE_NAME: auto-export-on-saving
:END:
Wouldn't it be awesome if you can see the live-preview of your
Hugo-rendered post each time you saved your post in Org?

Well.. you can do that with these steps:
**** First time setup
***** =after-save-hook= setup for both /per-subtree/ and /per-file/ flows
This step applies whether you intend to use the /per-subtree export
flow/ or the /per-file/ export flow.
****** Step 1a: Set up the =after-save-hook=
1. Add below to the very-end of your Org file:
   #+BEGIN_SRC org
   ,* Footnotes
   ,* COMMENT Local Variables                          :ARCHIVE:
   # Local Variables:
   # eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
   # End:
   #+END_SRC
   *About Footnotes*: Here I recommend adding the =* Footnotes= header
   too so that in case you add any Org footnotes, they go directly to
   that section you created. Otherwise, Org will auto-create a new
   /Footnotes/ heading *at the end of the file*.. and the /Local
   Variables/ heading would then no longer be at the end of the file.
2. Then save the file, and do =revert-buffer=.
3. You will be prompted to add that =eval= line to your /Customize/
   setup, hit ~!~ to permanently save that setting and prevent future
   prompts.
****** Step 1b: Prevent auto-export during Org Capture
While this sub-step is useful for the /per-subtree/ export flow, it
won't hurt to implement even if you are using the /per-file/ flow.

This step is useful if you choose to write new posts using
=org-capture= as explained in the {{{doc(org-capture-setup,/Org
Capture Setup/)}}} section.

After saving the below to your emacs config and evaluating it,
auto-exports will be prevented when saving a new post created using
Org Capture.

/If you don't do the below, auto-exports would happen as soon as you
=C-c C-c= on your initial capture.. which could get annoying./
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org-capture
  ;; Do not cause auto Org->Hugo export to happen when saving captures
  (defun modi/org-capture--remove-auto-org-to-hugo-export-maybe ()
    "Function for `org-capture-before-finalize-hook'.
Disable `org-hugo-export-wim-to-md-after-save'."
    (setq org-hugo-allow-export-after-save nil))

  (defun modi/org-capture--add-auto-org-to-hugo-export-maybe ()
    "Function for `org-capture-after-finalize-hook'.
Enable `org-hugo-export-wim-to-md-after-save'."
    (setq org-hugo-allow-export-after-save t))

  (add-hook 'org-capture-before-finalize-hook #'modi/org-capture--remove-auto-org-to-hugo-export-maybe)
  (add-hook 'org-capture-after-finalize-hook #'modi/org-capture--add-auto-org-to-hugo-export-maybe))
#+END_SRC
***** Alternative =after-save-hook= setup only for /per-file/ flow
This step applies *only* to the /per-file/ export flow.
****** Step 1: Set up the =after-save-hook= (only for /per-file/ flow)
If you use a seperate Org file for each blog post, you can add the
below to your config *instead* of doing the above. Skip /Step 1b/
below altogether if you use this alternative.
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t
  :after ox
  :init
  (defconst my/hugo-org-content-dir (expand-file-name "~/hugo_base_dir/content-org/")
    "Directory containing the Org mode posts.")

  (defun my/org-hugo-publish-current-buffer-as-post ()
    "Export the current Org file if a valid Hugo post.
Current file is exported using `org-hugo-export-to-md' if it
contains the #+TITLE keyword and is present in the
`my/hugo-org-content-dir'."
    (let ((fname (buffer-file-name)))
      (when (and fname
                 (string-match-p (concat "\\`" (regexp-quote my/hugo-org-content-dir) ".*\\.org\\'")
                                 fname))
        (save-excursion
          (goto-char (point-min))
          (if (< (how-many "^#\\+TITLE:") 1)
              (message "Unable to export as the Org file is missing the #+TITLE keyword.")
            (org-hugo-export-to-md))))))

  (defun my/org-mode-hook-fn ()
    "My Org mode customization."
    (add-hook 'after-save-hook #'my/org-hugo-publish-current-buffer-as-post :append :local))

  (add-hook 'org-mode-hook #'my/org-mode-hook-fn))
#+END_SRC
**** Steps that /might/ need to be taken every time
Once the initial setup is done, the following steps apply to both
blogging flows.
***** Step 2: Start the engines (Hugo Server)
We start the =hugo server= so that we can see the live-preview each
time the Org file is saved.

I recommend using Hugo version 0.25 at the minimum as that added
support for the awesome =--navigateToChanged= switch!

Run below in your Hugo site root (the directory that contains the site
=config.toml=) to start the server:
#+BEGIN_EXAMPLE
hugo server -D --navigateToChanged
#+END_EXAMPLE
***** Step 3: Open your browser
By default the site is served locally on port /1313/ on
/localhost/. So the above step would have printed something like below
at the end:
#+BEGIN_EXAMPLE
Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)
#+END_EXAMPLE

So open your favorite browser pointing to that address.
**** FINAL step that needs to be taken every time
***** Step 4: Save and be in awe
If you are like me, you might not need to repeat steps 2 and 3 above,
as you can leave the =hugo= server running in a separate terminal, and
have a browser tab pinned to that localhost.

So with that, have the emacs and browser frames set up side-by-side,
and edit your Org post.

Hit =C-x C-s= and be in awe as the browser auto-refreshes to the
*exact post you modified*!
*** Org Capture Setup
:PROPERTIES:
:EXPORT_FILE_NAME: org-capture-setup
:END:
If you do not want to manually type the =EXPORT_FILE_NAME= for each
new post, here is an example Org Capture template can help:
#+BEGIN_SRC emacs-lisp
;; Populates only the EXPORT_FILE_NAME property in the inserted headline.
(with-eval-after-load 'org-capture
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (add-to-list 'org-capture-templates
               '("h"                ;`org-capture' binding + h
                 "Hugo post"
                 entry
                 ;; It is assumed that below file is present in `org-directory'
                 ;; and that it has a "Blog Ideas" heading. It can even be a
                 ;; symlink pointing to the actual location of all-posts.org!
                 (file+olp "all-posts.org" "Blog Ideas")
                 (function org-hugo-new-subtree-post-capture-template))))
#+END_SRC

Above capture will auto-insert a heading prefixed with =TODO=. With
=org-log-done= set to ='time=, on changing the =TODO= state to the
=DONE= state (=C-c C-t=), a [[https://orgmode.org/manual/Special-properties.html][/Special Property/]] called =CLOSED= will be
auto-inserted below the heading. Below is an example.
#+BEGIN_EXAMPLE
,*** DONE Narrowing the Author column in Magit                       :org:log:
CLOSED: [2017-12-18 Mon 16:36]
#+END_EXAMPLE
=ox-hugo= auto-sets the =date= field in the front-matter to the time
stamp in that =CLOSED= property.
**** Alternative way to set the =date= field
If you prefer to not insert time-stamps when switching to the =DONE=
state (i.e. you have =org-log-done= at its default value of =nil=),
you can explicitly insert the =EXPORT_DATE= property too using the
below Org Capture template instead.
#+BEGIN_SRC emacs-lisp
;; Populates both EXPORT_FILE_NAME and EXPORT_DATE properties in the inserted
;; headline.
(with-eval-after-load 'org-capture
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (add-to-list 'org-capture-templates
               '("h"                ;`org-capture' binding + h
                 "Hugo post"
                 entry
                 ;; It is assumed that below file is present in `org-directory'
                 ;; and that it has a "Blog Ideas" heading. It can even be a
                 ;; symlink pointing to the actual location of all-posts.org!
                 (file+olp "all-posts.org" "Blog Ideas")
                 (function org-hugo-new-subtree-post-capture-template))))
#+END_SRC
*** Images in Content
:PROPERTIES:
:EXPORT_FILE_NAME: images-in-content
:END:
Conventionally any static content for a Hugo site, like images, PDF
files, and other attachments are put in the site =static/=
directory. Files in that directory are served at the site root when
the Hugo publishes that site. So all the content in there can be
accessed using the root prefix =/=. So a =static/foo.png= file can be
accessed at =/foo.png=.

More detail for this conventional approach can be found in the
documentation for
{{{doc(image-links#references-to-files-in-the-static-directory,referencing
files in static directory)}}}.
**** But.. what about putting images along with the content?
OK, so with that short intro out of the way, =ox-hugo= supports
putting the /attachment files/ in the same directory as the source Org
files!

In the below example, the left hand side shows the Org content and
attachment file organization that the user would need to do
manually. And the right hand side shows the structure that =ox-hugo=
will generate in the =content/= and =static/= (the /conventional/ way
discussed above) directories.

#+BEGIN_EXAMPLE
./content-org
â”œâ”€â”€ images-in-content/
â”‚  â”œâ”€â”€ images-in-content.org
â”‚  â”‚    * Post 1 (Org subtree)   â†’  ./content/images-in-content/post1.md
â”‚  â”‚    * Post 2 (Org subtree)   â†’  ./content/images-in-content/post2.md
â”‚  â”œâ”€â”€ gnu.png                   â†’  ./static/ox-hugo/gnu.png
â”‚  â””â”€â”€ org.png                   â†’  ./static/ox-hugo/org.png
â”œâ”€â”€ post3/
â”‚  â”œâ”€â”€ post3.org                 â†’  ./content/images-in-content/post3.md
â”‚  â””â”€â”€ gnu-copy.png              â†’  ./static/ox-hugo/gnu-copy.png
â””â”€â”€ post4/
   â”œâ”€â”€ post4.org                 â†’  ./content/images-in-content/post4.md
   â””â”€â”€ org-copy.png              â†’  ./static/ox-hugo/org-copy.png
#+END_EXAMPLE

Have a look at the
[[https://raw.githubusercontent.com/kaushalmodi/ox-hugo/master/test/site/content-org/images-in-content/images-in-content.org][=content-org/images-in-content/images-in-content.org=]] file for an
example of how to reference same-directory files (=gnu.png= and
=org.png= in this example) in an Org file (/Hint: Just as you would do
in a normal Org file/).

The benefit of this /same-directory-attachment/ approach is that you
don't need to use any directory prefix to reference those files
(example: =[[file:gnu.png]]=). When =ox-hugo= exports those posts though,
the images are auto-copied to the =static/ox-hugo/= directory[fn:1]
and =/ox-hugo/= prefix is added to those file references in the
exported Markdown files.

Also as the image file references are valid within the Org file, you
can see those images inline too!
[[file:/images/images-in-content-screenshot.png]]
**** Examples
Whether you prefer the subtree-based approach or file-based approach
for writing your posts in Org, there are examples for both in the
=ox-hugo= test suite:
- [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site/content-org/images-in-content][Org source]]
- [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site/content/images-in-content][Exported Markdown]]
** Meta
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu meta
:END:
*** Meta Features
:PROPERTIES:
:EXPORT_FILE_NAME: meta-features
:END:
- [X] Extensive tests! -- [[https://github.com/kaushalmodi/ox-hugo/tree/master/test/site/content-org][test/site/content-org]] (=make test=)
- [X] Travis CI Integration -- Checks with emacs versions starting from
  24.4->25.2, with the latest stable version of =org-plus-contrib=.
- [X] [[https://ox-hugo.scripter.co][Documentation site]] -- Generated using =ox-hugo= itself (=make
  doc_md hugo_doc=).
- [X] GitHub repo files: [[https://github.com/kaushalmodi/ox-hugo/blob/master/README.org][~README.org~]] and [[https://github.com/kaushalmodi/ox-hugo/blob/master/CONTRIBUTING.org][~CONTRIBUTING.org~]] --
  Generated using =ox-org= (=make doc_gh=).
- [X] [[../test][Test site]] -- Regenerated after each commit to this repo (=make
  test=).
- [X] Passes =make test= and generates documentation using =make doc=
  in [[https://play.google.com/store/apps/details?id=com.termux&hl=en][Termux]] app on Android too.
- [X] Passes =checkdoc= and =package-lint= ([[https://github.com/purcell/package-lint/issues/89][/almost/]]).
*** Contributing Guide
:PROPERTIES:
:EXPORT_FILE_NAME: contributing-guide
:END:
#+INCLUDE: "./ox-hugo-manual.org::#note-to-future-contributors" :only-contents t
*** Debug
:PROPERTIES:
:EXPORT_FILE_NAME: debug
:END:
#+INCLUDE: "./ox-hugo-manual.org::#debug" :only-contents t
*** Test
:PROPERTIES:
:EXPORT_FILE_NAME: test
:END:
#+INCLUDE: "./ox-hugo-manual.org::#test" :only-contents t
* Footnotes

[fn:2] For only subtree-based exports, you can set that special tag as
Org style tags too. Example: ~* I don't want to export this post
:no_no_dont_export:~.. and don't forget to add that tag to
=org-export-exclude-tags= too!

[fn:1] To understand why the attachment files get copied to the
=static/ox-hugo/= directory, have a look at the documentation for
{{{doc(image-links#references-to-files-outside-the-static-directory,referencing
files outside static directory)}}}.
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# fill-column: 70
# eval: (auto-fill-mode 1)
# eval: (toggle-truncate-lines 1)
# eval: (add-hook 'after-save-hook #'org-hugo-export-wim-to-md-after-save :append :local)
# End:
