#+HUGO_BASE_DIR: ../
#+SEQ_TODO: TODO DRAFT DONE
#+PROPERTY: header-args :eval no

#+STARTUP: indent

#+MACRO: doc [[https://ox-hugo.scripter.co/doc/$1][$2]]
#+MACRO: oxhugoissue =ox-hugo= Issue #[[https://github.com/kaushalmodi/ox-hugo/issues/$1][$1]]
#+MACRO: hugoissue =hugo= Issue #[[https://github.com/gohugoio/hugo/issues/$1][$1]]
#+MACRO: bfissue /Blackfriday/ Issue #[[https://github.com/russross/blackfriday/issues/$1][$1]]

#+AUTHOR:

* Preparation
:PROPERTIES:
:EXPORT_FILE_NAME: prep
:EXPORT_DATE: 2017-07-12T17:05:38-04:00
:END:
1. Be the root directory for this Hugo site (the directory containing
   =config.toml=).
2. Run
  #+BEGIN_EXAMPLE
  hugo server --port 1111
  #+END_EXAMPLE
3. See the site served on "http://localhost:1111/".
* Post 1
:PROPERTIES:
:EXPORT_FILE_NAME: post-1
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
Export this *first* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.
* Post 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-2
:END:
This post has no date.

Export this *second* post only by bringing point here and doing =M-x org-hugo-export-wim-to-md=.
* Image                                                               :image:
** Image links
:PROPERTIES:
:EXPORT_FILE_NAME: image-links
:EXPORT_DATE: 2017-07-15T07:49:44-04:00
:END:
This is some text before the first heading of this post.
*** Unclickable image (works!)
[[/images/org-mode-unicorn-logo.png]]

-----
+To be fixed+ (*Now fixed*): The sub-headings in a post get exported as /Heading 1/
 instead of /Heading 2/.

For example, this sub-section's heading is exported as:
#+BEGIN_EXAMPLE
# Unclickable image
#+END_EXAMPLE
instead of
#+BEGIN_EXAMPLE
## Unclickable image
#+END_EXAMPLE

-----
*Solution*: Above is fixed by setting =HUGO_OFFSET_LEVEL= to 1.

So the sub-heading title and the post title both get the /Heading 1/
tag and look the same size.
*** Clickable link that opens the image (works!)
[[/images/org-mode-unicorn-logo.png][Click here to see the unicorn]]
*** Clickable image that opens the image (works!)
Click below image to jump to the unicorn image.
[[/images/org-mode-unicorn-logo.png][file:/images/org-mode-unicorn-logo.png]]

- NOTE :: =file:= has to be used in the *Description component* of the
          Org link.

-----

Here's the same link with =#+NAME= specified.. which should also be
clickable.

#+NAME: fig__unicorn
[[/images/org-mode-unicorn-logo.png][file:/images/org-mode-unicorn-logo.png]]
*** Link to image outside of standard Hugo =static= directory
[[../files-to-be-copied-to-static/static/images/copy-of-unicorn-logo.png]]

If you link to files outside of the Hugo =static= directory, ensure
that the path contains =/static/= if you would like to preserve the
directory structure.

Example translations between outside =static= directory paths to the
copied location inside =static=:
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
| Outside =static=                 | Copied-to location inside =static=        | Explanation                                                                                                          |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
| =~/temp/static/images/foo.png=   | =<HUGO_BASE_DIR>/static/images/foo.png=   | If the *outside* path has =/static/= in it, the directory structure after that is preserved when copied.             |
| =~/temp/static/img/foo.png=      | =<HUGO_BASE_DIR>/static/img/foo.png=      | (same as above)                                                                                                      |
| =~/temp/static/foo.png=          | =<HUGO_BASE_DIR>/static/foo.png=          | (same as above)                                                                                                      |
| =~/temp/static/articles/zoo.pdf= | =<HUGO_BASE_DIR>/static/articles/zoo.pdf= | (same as above)                                                                                                      |
|----------------------------------+-------------------------------------------+----------------------------------------------------------------------------------------------------------------------|
**** Source path does not contain =/static/=
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]]
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| Outside =static=         | Copied-to location inside =static=       | Explanation                                                                                                           |
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =~/temp/bar/baz/foo.png= | =<HUGO_BASE_DIR>/static/ox-hugo/foo.png= | Here, as the *outside* path does not have =/static/=, the file is copied to the =ox-hugo/= dir in Hugo =static/= dir. |
|--------------------------+------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
- Note :: The =ox-hugo= sub-directory name is because of the default
          value of
          =org-hugo-default-static-subdirectory-for-externals=.
** Image captions
:PROPERTIES:
:EXPORT_DATE: 2017-07-19
:EXPORT_FILE_NAME: image-captions
:CUSTOM_ID: image-captions
:END:
Some text before image.

#+CAPTION: A unicorn!
[[/images/org-mode-unicorn-logo.png]]

Some more text, after image.
** Image with Hugo =figure= shortcode parameters set using =ATTR_HTML=
:PROPERTIES:
:EXPORT_FILE_NAME: figure-shortcode-and-attr-html
:END:
{{{oxhugoissue(17)}}}
*** Setting =class= parameter
#+ATTR_HTML: :class inset
[[/images/org-mode-unicorn-logo.png]]

[[https://github.com/kaushalmodi/ox-hugo/issues/17#issuecomment-313627728][Discussion]]
**** COMMENT Below will not work!
You cannot wrap markdown code inside HTML.

As /rdwatters/ says [[https://discourse.gohugo.io/t/is-it-possible-to-insert-html-code-in-markdown-content/4867/4?u=kaushalmodi][here]],
#+BEGIN_QUOTE
HTML can be part of markdown because HTML-inside-markdown is part of
the spec. That said, remember that the spec disallows markdown nested
inside of HTML. So if you create a div, just make sure everything
inside that div is valid HTML.
#+END_QUOTE

#+BEGIN_EXPORT md
<div class="inset">
#+END_EXPORT
[[/images/org-mode-unicorn-logo.png]]
#+BEGIN_EXPORT md
</div>
#+END_EXPORT
*** Setting =alt= parameter
[[https://www.reddit.com/r/emacs/comments/71wy6n/orgmode_as_a_markup_language_does_make_sense_even/dnhqudn/][Reference]]
#+ATTR_HTML: :alt Org-mode Unicorn Logo
[[/images/org-mode-unicorn-logo.png]]
*** Setting =title= parameter
#+ATTR_HTML: :title Logo
[[/images/org-mode-unicorn-logo.png]]
*** Setting image caption
The image caption can be set in two ways.
1. Using the Org =#+CAPTION= keyword
2. Using =#+ATTR_HTML: :caption my caption=

The =#+CAPTION= is available will get the higher precedence. In the
below image, caption is set using that:

#+INCLUDE: "./all-posts.org::#image-captions" :only-contents t

Below, the same caption is set using the =#+ATTR_HTML= method instead:

Some text before image.

#+ATTR_HTML: :caption A unicorn!
[[/images/org-mode-unicorn-logo.png]]

/Enter a new line after the image link so that it's in an "Org
paragraph" that contains just that image. That tells Org that that
=#+ATTR_HTML= attribute is associated *only* with that image, and not
to the text that follows that image too./
*** Setting image size
**** Setting =:width= parameter
The image [[https://www.w3schools.com/tags/att_img_width.asp][width]] can be specified in *pixels* using the =:width=
parameter. *The height of the image will be resized proportionally.*

Below image is shown 50 pixels wide.
#+ATTR_HTML: :width 50
[[/images/org-mode-unicorn-logo.png]]

Below image is shown 100 pixels wide.
#+ATTR_HTML: :width 100
[[/images/org-mode-unicorn-logo.png]]

Below image is shown with a width of 1000 pixels! Now the size of this
image is 200px × 200px. But the image will still show up in 1000px ×
1000px size, but obviously heavily pixelated!

#+ATTR_HTML: :width 1000
[[/images/org-mode-unicorn-logo.png]]
**** Setting =:height= parameter
*NOTE*: Support for specifying =height= parameter to the Hugo =figure=
 shortcut was only added recently in [[https://github.com/gohugoio/hugo/pull/4018][hugo PR #4018]]. So setting this
 parameter will need *hugo v0.31* or later.

-----

The image [[https://www.w3schools.com/tags/att_img_height.asp][height]] can be specified in *pixels* using the =:height=
parameter. *The weight of the image will be resized proportionally.*

Below image is shown 50 pixels tall.
#+ATTR_HTML: :height 50
[[/images/org-mode-unicorn-logo.png]]

Below image is shown 100 pixels tall.
#+ATTR_HTML: :height 100
[[/images/org-mode-unicorn-logo.png]]

Below image is shown with a height of 1000 pixels! Now the size of
this image is 200px × 200px. But the image will still show up in
1000px × 1000px size, but obviously heavily pixelated!

#+ATTR_HTML: :height 1000
[[/images/org-mode-unicorn-logo.png]]
**** Setting both =:width= and =:height=
The *NOTE* above applies here too.. needs *hugo v0.31* or later.

The figure sizes below are intentionally set /mis-proportionally/ just
for testing.
- =:width 100 :height 200=
  #+ATTR_HTML: :width 100 :height 200
  [[/images/org-mode-unicorn-logo.png]]
- =:width 200 :height 100=
  #+ATTR_HTML: :width 200 :height 100
  [[/images/org-mode-unicorn-logo.png]]
*** Multiple =ATTR_HTML=
Below in Org source:
#+BEGIN_SRC org
#+HTML: <style>.foo img { border:2px solid black; }</style>
#+ATTR_HTML: :alt Go is fine though.
#+ATTR_HTML: :width 300 :class foo
[[file:https://golang.org/doc/gopher/pkg.png]]
#+END_SRC

Rendered this:

#+HTML: <style>.foo img { border:2px solid black; }</style>
#+ATTR_HTML: :alt Go is fine though.
#+ATTR_HTML: :width 300 :class foo
[[file:https://golang.org/doc/gopher/pkg.png]]

*NOTE*: We cannot use =:style= in =#+ATTR_HTML= because Hugo does not
 /yet/ support a =style= argument in the =figure= shortcode
 [[[https://github.com/gohugoio/hugo/blob/488631fe0abc3667355345c7eb98ba7a2204deb5/tpl/tplimpl/template_embedded.go#L22-L37][Source]]].

So using =#+HTML: <style>.foo img ... </style>= and =#+ATTR_HTML: :class
 foo= as shown in the workaround above.
*** Other
Similarly, =:link=, =:attr=, =:attrlink= parameters in =#+ATTR_HTML=
are also supported to set the corresponding parameter in the Hugo
=figure= shortcode.
* Setting heading anchors
:PROPERTIES:
:EXPORT_FILE_NAME: setting-heading-anchors
:EXPORT_DATE: 2017-07-12T17:05:39-04:00
:END:
** Heading 1 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-1
:END:
Something
*** Heading 1.1 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-1.1
:END:
Something else
** Heading 2 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-2
:END:
Something 2
*** Heading 2.1 of the post
:PROPERTIES:
:CUSTOM_ID: cool-ref-2.1
:END:
Something 2.1
* Post heading with crazy characters
:PROPERTIES:
:EXPORT_FILE_NAME: post-heading-slugs
:EXPORT_DATE: 2017-07-12T13:46:33-04:00
:END:
** Releasing version 1.1
** Foo ( Bar ) Baz
** (Foo)Bar.Baz&Zoo
** Hey! I have a link [[https://example.org][here]] (Awesome!)
** Este título es en español
** Non-English titles
*** ÂÊÎÔÛ
*** ÁÉÍÓÚÝ
*** ÀÈÌÒÙ
*** ÄËÏÖÜ
*** ÃÐÑÕÞ
*** Ç
** Headings with HTML
*** Checklist [1/3]
Above title would render to ~Checklist <code>[1/3]</code>~ in
Markdown.
**** DONE Item 1
Above would render to ~<span class="todo DONE_">DONE </span> Item 1~
in Markdown.
**** TODO Item 2
Above would render to ~<span class="todo TODO_">TODO </span> Item 2~
in Markdown.
**** TODO Item 3
Above would render to ~<span class="todo TODO_">TODO </span> Item 3~
in Markdown.
*** Version 0.1 <2017-10-11 Wed>
Above title would render to ~Version 0.1 <span
class="timestamp-wrapper"><span class="timestamp">&lt;2017-10-11
Wed&gt;</span></span>~ in Markdown.
* Title in Front Matter                                               :title:
** Awesome title with "quoted text"
:PROPERTIES:
:EXPORT_FILE_NAME: post-title-quotes
:EXPORT_DATE: 2017-07-24
:END:
Testing a post with double quotes in the title.
** Under_scores_in_title
:PROPERTIES:
:EXPORT_FILE_NAME: under-scores-in-title
:EXPORT_DATE: 2017-07-28
:END:
Ensure that the underscores in =title= string of front matter do not
get escaped.. =foo_bar= must not become =foo\_bar=.
** Allow empty titles                                                 :empty:
:PROPERTIES:
:EXPORT_FILE_NAME: allow-empty-titles-2
:EXPORT_TITLE:
:END:
This post will be exported without =title= in the front-matter because
it is explicitly set to /empty/ using =:EXPORT_TITLE:=.
** En dash --, Em dash ---, Horizontal ellipsis ... in titles     :@upstream:
:PROPERTIES:
:EXPORT_FILE_NAME: en-dash-em-dash-hellip-in-titles
:END:
This tests an =ox-hugo= feature that gets around an upstream
limitation, where the Blackfriday /smartDashes/ rendering does not
happen in post titles ({{{hugoissue(4175)}}}).
** *Title with **lots** and *lots* of * aste*risks**
:PROPERTIES:
:EXPORT_FILE_NAME: title_with_asterisks
:END:
- All asterisk characters meant for Org =*bold*= markup are removed.
- The rest of the asterisk characters are retained.
** Title with /lots/ and lots / / / of forward/slashes
:PROPERTIES:
:EXPORT_FILE_NAME: title_with_forward_slashes
:END:
- All forward slash characters meant for Org =/italic/= markup are
  removed.
- The rest of the forward slash characters are retained.
** _Title_ with __lots and _lots_ _ _ of under_scores__
:PROPERTIES:
:EXPORT_FILE_NAME: title_with_under_scores
:END:
- All underscore characters meant for Org =_underline_= markup are
  removed.
- The rest of the underscore characters are retained.
** =Title with lots= of ` ` ` backticks` `foo =bar= ~ ~zoomba~
:PROPERTIES:
:EXPORT_FILE_NAME: title_with_backticks_equals_tildes
:END:
- All equal/tilde characters meant for Org =~code~= or ~=verbatim=~
  markup are removed.
- The rest of the equal/tilde characters are retained.
** =Title with lots= of ` ` ` backticks` * asterisks *bold*, /italics/ =retain*,_,` in monospace= underscores _ _ _*foo*_ =bar= **
:PROPERTIES:
:EXPORT_FILE_NAME: title_with_asterisks_underscores_backticks
:END:
- All the Org markup characters are removed.
- The "markup characters" not doing actual markup are retained.
* Description meta-data with "quoted text"
:PROPERTIES:
:EXPORT_FILE_NAME: post-description-quotes
:EXPORT_DESCRIPTION: Some description with "quoted text"
:EXPORT_DATE: 2017-07-24
:END:
Testing a post with double quotes in the description.
* Excluded post                                                    :noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: excluded-post
:END:
This post must not be exported as it is tagged =noexport=.
* COMMENT Commented post
:PROPERTIES:
:EXPORT_FILE_NAME: commented-post
:END:
This post must not be exported as it is commented.
* Section
** Articles
:PROPERTIES:
:EXPORT_HUGO_SECTION: articles
:END:
*** Article 1
:PROPERTIES:
:EXPORT_FILE_NAME: article-1
:EXPORT_DATE: 2017-07-19T08:34:29-04:00
:END:
First article.

This will land in =content/articles/= as the parent of this subtree
sets =EXPORT_HUGO_SECTION= to =articles=. Note that the theme needs to
define at least the =single.html=, either in the =layouts/_default/=
directory, or =layouts/articles/=, either in the Hugo base dir or the
theme dir.
*** Article 2
:PROPERTIES:
:EXPORT_FILE_NAME: article-2
:EXPORT_DATE: 2017-07-19T08:34:22-04:00
:END:
Second article.

This will also land in =content/articles/= the same way.
** Emacs posts                                                        :emacs:
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:END:
*** Emacs Post 1                                                        :foo:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-1
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
Here is the first post on Emacs.
*** Emacs Post 2                                                        :bar:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-post-2
:EXPORT_DATE: 2017-07-12T17:31:56-04:00
:END:
Here is the second post on Emacs.
** HUGO_SECTION set in post subtree
:PROPERTIES:
:EXPORT_HUGO_SECTION: zoo
:EXPORT_FILE_NAME: post-in-zoo-section
:END:
This post will be created in the =zoo= section.
* Tables                                                              :table:
** Simple Table
:PROPERTIES:
:EXPORT_FILE_NAME: simple-table
:EXPORT_DATE: 2017-07-12T19:25:56-04:00
:END:
| h1 | h2 |
| a  | b  |
| c  | d  |
** Table with narrowest cols
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-narrowest-columns
:EXPORT_DATE: 2017-07-12T19:26:00-04:00
:END:
| 1 | 2 | 3 |
| a | b | e |
| c | d | f |
** Table with top border
:PROPERTIES:
:EXPORT_FILE_NAME: table-top-border
:EXPORT_DATE: 2017-07-12T19:26:04-04:00
:END:
|---+---+---+---|
| 1 | 2 | 3 | 4 |
| a | b | e | g |
| c | d | f | h |
** Table with bottom border
:PROPERTIES:
:EXPORT_FILE_NAME: table-bottom-border
:EXPORT_DATE: 2017-07-12T19:26:06-04:00
:END:
| 1 | 2 | 3 | 4 |
| a | b | e | g |
| c | d | f | h |
|---+---+---+---|
** Table with top and bottom border
:PROPERTIES:
:EXPORT_FILE_NAME: table-top-and-bottom-border
:EXPORT_DATE: 2017-07-12T19:26:10-04:00
:END:
|---+---+---+---|
| 1 | 2 | 3 | 4 |
| a | b | e | g |
| c | d | f | h |
|---+---+---+---|
** Table with rule after first row
:PROPERTIES:
:EXPORT_FILE_NAME: table-only-rule-after-first-row
:EXPORT_DATE: 2017-07-12T19:26:13-04:00
:END:
| 1 | 2 | 3 | 4 |
|---+---+---+---|
| a | b | e | g |
| c | d | f | h |
** Table with borders and rule after first
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-borders-and-rule-after-first
:EXPORT_DATE: 2017-07-12T19:26:16-04:00
:END:
|---+---+---+---|
| 1 | 2 | 3 | 4 |
|---+---+---+---|
| a | b | e | g |
| c | d | f | h |
|---+---+---+---|
** Table with single column
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-single-column
:END:
| h1 |
| a  |
| b  |
** Table with single row
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-single-row
:END:
| a | b |
** Table with single cell
:PROPERTIES:
:EXPORT_FILE_NAME: table-with-single-cell
:END:
| a |
** Table column alignment
:PROPERTIES:
:EXPORT_FILE_NAME: table-column-alignment
:END:
*** Table with 3 rows
|             <r> | <l>                  |           |              <c>              |
|           Right | Left                 | No        |            Center             |
| Long Content To | Spread Out the Width | Alignment | Of the Table To See Alignment |
|           Right | Left                 | Marker    |            Center             |
*** Table with 2 rows
| <l>  |         |  <c>   |   <r> |
| Left | Default | Center | Right |
| 1    |       2 |   3    |     4 |
*** Table with 1 row
/A table with just 1 row with alignment markers is as good as just
that row without the alignment markers. But hey, a test is a test./

| <l>  |         |  <c>   |   <r> |
| Left | Default | Center | Right |
*** Table with 0 rows!
/A table with zero rows, with just alignment markers, doesn't make
sense. But hey, a test is a test./

| <l> |   | <c> | <r> |

You should see *no* table exported above.
** Table caption                                                    :caption:
:PROPERTIES:
:EXPORT_FILE_NAME: table-caption
:END:
The caption can contain be emphasized using the usual markup
characters too.

#+CAPTION: Awesome table
| h1  | h2  | h3  |
|-----+-----+-----|
| abc | def | ghi |

Some text.

#+CAPTION: /Another/ *awesome* table
| h1  | h2  | h3  |
|-----+-----+-----|
| jkl | mno | pqr |

Some more text.

#+CAPTION: _Third_ table --- Caption with em-dash -- and -- en-dash
| h1  | h2  | h3 |
|-----+-----+----|
| stu | vwx | yz |
** Table Styling with ATTR_HTML and ATTR_CSS :attr___html:attr___css:css:@upstream:
:PROPERTIES:
:EXPORT_FILE_NAME: table-styling
:END:

This /table styling/ feature overcomes a known _limitation_ in
Hugo/Blackfriday ({{{bfissue(404)}}}) that doesn't allow wrapping
Markdown elements with =<div>= tags (so that a user can assign
classes, etc. to those =div= blocks).

So this feature had to be implemented at the expense of a nasty hack
demonstrated [[https://github.com/kaushalmodi/ox-hugo/issues/93#issue-270108567][here]].

-----

HTML5 does not allow =align=, =width=, etc. attributes *within* the
=table= tag [[[https://www.w3.org/TR/2011/WD-html-markup-20110113/table.html#table-constraints][Ref]]]. So instead =ox-hugo= simply wraps the table with a
=div= with a =class=. The table can then be customized using CSS,
either via the =#+ATTR_CSS= attribute above the tables, or by putting
verbatim CSS in =#+BEGIN_EXPORT html= blocks. See below examples.
*** Table with only the class specified
#+ATTR_HTML: :class my-table
| h1  | h2  | h3  |
|-----+-----+-----|
| abc | def | ghi |

Above table is wrapped in a =my-table= class. Just doing that won't
bring any presentation changes to the table.. you'd need to add some
CSS that customizes =.my-table table=.
*** Table with only a CSS attribute specified
#+ATTR_CSS: :width 50%
| h1  | h2  | h3  |
|-----+-----+-----|
| abc | def | ghi |

Above table get wrapped in the auto-generated class
=table-nocaption=. The specified CSS attribute is auto-set for
=.table-nocaption table=.
*** Table with both class and CSS attribute specified
#+ATTR_HTML: :class my-table-2
#+ATTR_CSS: :width 80%
| h1  | h2  | h3  |
|-----+-----+-----|
| abc | def | ghi |

Above table get wrapped in the specified class =my-table-2=. The
specified CSS attribute is auto-set for =.my-table-2 table=.
*** Table with caption, and CSS attributes specified
#+CAPTION: Table with caption, with left-aligned text
#+ATTR_CSS: :text-align left
| h1       | h2       | h3       |
|----------+----------+----------|
| abcdefgh | ijklmnop | qrstuvwx |

Above table get wrapped in the auto-generated class =table-1= (/"1",
because this is the first table with a caption on this page./). The
specified CSS attribute is auto-set for =.table-1 table=.

#+CAPTION: Table with caption, with right-aligned text
#+ATTR_CSS: :text-align right
| h1       | h2       | h3       |
|----------+----------+----------|
| abcdefgh | ijklmnop | qrstuvwx |

#+CAPTION: Table with caption, with center-aligned text
#+ATTR_CSS: :text-align center
| h1       | h2       | h3       |
|----------+----------+----------|
| abcdefgh | ijklmnop | qrstuvwx |
*** Table with caption, and both class and CSS attributes specified
#+CAPTION: Table with caption, class and CSS attributes specified
#+ATTR_HTML: :class my-red-bordered-table
#+ATTR_CSS: :border 2px solid red
| h1  | h2  | h3  |
|-----+-----+-----|
| abc | def | ghi |

Above table get wrapped in the specified class
=my-red-bordered-table=. The specified CSS attribute is auto-set for
=.my-red-bordered-table table=.

Here's another table with the exact same class as that of the above
table. So the CSS properties do not need to be specified again.

Below table will also show up with a red border.

#+ATTR_HTML: :class my-red-bordered-table
| h1  | h2  | h3  |
|-----+-----+-----|
| jkl | kmo | pqr |
*** Table with verbatim CSS
There could be times when the CSS couldn't be simply specified using
the =#+ATTR_CSS= attribute. In those cases, simply set the table class
using =#+ATTR_HTML=, and put the CSS in the =#+BEGIN_EXPORT html=
block.
#+BEGIN_EXPORT html
<style>
.tab4 th,
.tab4 td {
    padding: 20px;
    text-align: left;
}
</style>
#+END_EXPORT
#+CAPTION: Table with verbatim CSS
#+ATTR_HTML: :class tab4
| h1  | h2  | h3  |
|-----+-----+-----|
| abc | def | ghi |
*** More table styling examples
[[https://css-tricks.com/complete-guide-table-element/][Source: /css-tricks.com/]]
**** CSS-tricks Example Tables                                     :noexport:
***** Example Table 1
:PROPERTIES:
:CUSTOM_ID: css-tricks-example-table-1
:END:
| Name |    ID | Favorite Color |
|------+-------+----------------|
| Jim  | 00001 | Blue           |
| Sue  | 00002 | Red            |
| Barb | 00003 | Green          |
***** Example Table 2
:PROPERTIES:
:CUSTOM_ID: css-tricks-example-table-2
:END:
| 1 |  2 |  3 |  4 |  5 |
|---+----+----+----+----|
| 2 |  4 |  6 |  8 | 10 |
| 3 |  6 |  9 | 12 | 15 |
| 4 |  8 | 12 | 16 | 20 |
| 5 | 10 | 15 | 20 | 25 |
***** Example Table 3
:PROPERTIES:
:CUSTOM_ID: css-tricks-example-table-3
:END:
| Last Name | First Name | Email                 | Due     | Web Site                 |
|-----------+------------+-----------------------+---------+--------------------------|
| Smith     | John       | jsmith@gmail.com      | $50.00  | http://www.jsmith.com    |
| Bach      | Frank      | fbach@yahoo.com       | $50.00  | http://www.frank.com     |
| Doe       | Jason      | jdoe@hotmail.com      | $100.00 | http://www.jdoe.com      |
| Conway    | Tim        | tconway@earthlink.net | $50.00  | http://www.timconway.com |
**** Basic styling
***** Uncollapsed borders
#+BEGIN_EXPORT html
<style>
.basic-styling td,
.basic-styling th {
  border: 1px solid #999;
  padding: 0.5rem;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class basic-styling
#+CAPTION: Table with uncollapsed borders
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-1" :only-contents t
***** Collapsed borders
#+BEGIN_EXPORT html
<style>
.collapsed table {
  border-collapse: collapse;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class collapsed basic-styling
#+CAPTION: Table with collapsed borders
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-1" :only-contents t
**** Two Axis Tables
#+BEGIN_EXPORT html
<style>
.two-axis-table td,
.two-axis-table th {
  width: 4rem;
  height: 2rem;
  border: 1px solid #ccc;
  text-align: center;
}
.two-axis-table th,
.two-axis-table td:nth-child(1) {
  background: lightblue;
  border-color: white;
  font-weight: bold;
}
.two-axis-table body {
  padding: 1rem;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class two-axis-table
#+CAPTION: Table with 1st row and 1st column highlighted
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-2" :only-contents t
**** Sane Table
[[https://css-tricks.com/complete-guide-table-element/#article-header-id-17][Ref]]
#+BEGIN_EXPORT html
<style>
.sane-table table {
  border-collapse: collapse;
  width: 100%;
}
.sane-table th,
.sane-table td {
  padding: 0.25rem;
  text-align: left;
  border: 1px solid #ccc;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class sane-table
#+CAPTION: Sane Table --- with minimal styling
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-1" :only-contents t
**** Zebra Striping
#+BEGIN_EXPORT html
<style>
.zebra-striping tbody tr:nth-child(odd) {
  background: #eee;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class zebra-striping sane-table
#+CAPTION: Table with zebra striping
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-3" :only-contents t
**** Highlighting on Hover
***** Highlight Cell
#+BEGIN_EXPORT html
<style>
.hl-table-cell td:hover { /* th:hover also if you wish */
  background: yellow;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class hl-table-cell sane-table
#+CAPTION: Table where the hovered-upon cell highlights
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-3" :only-contents t
***** Highlight Row
#+BEGIN_EXPORT html
<style>
.hl-table-row tbody tr:hover {
  background: yellow;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class hl-table-row sane-table
#+CAPTION: Table where the hovered-upon row highlights
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-3" :only-contents t
**** Blur non-hovered Rows
/Let's-go-ballistic-with-CSS/ Edition :smile:
#+BEGIN_EXPORT html
<style>
.blur-non-hovered body {
  background: #fafafa;
  color: #444;
  font: 100%/30px 'Helvetica Neue', helvetica, arial, sans-serif;
  text-shadow: 0 1px 0 #fff;
}

.blur-non-hovered strong {
  font-weight: bold;
}

.blur-non-hovered em {
  font-style: italic;
}

.blur-non-hovered table {
  background: #f5f5f5;
  border-collapse: separate;
  box-shadow: inset 0 1px 0 #fff;
  font-size: 12px;
  line-height: 24px;
  margin: 30px auto;
  text-align: left;
  width: 800px;
}

.blur-non-hovered th {
  background: linear-gradient(#777, #444);
  border-left: 1px solid #555;
  border-right: 1px solid #777;
  border-top: 1px solid #555;
  border-bottom: 1px solid #333;
  box-shadow: inset 0 1px 0 #999;
  color: #fff;
  font-weight: bold;
  padding: 10px 15px;
  position: relative;
  text-shadow: 0 1px 0 #000;
}

.blur-non-hovered th:after {
  background: linear-gradient(rgba(255,255,255,0), rgba(255,255,255,.08));
  content: '';
  display: block;
  height: 25%;
  left: 0;
  margin: 1px 0 0 0;
  position: absolute;
  top: 25%;
  width: 100%;
}

.blur-non-hovered th:first-child {
  border-left: 1px solid #777;
  box-shadow: inset 1px 1px 0 #999;
}

.blur-non-hovered th:last-child {
  box-shadow: inset -1px 1px 0 #999;
}

.blur-non-hovered td {
  border-right: 1px solid #fff;
  border-left: 1px solid #e8e8e8;
  border-top: 1px solid #fff;
  border-bottom: 1px solid #e8e8e8;
  padding: 10px 15px;
  position: relative;
  transition: all 300ms;
}

.blur-non-hovered td:first-child {
  box-shadow: inset 1px 0 0 #fff;
}

.blur-non-hovered td:last-child {
  border-right: 1px solid #e8e8e8;
  box-shadow: inset -1px 0 0 #fff;
}

.blur-non-hovered tr:nth-child(odd) td {
  background: #f1f1f1;
}

.blur-non-hovered tr:last-of-type td {
  box-shadow: inset 0 -1px 0 #fff;
}

.blur-non-hovered tr:last-of-type td:first-child {
  box-shadow: inset 1px -1px 0 #fff;
}

.blur-non-hovered tr:last-of-type td:last-child {
  box-shadow: inset -1px -1px 0 #fff;
}

.blur-non-hovered tbody:hover td {
  color: transparent;
  text-shadow: 0 0 3px #aaa;
}

.blur-non-hovered tbody:hover tr:hover td {
  color: #444;
  text-shadow: 0 1px 0 #fff;
}
</style>
#+END_EXPORT
#+ATTR_HTML: :class blur-non-hovered
#+CAPTION: Table where rows except the hovered-upon get blurred
#+INCLUDE: "./all-posts.org::#css-tricks-example-table-3" :only-contents t
** Table with Column Groups                 :wishlist:column_groups:noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: table-column-groups
:END:
https://orgmode.org/manual/Column-groups.html

Looks like the only way to implement this is to export tables with
column groups in raw HTML -- <2018-01-07 Sun>.

| N | N^2 | N^3 | N^4 | ~sqrt(n)~ | ~sqrt[4](N)~ |
|---+-----+-----+-----+-----------+--------------|
| / |   < |     |   > |         < |            > |
| 1 |   1 |   1 |   1 |         1 |            1 |
| 2 |   4 |   8 |  16 |    1.4142 |       1.1892 |
| 3 |   9 |  27 |  81 |    1.7321 |       1.3161 |
|---+-----+-----+-----+-----------+--------------|
#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))
* Source blocks                                                   :src_block:
** Code fence                                                    :code_fence:
*** Code-fenced source blocks (default behavior)
:PROPERTIES:
:EXPORT_FILE_NAME: code-fenced-src-blocks-default
:EXPORT_DATE: 2017-07-31
:END:
The source blocks are code-fenced by default.

#+INCLUDE: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
*** Code-fenced source blocks
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE: t
:EXPORT_FILE_NAME: code-fenced-src-blocks
:EXPORT_DATE: 2017-07-13T17:49:22-04:00
:END:
Here the source blocks are explicitly set to be code-fenced by setting
the =EXPORT_HUGO_CODE_FENCE= property to =t=.

#+INCLUDE: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
*** Code-fenced source blocks with backticks                      :backticks:
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE: t
:EXPORT_FILE_NAME: code-fenced-src-blocks-with-backticks
:END:
This code block contains a fenced code block with 4 backticks:
#+BEGIN_SRC md
````emacs-lisp
(message "Hello")
````
#+END_SRC

This code block contains a fenced code block with 3 backticks:
#+BEGIN_SRC md
```emacs-lisp
(message "Hello again")
```
#+END_SRC

This code block contains no backticks:
#+BEGIN_SRC emacs-lisp
(message "Hello again x2")
#+END_SRC

This code block again contains a fenced code block with 4 backticks:
#+BEGIN_SRC md
````emacs-lisp
(message "Hello again x3")
````
#+END_SRC

This code block contains a fenced code block with 6 backticks:
#+BEGIN_SRC md
``````emacs-lisp
(message "Hello again x4")
``````
#+END_SRC

This code block again contains a fenced code block with 3 backticks:
#+BEGIN_SRC md
```emacs-lisp
(message "Hello again x5")
```
#+END_SRC

This code block once again contains no backticks:
#+BEGIN_SRC emacs-lisp
(message "Hello again x6")
#+END_SRC
** Highlight Shortcode                                  :highlight:shortcode:
*** Source blocks with =highlight= shortcode
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE:
:EXPORT_FILE_NAME: highlight-shortcode-src-blocks
:EXPORT_DATE: 2017-07-31
:END:
Note that to disable the code fence option, the value portion of the
property needs to be left *empty* instead of setting to =nil=!
#+BEGIN_EXAMPLE
:PROPERTIES:
:EXPORT_HUGO_CODE_FENCE:
:END:
#+END_EXAMPLE
#+INCLUDE: "./all-posts.org::#example-text-with-code-blocks" :only-contents t
*** Source blocks with line number annotation
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-with-line-numbers
:END:
- [[https://orgmode.org/manual/Literal-examples.html][Org reference]]
- [[https://gohugo.io/content-management/syntax-highlighting/][Hugo =highlight= shortcode with line numbers]]
**** Cases
:PROPERTIES:
:CUSTOM_ID: source-block-line-number-cases
:END:
***** Default new line number start
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-default-start>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-default-start>>
#+END_SRC
***** Specify new line number start
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-custom-start>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-custom-start>>
#+END_SRC
***** Default continued line numbers
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-default-continue>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-default-continue>>
#+END_SRC
***** Specify continued line numbers jump
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-n-custom-continue>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-n-custom-continue>>
#+END_SRC
*** Source blocks with highlighting
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-with-highlighting
:CUSTOM_ID: source-blocks-with-highlighting
:END:
**** Without line numbers
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-no-linenums
:END:
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-hl-without-n>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-without-n>>
#+END_SRC
Above highlighting might look weird as the highlighting spans the full
page/container width. This could be either called a bug in Hugo, or
the HTML limitation.

A workaround is below.. *use line numbers too!*.
**** With line numbers *not* starting from 1
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-with-linenums-not-starting-from-1
:END:
With line numbers enabled, the highlighting is limited to the width of
the HTML table rows (because =ox-hugo= sets the =linenos=table= option
in the =highlight= shortcode when line numbers are enabled).

- Note 1 :: When using both, switches (like =-n=), and header args
            (like =:hl_lines=), the _switches have to come first_.
- Note 2 :: The line numbers in the value for =:hl_lines= parameter is
            always with the starting line number reference of 1. That
            has no relation with the value of the line numbers
            displayed using the =-n= or =+n= switches!
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-hl-with-n-not-1>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-with-n-not-1>>
#+END_SRC
**** With line numbers
:PROPERTIES:
:CUSTOM_ID: source-blocks-with-highlighting-with-linenums
:END:
****** Org source
#+BEGIN_SRC org :noweb yes
<<src-block-hl-with-n>>
#+END_SRC
****** Output
#+BEGIN_SRC org :noweb yes :exports results :results output replace :eval yes
<<src-block-hl-with-n>>
#+END_SRC
** Source block with caption                                        :caption:
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-caption
:END:
#+CAPTION: Prefix value in =local.mk=
#+BEGIN_SRC makefile
prefix = /dir/where/you/want/to/install/org # Default: /usr/share
#+END_SRC

#+CAPTION: Hello --- Caption with em-dash -- and -- en-dash
#+BEGIN_SRC emacs-lisp
(message "hello")
#+END_SRC
** Source block with list syntax in a list                        :@upstream:
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: list-has-src-block-with-list-syntax
:END:
An upstream bug in /Blackfriday/ ([[https://github.com/russross/blackfriday/issues/239][Issue #239]]) caused fenced code
blocks in lists to not render correctly if they contain Markdown
syntax lists. =ox-hugo= provides a hack to get around that bug.

Below is an example of such a case:

- List item 1
  #+BEGIN_SRC md
  - List item 1.1 in code block
  - List item 1.2 in code block
  #+END_SRC
- List item 2
  #+BEGIN_SRC md
  + List item 2.1 in code block
  + List item 2.2 in code block
  #+END_SRC
- List item 3
** Source block without list syntax in a list
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: list-has-src-block-but-no-list-syntax
:END:
This case is not affected by /Blackfriday/ [[https://github.com/russross/blackfriday/issues/239][Issue #239]] as the fenced
code block does not have Markdown syntax lists.
- List item 1
  #+BEGIN_SRC md
,*abc*
/def/
=def=
  #+END_SRC
- List item 2
** Source block with list syntax but not in a list
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: src-block-outside-list-with-list-syntax
:END:
#+BEGIN_SRC md
- list 1
#+END_SRC
** Org Babel Results
:PROPERTIES:
:EXPORT_FILE_NAME: org-babel-results-preserve-indent
:END:
#+BEGIN_SRC python :exports both :results output
str = 'a\tbc'
print(str[1:])
#+END_SRC

#+RESULTS:
: 	bc

The whitespace before "bc" in the results block above should be preserved.
** Indented source block
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-indented
:END:
Test that indented source blocks export fine.

    #+BEGIN_SRC emacs-lisp
    (defun small-shell ()
	(interactive)
	(split-window-vertically)
	(other-window 1)
	(shrink-window (- (window-height) 12))
    (ansi-term))
    #+END_SRC
*** More tests!
- List item 1
  #+BEGIN_SRC emacs-lisp
  (message "I am in list at level-1 indentation")
  #+END_SRC
  - List item 1.1
    #+BEGIN_SRC emacs-lisp
    (message "I am in list at level-2 indentation")
    #+END_SRC
    - List item 1.1.1
      #+BEGIN_SRC emacs-lisp
      (message "I am in list at level-3 indentation")
      #+END_SRC
  - List item 2.1
    #+BEGIN_SRC emacs-lisp
    (message "I am in list back at level-2 indentation")
    #+END_SRC
- List item 2
  #+BEGIN_SRC emacs-lisp
  (message "I am in list back at level-1 indentation")
  #+END_SRC

#+BEGIN_SRC emacs-lisp
(message "And now I am at level-0 indentation")
#+END_SRC

Reference: {{{hugoissue(4006)}}}
** Markdown source block with Hugo shortcodes                     :shortcode:
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-md-with-hugo-shortcodes
:EXPORT_HUGO_CODE_FENCE: t
:END:
*** Shortcodes escaped
The =figure= shortcodes in the two Markdown source code blocks below
should *not* be expanded.. they should be visible verbatim.

- {&lbrace;< .. >}&rbrace; --- [[https://gohugo.io/content-management/shortcodes/#shortcodes-without-markdown][Shortcodes without Markdown]]
- {&lbrace;% .. %}&rbrace; --- [[https://gohugo.io/content-management/shortcodes/#shortcodes-with-markdown][Shortcodes with Markdown]]
**** Code block using code fences
#+BEGIN_SRC md
{{< figure src="https://orgmode.org/img/org-mode-unicorn-logo.png" >}}
{{% figure src="https://orgmode.org/img/org-mode-unicorn-logo.png" %}}
#+END_SRC
**** Code block using =highlight= shortcode
Here, the =-n= switch is added to the Org source block to
auto-enable[fn:4] using the =highlight= shortcode.
#+BEGIN_SRC md -n
{{< figure src="https://orgmode.org/img/org-mode-unicorn-logo.png" >}}
{{% figure src="https://orgmode.org/img/org-mode-unicorn-logo.png" %}}
#+END_SRC
*** Shortcodes *not* escaped
The =figure= shortcodes in the below example block *should* be
expanded.. you should be seeing little unicorns below.
#+BEGIN_EXAMPLE
{{< figure src="https://orgmode.org/img/org-mode-unicorn-logo.png" >}}
{{% figure src="https://orgmode.org/img/org-mode-unicorn-logo.png" %}}
#+END_EXAMPLE
Above a =#+BEGIN_EXAMPLE= .. =#+END_EXAMPLE= block is chosen
arbitrarily. The Hugo shortcodes will remain unescaped in *any*
source/example block except for _Markdown source blocks_ (annotated
with =md= language).
-----
*It is necessary to set the Hugo site config variable
=pygmentsCodeFences= to =true= for syntax highlighting to work for
fenced code blocks.*
** Source blocks with ATTR_HTML                      :attr___html:attr___css:
:PROPERTIES:
:EXPORT_FILE_NAME: source-blocks-with-attr-html
:END:
Some text.

#+ATTR_HTML: :class indent-block
#+ATTR_CSS: :padding-left 50px
#+BEGIN_SRC emacs-lisp
(message (mapconcat #'identity
                    '("Hello," "how" "are" "you?")
                    " "))
#+END_SRC

Some more text.
** Org Source Block via Pygments                          :pygments:noexport:
:PROPERTIES:
:EXPORT_FILE_NAME: org-source-block-pygments
:END:
/This test case is not important after Hugo 0.28 as this was a
workaround for a limitation in the Pygments syntax highlighter. Hugo
0.28 onwards, the default syntax highlighter is Chroma, which does not
have that limitation, and thus no need for this workaround./
-----
Test case for the case where user has set
=org-hugo-langs-no-descr-in-code-fences= to a list containing the
element =org=.

/As this variable is dependent on user's config, this post is not set
to be exported by default./

The [[https://discourse.gohugo.io/t/fenced-code-block-with-language-unsupported-by-pygments/7710][issue]] with Hugo will be seen if _all_ of the below are true:
- =pygmentsCodeFences = true= *and* =pygmentsUseClassic = true= (Hugo
  ≥ 0.28 -- default value is =false=) are set in the Hugo site
  =config.toml=.
- A source block's language is set to one that's not supported by
  Pygments (like [[https://bitbucket.org/birkenfeld/pygments-main/issues/719/wishlist-support-org][org]], and thus the below example with source code
  language set to =org=).
- =org-hugo-langs-no-descr-in-code-fences= is set to a value not
  containing that language descriptor (=org= in this case).
#+BEGIN_SRC org
# Org comment
Export this post after setting
=org-hugo-langs-no-descr-in-code-fences= to =(org)= and temporarily
removing the =noexport= tag.
#+END_SRC
* Formatting                                                     :formatting:
** General
:PROPERTIES:
:EXPORT_DATE: 2017-07-31
:EXPORT_FILE_NAME: general-formatting
:END:
Below table shows the translation of Org markup to Markdown markup in
the exported =.md= files.
|--------------------+--------------------------------------------------------------------+-----------------------|
| Org                | Markdown                                                           | In Hugo rendered HTML |
|--------------------+--------------------------------------------------------------------+-----------------------|
| =*bold*=           | =**bold**=                                                         | *bold*                |
| =/italics/=        | =_italics_=                                                        | /italics/             |
| ==monospace==      | =`monospace`=                                                      | =monospace=           |
| =~key-binding~=    | =`key-binding`=                                                    | ~key-binding~         |
|                    | - if =org-hugo-use-code-for-kbd= is nil [default]                  |                       |
| =~key-binding~=    | =<kbd>key-binding</kbd>=                                           |                       |
|                    | - if =org-hugo-use-code-for-kbd= is non-nil                        |                       |
|                    | - Requires *CSS* to render the =<kbd>= tag as something special.   |                       |
| =+strike-through+= | =~~strike-through~~=                                               | +strike-through+      |
| =_underline_=      | =<span class = "underline">underline</span>=                       | _underline_           |
|                    | - Requires *CSS* to render this =underline= class as an underline. |                       |
|--------------------+--------------------------------------------------------------------+-----------------------|
** Keyboard tag
*** Use Org Code markup for =kbd= tag (default behavior)
:PROPERTIES:
:EXPORT_FILE_NAME: kbd-tag-default
:EXPORT_DATE: 2017-07-31
:END:
This is the default behavior. So =~C-h f~= will show up as =`C-h f`=
and then =<code>C-h f</code>= in the final Hugo generated HTML.

Example:
- Few of Emacs help keybindings: ~C-h f~, ~C-h v~
*** Use Org Code markup for =kbd= tag
:PROPERTIES:
:EXPORT_HUGO_USE_CODE_FOR_KBD: t
:EXPORT_FILE_NAME: kbd-tag-yes
:EXPORT_DATE: 2017-07-31
:END:
Here the Org code markup is explicitly specified to be used for
=<kbd>= tag generation by setting =EXPORT_HUGO_USE_CODE_FOR_KBD=
property to =t=. So =~C-h f~= will show up as =<kbd>C-h f</kbd>=.

Example:
- Few of Emacs help keybindings: ~C-h f~, ~C-h v~
*** Don't Use Org Code markup for =kbd= tag
:PROPERTIES:
:EXPORT_HUGO_USE_CODE_FOR_KBD:
:EXPORT_FILE_NAME: kbd-tag-no
:EXPORT_DATE: 2017-07-31
:END:
Note that to disable the "use code for kbd" option, the value portion
of the property needs to be left *empty* instead of setting to =nil=!
#+BEGIN_EXAMPLE
:PROPERTIES:
:EXPORT_HUGO_USE_CODE_FOR_KBD:
:END:
#+END_EXAMPLE

Here =~C-h f~= will show up as =`C-h f`= in Markdown and then
=<code>C-h f</code>= in the final Hugo generated HTML.

Example:
- Few of Emacs help keybindings: ~C-h f~, ~C-h v~
*** COMMENT Using the new 'kbd' macro from Org =master=
:PROPERTIES:
:EXPORT_FILE_NAME: kbd-macro-org-9-2
:END:
- {{{kbd(C-h f)}}}
- {{{kbd(C-x SPC)}}}
- {{{kbd(M-RET)}}}
** Multi-line bold
:PROPERTIES:
:EXPORT_FILE_NAME: multi-line-bold
:END:
*This works fine as the bold sentence does not include a newline.*

*This is a sentence that should render completely in bold. It is
 broken across multiple lines (in Org source) because of
 auto-filling. But that should not break the bold rendering. But it
 does by default.*

If you do not see the above paragraph completely in bold, have below
in your emacs config to fix it:
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  ;; Allow multiple line Org emphasis markup.
  ;; http://emacs.stackexchange.com/a/13828/115
  (setcar (nthcdr 4 org-emphasis-regexp-components) 20) ;Up to 20 lines, default is just 1
  ;; Below is needed to apply the modified `org-emphasis-regexp-components'
  ;; settings from above.
  (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components))
#+END_SRC
* Example block                                                     :example:
** Simple
:PROPERTIES:
:EXPORT_DATE: 2017-07-19
:EXPORT_FILE_NAME: example-simple
:END:
#+BEGIN_EXAMPLE
This is an example
#+END_EXAMPLE
** Example blocks with line number annotation
:PROPERTIES:
:EXPORT_FILE_NAME: example-block-with-line-numbers
:END:
- [[https://orgmode.org/manual/Literal-examples.html][Org reference]]
- [[https://gohugo.io/content-management/syntax-highlighting/][Hugo =highlight= shortcode with line numbers]]
*** Default new line number start
#+BEGIN_EXAMPLE -n
line 1
 line 2
#+END_EXAMPLE
*** Specify new line number start
#+BEGIN_EXAMPLE -n 20
line 20
line 21
#+END_EXAMPLE
*** Default continued line numbers
#+BEGIN_EXAMPLE +n
 line 22
line 23
#+END_EXAMPLE
*** Specify continued line numbers jump
#+BEGIN_EXAMPLE +n 10
line 33
line 34
#+END_EXAMPLE
** Example blocks with ATTR_HTML                     :attr___html:attr___css:
:PROPERTIES:
:EXPORT_FILE_NAME: example-blocks-with-attr-html
:END:
Some text.

#+ATTR_HTML: :class indent-block
#+ATTR_CSS: :padding-left 50px
#+BEGIN_EXAMPLE
This is an example
Line 2
Line 3
#+END_EXAMPLE

Some more text.
* Menu in front matter                                                 :menu:
** Menu Meta Data in TOML Front Matter
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu "something here" :weight 80 :parent posts :identifier foo1
:END:
*** Overriding few menu properties
:PROPERTIES:
:EXPORT_FILE_NAME: menu-alist-meta-data-toml-override-partial
:EXPORT_DATE: 2017-07-18
:EXPORT_HUGO_MENU_OVERRIDE: :weight 10 :identifier ov-partial
:END:
For this post, we should see just the menu /weight/ and /identifier/
properties get overridden.

You need to set unique menu identifiers, else you get a Hugo error
like this:
#+BEGIN_EXAMPLE
ERROR 2017/07/18 12:32:14 Two or more menu items have the same name/identifier in Menu "main": "menu-meta-data-in-yaml-front-matter".
Rename or set an unique identifier.
#+END_EXAMPLE
*** Overriding menu properties completely
:PROPERTIES:
:EXPORT_FILE_NAME: menu-alist-meta-data-toml-override-full
:EXPORT_DATE: 2017-07-18
:EXPORT_HUGO_MENU: :menu test :weight 50
:END:
For this post, we see that no menu properties are inherited from the
parent; only the menu properties set in his subtree are effective.
*** Auto assign weights
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu "auto weight"
:END:
**** Post with menu 1
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-1
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-2
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 3
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-3
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 4
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-4
:EXPORT_DATE: 2017-07-20
:END:
**** Post with menu 5
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-menu-5
:EXPORT_DATE: 2017-07-20
:END:
*** Menu Title property                                               :title:
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu test :title "Page title for menu"
:EXPORT_FILE_NAME: menu-title-property
:END:
The =title= property for menu entries was introduced in Hugo v0.32 in
[[https://github.com/gohugoio/hugo/commit/9df3736fec164c51d819797416dc263f2869be77][this commit]].
** Menu Meta Data in YAML Front Matter                                 :yaml:
:PROPERTIES:
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:END:
*** White space in menu entry
:PROPERTIES:
:EXPORT_FILE_NAME: menu-meta-data-yaml2
:EXPORT_DATE: 2017-07-19
:EXPORT_HUGO_MENU: :menu "something here" :weight 25
:END:
Testing the addition of /menu/ meta data to the YAML front matter.
Here the front matter format is set to YAML using the
=HUGO_FRONT_MATTER_FORMAT= key in property drawer.

Here there is white space in menu entry keyword.
*** White space in menu name
:PROPERTIES:
:EXPORT_FILE_NAME: menu-meta-data-yaml3
:EXPORT_DATE: 2017-07-19
:EXPORT_HUGO_MENU: :menu main :weight 25 :parent posts :name "Menu in YAML"
:END:
Testing the addition of /menu/ meta data to the YAML front matter.
Here the front matter format is set to YAML using the
=HUGO_FRONT_MATTER_FORMAT= key in property drawer.

Here there is white space in menu name property.
* Custom front matter                                             :custom_fm:
** Custom front matter in one line
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-one-line
:EXPORT_DATE: 2017-07-24
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :foo bar :baz zoo :alpha 1 :beta "two words" :gamma 10
:END:
** Custom front matter in multiple lines
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-multiple-lines
:EXPORT_DATE: 2017-07-24
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :foo bar
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :baz zoo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :alpha 1
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :beta "two words"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :gamma 10
:END:
From [[https://orgmode.org/manual/Property-syntax.html][*(org) Property syntax*]]:
#+BEGIN_QUOTE
   It is also possible to add to the values of inherited properties.
The following results in the 'genres' property having the value
"Classic Baroque" under the 'Goldberg Variations' subtree.
#+END_QUOTE

#+BEGIN_EXAMPLE
,* CD collection
,** Classic
:PROPERTIES:
:GENRES: Classic
:END:
,*** Goldberg Variations
:PROPERTIES:
:Title:     Goldberg Variations
:Composer:  J.S. Bach
:Artist:    Glen Gould
:Publisher: Deutsche Grammophon
:NDisks:    1
:GENRES+:   Baroque
:END:
#+END_EXAMPLE
** Custom front matter with list values                         :list_values:
*** Custom front matter with list values in TOML
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-with-list-values-toml
:EXPORT_HUGO_FRONT_MATTER_FORMAT: toml
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :animals '(dog cat "penguin" "mountain gorilla")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :strings-symbols '("abc" def "two words")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :integers '(123 -5 17 1_234)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :floats '(12.3 -5.0 -17E-6)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :booleans '(true false)
:END:
[[https://github.com/kaushalmodi/ox-hugo/issues/99][Issue # 99]]
*** Custom front matter with list values in YAML
:PROPERTIES:
:EXPORT_FILE_NAME: custom-front-matter-with-list-values-yaml
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :animals '(dog cat "penguin" "mountain gorilla")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :strings-symbols '("abc" def "two words")
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :integers '(123 -5 17 1_234)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :floats '(12.3 -5.0 -17E-6)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :booleans '(true false)
:END:
[[https://github.com/kaushalmodi/ox-hugo/issues/99][Issue # 99]]
* Resources                                                       :resources:
** TOML                                                                :toml:
*** Post with resources in front-matter
:PROPERTIES:
:EXPORT_FILE_NAME: resources-in-front-matter-toml
:EXPORT_HUGO_RESOURCES: :src "image-4.png" :title "TOML: The Fourth Image"
:EXPORT_HUGO_RESOURCES+: :src "*.png" :name "my-cool-image-:counter" :title "TOML: The Image #:counter"
:EXPORT_HUGO_RESOURCES+: :src "*.png" :byline "bep"
:EXPORT_HUGO_RESOURCES+: :src "*.jpg" :title "JPEG Image #:counter"
:END:
*** Only custom resource params
:PROPERTIES:
:EXPORT_FILE_NAME: resources-only-custom-params
:EXPORT_HUGO_RESOURCES: :src "*.png" :foo "bar"
:END:
*** Custom resource params with list values
:PROPERTIES:
:EXPORT_FILE_NAME: resources-custom-params-list-values-toml
:EXPORT_HUGO_RESOURCES: :src "*.png" :animals '(dog cat "penguin" "mountain gorilla")
:EXPORT_HUGO_RESOURCES+: :strings-symbols '("abc" def "two words")
:EXPORT_HUGO_RESOURCES+: :integers '(123 -5 17 1_234)
:EXPORT_HUGO_RESOURCES+: :floats '(12.3 -5.0 -17E-6)
:EXPORT_HUGO_RESOURCES+: :booleans '(true false)
:EXPORT_HUGO_RESOURCES+: :foo bar
:END:
*** No "src" in resources front-matter         :dont_export_during_make_test:
:PROPERTIES:
:EXPORT_FILE_NAME: resources-no-src
:EXPORT_HUGO_RESOURCES: :foo "bar"
:END:
This is illegal --- You'll get a user-error.

The =src= field *must* be specified for the =resources= front-matter.
** YAML                                                                :yaml:
:PROPERTIES:
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:END:
*** Post with resources in front-matter
:PROPERTIES:
:EXPORT_FILE_NAME: resources-in-front-matter-yaml
:EXPORT_HUGO_RESOURCES: :src "image-4.png" :title "The Fourth Image"
:EXPORT_HUGO_RESOURCES+: :src "*.png" :name "my-cool-image-:counter" :title "The Image #:counter"
:EXPORT_HUGO_RESOURCES+: :src "*.png" :byline "bep"
:EXPORT_HUGO_RESOURCES+: :src "*.jpg" :title "JPEG Image #:counter"
:END:
*** Custom resource params with list values
:PROPERTIES:
:EXPORT_FILE_NAME: resources-custom-params-list-values-yaml
:EXPORT_HUGO_RESOURCES: :src "*.png" :animals '(dog cat "penguin" "mountain gorilla")
:EXPORT_HUGO_RESOURCES+: :strings-symbols '("abc" def "two words")
:EXPORT_HUGO_RESOURCES+: :integers '(123 -5 17 1_234)
:EXPORT_HUGO_RESOURCES+: :floats '(12.3 -5.0 -17E-6)
:EXPORT_HUGO_RESOURCES+: :booleans '(true false)
:EXPORT_HUGO_RESOURCES+: :foo bar
:END:
* Outputs                                                           :outputs:
** Output HTML and JSON                                                :json:
:PROPERTIES:
:EXPORT_FILE_NAME: output-html-and-json
:EXPORT_HUGO_OUTPUTS: html json
:END:
*Note*: A =single.json= is required to be at a valid location in the
template lookup hierarchy for the JSON outputs to be created.

[[./index.json][Here's the JSON output version of this page]].
** Setting empty outputs is fine                                      :empty:
:PROPERTIES:
:EXPORT_FILE_NAME: output-empty
:EXPORT_HUGO_OUTPUTS:
:END:
If the =EXPORT_HUGO_OUTPUTS= property is left empty/unset, =ox-hugo=
will not set the =outputs= variable in the front-matter at all. So
only the HTML output will be created (default).
* Post body                                                            :body:
** Summary Splitter
:PROPERTIES:
:EXPORT_FILE_NAME: summary-splitter
:EXPORT_DATE: 2017-07-21
:END:
Here is the summary.
#+HUGO: more
Here is text after the [[https://gohugo.io/content-management/summaries#user-defined-manual-summary-splitting][summary splitter]].
** Dealing with underscores
:PROPERTIES:
:EXPORT_FILE_NAME: dealing-with-underscores
:EXPORT_DATE: 2017-07-21
:END:
This underscore should appear escaped in Markdown: _

This underscore is in a verbatim block, so it should not be escaped:
=_=

This underscore also shouldn't be escaped as it's in an emoji
code: :raised_hands:

And these ones should be eventually removed and _underline_ the text
(/Requires CSS to do so./) -- *Org syntax*.
** Nested bold and italics
:PROPERTIES:
:EXPORT_DATE: 2017-07-22
:EXPORT_FILE_NAME: nested-bold-italics
:END:
- /This is italics, and *this is bold too*, and back to plain
  italics./
- *This is bold, and /this is italics too/, and back to plain bold.*
** Single and Double quotes
:PROPERTIES:
:EXPORT_FILE_NAME: single-double-quotes
:EXPORT_DATE: 2017-07-22
:END:
The strings in these two columns should look the exact same.
|   | Rendered Actual             | Rendered Expection          |
|---+-----------------------------+-----------------------------|
| 1 | 'This'                      | ‘This’                      |
| 2 | "This"                      | “This”                      |
| 3 | "It's"                      | “It’s”                      |
| 4 | 'It's'                      | ‘It’s’                      |
| 5 | "<http://localhost:1111/>"  | “<http://localhost:1111/>”  |
| 6 | "<http://localhost:1111/>". | “<http://localhost:1111/>”. |
#+TBLFM: $1=@#-1

*Note:* There is a rendering issue is Row 5 above. That seems to be a
 corner case, because notice that Row 6 looks fine just because there
 was a trailing period. /Will live with this issue for now./
** /ndash/ `and` *mdash*
:PROPERTIES:
:EXPORT_FILE_NAME: ndash-and-mdash
:EXPORT_DATE: 2017-07-22
:END:
The strings in these two columns should look the exact same.
|   | Character | Rendered Actual | Rendered Expection |
|---+-----------+-----------------+--------------------|
| 1 | Hyphen    | a - b           | a - b              |
| 2 | Ndash     | a -- b           | a – b              |
| 3 | Mdash     | a --- b           | a — b              |
| 4 | Ellipsis  | a ... b           | a … b              |
#+TBLFM: $1=@#-1
*** Title sanitization
This post has italics, monospace and bold in the title. This is to
test that those markup characters *do not* end up in the =title= front
matter of the post because HTML does not allow markup in the =<title>=
section.

So the title of this post should read as "ndash and mdash".
** Escaping hashes and exclamations correctly in body
:PROPERTIES:
:EXPORT_FILE_NAME: escaping-hashes-and-exclamations-in-body
:END:
I intend to show these # characters verbatim; they should not render
as Markdown headings. They also shouldn't show up with a leading =\=
in the final rendered output.

# This is an Org comment

#This is not an Org comment. It has a hash char at beginning of a
paragraph which must be escaped just once i.e. show up as =\#= in
Markdown.

blah # This isn't an Org comment either

This * will be escaped just once i.e. show up as =\*= in Markdown.

This _ will be escaped just once i.e. show up as =\_= in Markdown.

This \ will be escaped just once i.e. show up as =\\= in Markdown.

Hash char at beginning of a continued line
#like this must be escaped just once i.e. show up as =\#= in Markdown.

![this exclamation must be escaped just once i.e. show up as =\!= in
Markdown]

This ! does not need to be escaped as there is no ambiguity.
* Page Bundles                                                 :page_bundles:
:PROPERTIES:
:EXPORT_HUGO_SECTION: bundles
:END:
** Bundles Section
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
This is the content for the "bundles" section landing page.
** Page Bundle A
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: page-bundle-a
:END:
*** Page Bundle A
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_RESOURCES: :src "images/copy-of-*.png" :title "First copy of Org mode logo"
:EXPORT_HUGO_RESOURCES+: :src "copy-2-*.png" :title "Second copy of Org mode logo"
:END:
Index page of /Page Bundle A/.
**** Link to images not in the current directory
***** Source path contains =/static/=
[[../files-to-be-copied-to-static/static/images/copy-of-unicorn-logo.png]]

If you link to files not in the *current directory*, ensure that the
path contains =/static/= if you would like to preserve the directory
structure.

Example translations between the =static=-containing image paths to
the copied location inside the bundle:
|----------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------|
| Outside =static=                 | Copied-to location inside BUNDLE                              | Explanation                                                                                              |
|----------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------|
| =~/temp/static/images/foo.png=   | =<HUGO_BASE_DIR>/content/<SECTION>/<BUNDLE>/images/foo.png=   | If the *outside* path has =/static/= in it, the directory structure after that is preserved when copied. |
| =~/temp/static/img/foo.png=      | =<HUGO_BASE_DIR>/content/<SECTION>/<BUNDLE>/img/foo.png=      | (same as above)                                                                                          |
| =~/temp/static/foo.png=          | =<HUGO_BASE_DIR>/content/<SECTION>/<BUNDLE>/foo.png=          | (same as above)                                                                                          |
| =~/temp/static/articles/zoo.pdf= | =<HUGO_BASE_DIR>/content/<SECTION>/<BUNDLE>/articles/zoo.pdf= | (same as above)                                                                                          |
|----------------------------------+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------|
***** Source path does not contain =/static/=
[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]]
|--------------------------+------------------------------------------------------+------------------------------------------------------------------------------------------------------|
| Outside =static=         | Copied-to location inside BUNDLE                     | Explanation                                                                                          |
|--------------------------+------------------------------------------------------+------------------------------------------------------------------------------------------------------|
| =~/temp/bar/baz/foo.png= | =<HUGO_BASE_DIR>/content/<SECTION>/<BUNDLE>/foo.png= | Here, as the *outside* path does not have =/static/=, the file is copied directly to the BUNDLE dir. |
|--------------------------+------------------------------------------------------+------------------------------------------------------------------------------------------------------|
*** Bundled page foo
:PROPERTIES:
:EXPORT_FILE_NAME: foo
:END:
"Foo" page in /Page Bundle A/.
*** Bundled page bar
:PROPERTIES:
:EXPORT_FILE_NAME: bar
:END:
"Bar" page in /Page Bundle A/.
** Page Bundle B
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: page-bundle-b
:END:
Index page of /Page Bundle B/.

[[../files-to-be-copied-to-static/foo/copy-2-of-unicorn-logo.png]]
** Headless Page Bundle                                            :headless:
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: headless-page-bundle-x
:END:
*** Headless Page Bundle Index Page
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_HEADLESS: t
:END:
This is a *headless* page bundle. This feature was introduced in [[https://github.com/gohugoio/hugo/commit/0432c64dd22e4610302162678bb93661ba68d758][this
commit]], and available in Hugo v0.35+.

As this bundle is headless, the *index* page of this bundle (this
page!) will not be published anywhere:
- It will have no =Permalink= and no rendered HTML in =public/=.
- It will not be part of =.Site.RegularPages=, etc.

But you can get it by =.Site.GetPage ...=. Here is an example ([[https://github.com/gohugoio/hugo/issues/4311#issuecomment-359461045][ref]]):
#+BEGIN_EXAMPLE
{{ $headless := .Site.GetPage "page" "some-headless-page" }}
{{ $reusablePages := $headless.Resources.Match "sidebar-content*" }}
{{ range $reusablePages }}
{{ .Title }}
{{ end }}
#+END_EXAMPLE

There are many use cases of such headless page bundles:
- Shared media galleries
- Reusable page content "snippets"

-----

The content of *index* pages of headless page bundles will not be
available through any means.
*** Bundled page foo in the headless bundle
:PROPERTIES:
:EXPORT_FILE_NAME: foo
:END:
"Foo" page in /Headless Page Bundle/.
*** Bundled page bar in the headless bundle
:PROPERTIES:
:EXPORT_FILE_NAME: bar
:END:
"Bar" page in /Headless Page Bundle/.
*** Bundled page zoo in the headless bundle
:PROPERTIES:
:EXPORT_FILE_NAME: zoo
:END:
"Zoo" page in /Headless Page Bundle/.
*** Page using the Headless Page Bundle                              :layout:
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:EXPORT_HUGO_BUNDLE:
:EXPORT_FILE_NAME: page-using-headless-page-bundle
:EXPORT_HUGO_LAYOUT: headless-bundle-single
:END:
This is a regular page. Below content is fetched from the *headless
page bundle* =headless-page-bundle-x=.
* Footnotes Test                                                   :footnote:
** Footnotes 1
:PROPERTIES:
:EXPORT_DATE: 2017-07-21
:EXPORT_FILE_NAME: footnotes-1
:END:
This is some text[fn:1].

/Note to self: You *cannot* name an Org heading 'Footnotes'; that's
reserved by Org to store all the footnotes./
** Footnotes 2
:PROPERTIES:
:EXPORT_DATE: 2017-07-21
:EXPORT_FILE_NAME: footnotes-2
:END:
This is some text[fn:2].
** Footnotes in a row
:PROPERTIES:
:EXPORT_FILE_NAME: footnotes-in-a-row
:EXPORT_DATE: 2017-07-21
:END:
This is some text[fn:1][fn:2].
** Multiple references of same footnote
:PROPERTIES:
:EXPORT_FILE_NAME: multi-ref-same-footnote
:EXPORT_DATE: 2017-07-21
:END:
This is some text[fn:1].
This is some text[fn:1].
This is some text[fn:1].
** Multi-line footnote
:PROPERTIES:
:EXPORT_FILE_NAME: multi-line-footnote
:END:
This is some text[fn:3].
** Bind footnotes to the preceding word
:PROPERTIES:
:EXPORT_FILE_NAME: footnotes-bind-to-preceding-word
:EXPORT_HUGO_ALIASES: footnotes-at-eol
:END:
{{{oxhugoissue(96)}}}

To test the fix for this, increase/decrease the width of the browser
window showing this page so that the test lines below start wrapping
around, and you will see that the footnote references will *never* be
on their own on a new line.
*** Footnote ref at EOL
**** Last word, followed by FOOTNOTE PERIOD --- /Good Case A/
- As there is no space in-between "word FOOTNOTE PERIOD", this text
  will stay unmodified.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1].

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1].

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1].

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1].
**** Last word, followed by FOOTNOTE *space* PERIOD --- /Bad Case A1/
- In this case, the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] .

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] .

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] .

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] .
**** Last word, followed by PERIOD *space* FOOTNOTE --- /Bad Case A2/
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1]

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1]

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1]

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1]
**** Last word, followed by *space* FOOTNOTE *space* PERIOD --- /Bad Case A3/
- This is a blend of /Bad Case A1/ and /Bad Case A2/ above.
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=,
  *AND* the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] .

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] .

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] .

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] .

abcde a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a [fn:1] .
*** Footnote NOT at EOL
**** Word, followed by FOOTNOTE PERIOD --- /Good Case B/
- As there is no space in-between "word FOOTNOTE PERIOD", this text
  will stay unmodified.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1]. B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1]. B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1]. B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1].
**** Word, followed by FOOTNOTE *space* PERIOD --- /Bad Case B1/
- In this case, the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] . B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a[fn:1] . B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] . B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a[fn:1] . B b b.
**** Word, followed by PERIOD *space* FOOTNOTE --- /Bad Case B2/
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1] B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a. [fn:1] B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1] B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a. [fn:1] B b b.
**** Word, followed by *space* FOOTNOTE *space* PERIOD --- /Bad Case B3/
- This is a blend of /Bad Case B1/ and /Bad Case B2/ above.
- In this case, the *space* before FOOTNOTE is replaced with =&nbsp;=,
  *AND* the *space* before the PERIOD at EOL is removed.

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] . B b b.

ab a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a [fn:1] . B b b.

abc a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] . B b b.

abcd a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a [fn:1] . B b b.

abcde a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a
a a a [fn:1] . B b b.
* Tags
** Basic tags                                                       :abc:def:
:PROPERTIES:
:EXPORT_FILE_NAME: test-tags
:EXPORT_DATE: 2017-07-12T13:48:01-04:00
:END:
Testing tags set using Org tags in headings.
** Prefer hyphens and allow spaces
:PROPERTIES:
:EXPORT_HUGO_PREFER_HYPHEN_IN_TAGS: t
:EXPORT_HUGO_ALLOW_SPACES_IN_TAGS: t
:END:
*** Hyphens and spaces in tags      :an_apple__a___pear:good__bad__and__ugly:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphens-and-spaces-in-tags
:END:
*** Hyphens and spaces in categories :@an_apple__a___pear:@good__bad__and__ugly:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphens-and-spaces-in-categories
:END:
The Org tags do not allow spaces. So the trick we use is replace
*double* underscores with spaces.

So an Org tag =@abc__def= becomes Hugo category =abc def=.
** Hyphens in Org tags
*** Prefer
:PROPERTIES:
:EXPORT_HUGO_PREFER_HYPHEN_IN_TAGS: t
:END:
**** Prefer Hyphen in Tags    :_a:___a:b_:b___:a_b:a___b:a_b___c:_a_b___c___:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-tags-prefer
:END:
**** Prefer Hyphen Categories :@_a:@___a:@b_:@b___:@a_b:@a___b:@a_b___c:@_a_b___c___:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-categories-prefer
:END:
*** Don't Prefer
:PROPERTIES:
:EXPORT_HUGO_PREFER_HYPHEN_IN_TAGS:
:END:
**** Don't Prefer Hyphen in Tags          :_a:_a:b_:b_:a_b:a_b:a_b_c:_a_b_c_:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-tags-dont-prefer
:END:
**** Don't Prefer Hyphen Categories :@_a:@_a:@b_:@b_:@a_b:@a_b:@a_b_c:@_a_b_c_:
:PROPERTIES:
:EXPORT_FILE_NAME: hyphen-categories-dont-prefer
:END:
** Spaces in Org Tags
*** Want Spaces
:PROPERTIES:
:EXPORT_HUGO_ALLOW_SPACES_IN_TAGS: t
:END:
**** Spaces in tags               :abc__def:abc__def__ghi:abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: spaces-in-tags
:END:
The Org tags do not allow spaces. So the trick we use is replace
*double* underscores with spaces.

So an Org tag =abc__def= becomes Hugo tag =abc def=.
**** Spaces in categories      :@abc__def:@abc__def__ghi:@abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: spaces-in-categories
:END:
The Org tags do not allow spaces. So the trick we use is replace
*double* underscores with spaces.

So an Org tag =@abc__def= becomes Hugo category =abc def=.
*** Don't Want Spaces
:PROPERTIES:
:EXPORT_HUGO_ALLOW_SPACES_IN_TAGS:
:END:
**** No Spaces in tags            :abc__def:abc__def__ghi:abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: no-spaces-in-tags
:END:
**** No Spaces in categories   :@abc__def:@abc__def__ghi:@abc__def__ghi__jkl:
:PROPERTIES:
:EXPORT_FILE_NAME: no-spaces-in-categories
:END:
** Tags as Categories
*** Category A                                                        :@catA:
**** Cat A post 1                                                      :meow:
:PROPERTIES:
:EXPORT_DATE: 2017-07-24
:EXPORT_FILE_NAME: cat-a-post-1
:END:
This post is in category =catA= and tagged =meow=.
**** Cat A and cat B                                                  :@catB:
:PROPERTIES:
:EXPORT_FILE_NAME: cat-a-and-cat-b
:EXPORT_DATE: 2017-07-24
:END:
This gets both categories =catA= and =catB=.
** Do not leak post's immediate sub-heading tag into the front-matter :expected_tag:post_heading_followed_soon_with_subheading:
:PROPERTIES:
:EXPORT_FILE_NAME: dont-leak-subheading-tags
:END:
*** Sub-heading 1                                            :unexpected_tag:
This is a *special* case where:
- A post has a sub-heading as the first line in its body, and
- That sub-heading has a tag too!

The passing case for this test would be that the =unexpected_tag= does
not leak into the post's front-matter.
* Links                                                               :links:
** Links with target attribute
:PROPERTIES:
:EXPORT_FILE_NAME: links-with-target-attribute
:EXPORT_HUGO_BLACKFRIDAY: :hrefTargetBlank nil
:END:
#+ATTR_HTML: :target _blank :rel noopener
[[https://orgmode.org/manual/Hyperlinks.html][This link (to Hyperlinks chapter in Org manual)]] will open in a new tab
as it is annotated with ~target="_blank"~.

#+ATTR_HTML: :target _self
[[https://orgmode.org/manual/Hyperlinks.html][Here's the same link]] but with ~target="_self"~ annotation. So
clicking it will open that link in this same tab!

#+ATTR_HTML: :width 10% :target _self
[[https://orgmode.org/img/org-mode-unicorn-logo.png][https://orgmode.org/img/org-mode-unicorn-logo.png]]

Above is a link to an image. The =width= attribute of /10%/ though
must apply *only* to the image, and not to the link, and the =target=
attribute must apply *only* to the link, and not to the image.

[[https://orgmode.org/manual/Hyperlinks.html][Here's the same link again]], but this time there is no =#+ATTR_HTML=
annotation. So the behavior will depend on the browser (typically an
external link will open in a new tab automatically).
** Within the same post (Internal links)                     :internal_links:
*** Link to headings by name                     :toc:headings:export_option:
:PROPERTIES:
:EXPORT_FILE_NAME: link-to-headings-by-name
:EXPORT_OPTIONS: num:t toc:t
:END:
**** Alpha 101
:PROPERTIES:
:UNNUMBERED: t
:END:
- Link (with description) to a heading with section number: [[* Beta 102][Link to
  /Beta 102/ heading]]
- Link (no description) to a heading without section number: [[* Zeta
  103]].

  The space after that =*= in the link is optional.. so this also
  works: [[*Zeta 103]].
**** Beta 102
- Link (with description) to a heading without section number: [[* Alpha 101][Link to
  /Alpha 101/ heading]]
***** Gamma 102.1
****** Delta 102.1.1
****** Epsilon 102.1.2
**** Zeta 103
:PROPERTIES:
:UNNUMBERED: t
:END:
***** Links (no descriptions) to headings with section numbers
- Section [[* Gamma 102.1]]
- Section [[* Delta 102.1.1]]
- Section [[* Epsilon 102.1.2]]
*** Link to a heading CUSTOM_ID
:PROPERTIES:
:EXPORT_FILE_NAME: link-heading-custom-id
:EXPORT_DATE: 2017-07-28
:END:
*Obviously, all the =CUSTOM_ID='s set by the user in this file have to
 be unique.*
**** Heading 1
:PROPERTIES:
:CUSTOM_ID: link-heading-1
:END:
- Link to [[#link-heading-2][Heading 2]]
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t
**** Heading 2
:PROPERTIES:
:CUSTOM_ID: link-heading-2
:END:
- Link to [[#link-heading-1][Heading 1]]
*** Links to Org targets
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-org-targets
:END:
From [[https://orgmode.org/manual/Internal-links.html][(org) Internal links]],

#+BEGIN_SRC org
- one item
- <<target>>another item
Here we refer to item [[target]].
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

- one item
- <<target>>another item

/Scroll to the end of the below 'lorem-ipsum' block to find the test
link./

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

*Here we refer to item [[target]].*
*** Links to source blocks
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-source-blocks
:END:
From [[https://orgmode.org/manual/Internal-links.html][(org) Internal links]],

#+BEGIN_QUOTE
   If no dedicated target exists, the link will then try to match the
exact name of an element within the buffer.  Naming is done with the
‘#+NAME’ keyword, which has to be put in the line before the element it
refers to, as in the following example
    #+BEGIN_EXAMPLE
    ,#+NAME: My Target
    | a  | table      |
    |----+------------|
    | of | four cells |
    #+END_EXAMPLE
#+END_QUOTE

Also, when targeting a =#+NAME= keyword, *=#+CAPTION= keyword is
mandatory in order to get proper numbering* for _source blocks_,
_images_ and _tables_.

So the below code block:
#+BEGIN_SRC org
,#+CAPTION: Hello
,#+NAME: code__hello
,#+BEGIN_SRC emacs-lisp
(message "Hello")
,#+END_SRC

,*Here we refer to code snippet [[code__helloagain]].*

,#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

,#+CAPTION: Hello Again
,#+NAME: code__helloagain
,#+BEGIN_SRC emacs-lisp
(message "Hello again")
,#+END_SRC

,*Here we refer to code snippet [[code__hello]].*
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

#+CAPTION: Hello
#+NAME: code__hello
#+BEGIN_SRC emacs-lisp
(message "Hello")
#+END_SRC

*Here we refer to code snippet [[code__helloagain]].*

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

#+CAPTION: Hello Again
#+NAME: code__helloagain
#+BEGIN_SRC emacs-lisp
(message "Hello again")
#+END_SRC

*Here we refer to code snippet [[code__hello]].*
*** Links to tables                                           :table:caption:
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-tables
:END:
*Note*: When targeting a =#+NAME= keyword, *=#+CAPTION= keyword is
mandatory in order to get proper numbering* for _source blocks_,
_images_ and _tables_.

#+BEGIN_SRC org
,#+CAPTION: Simple table 1
,#+NAME: tab__simple1
| a | b |
| c | d |

,*Here we refer to table [[tab__simple2]].*

,#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's another table:

,#+CAPTION: Simple table 2
,#+NAME: tab__simple2
| e | f |
| g | h |

,*Here we refer to table [[tab__simple1]].*
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

#+CAPTION: Simple table 1
#+NAME: tab__simple1
| a | b |
| c | d |

*Here we refer to table [[tab__simple2]].*

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's another table:

#+CAPTION: Simple table 2
#+NAME: tab__simple2
| e | f |
| g | h |

*Here we refer to table [[tab__simple1]].*
-----
Reference: [[https://orgmode.org/manual/Images-and-tables.html][(org) Images and tables]].
*** Links to images
:PROPERTIES:
:EXPORT_FILE_NAME: links-to-images
:END:
*Note*: When targeting a =#+NAME= keyword, *=#+CAPTION= keyword is
mandatory in order to get proper numbering* for _source blocks_,
_images_ and _tables_.

#+BEGIN_SRC org
,#+CAPTION: Org Logo
,#+NAME: img__org_logo1
[[/images/org-mode-unicorn-logo.png]]

,*Here we refer to image [[img__org_logo2]].*

,#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's the same image again, but with a different Org link ID:

,#+CAPTION: Same Org Logo
,#+NAME: img__org_logo2
[[/images/org-mode-unicorn-logo.png]]

,*Here we refer to image [[img__org_logo1]].*
#+END_SRC

will output below (/lorem-ipsum/ added to increase page content so
that the link jump is evident):

#+CAPTION: Org Logo
#+NAME: img__org_logo1
[[/images/org-mode-unicorn-logo.png]]

*Here we refer to image [[img__org_logo2]].*

#+INCLUDE: "./all-posts.org::#lorem-ipsum" :only-contents t

Here's the same image again, but with a different Org link ID:

#+CAPTION: Same Org Logo
#+NAME: img__org_logo2
[[/images/org-mode-unicorn-logo.png]]

*Here we refer to image [[img__org_logo1]].*
-----
Reference: [[https://orgmode.org/manual/Images-and-tables.html][(org) Images and tables]].
* Equations                                                       :equations:
** Inline equations
:PROPERTIES:
:EXPORT_FILE_NAME: equation-latex-frag
:EXPORT_DATE: 2017-07-31
:END:
- Inline equations are wrapped between =\(= and =\)=.
  - =$= wrapping also works, but it is not preferred as it comes with
    restrictions like "there should be no whitespace between the
    equation and the =$= delimiters".

    So =$ a=b $= will not work (it will look like: $ a=b $), but
    =$a=b$= will work (it will look like: $a=b$).

    On the other hand, both =\(a=b\)= (it will look like: \(a=b\)) and
    =\( a=b \)= (it will look like: \( a=b \)) will work.
- One-per-line equations are wrapped between =\[= and =\]= or =$$=
  delimiters.

For example, below in Org:
#+BEGIN_SRC text
LaTeX formatted equation: \( E = -J \sum_{i=1}^N s_i s_{i+1} \)
#+END_SRC

will look like this in Hugo rendered HTML:

LaTeX formatted equation: \( E = -J \sum_{i=1}^N s_i s_{i+1 }\)

(Don't see this in Markdown, see what it looks after Hugo has
processed it.)

Here's another example, taken from [[https://orgmode.org/manual/LaTeX-fragments.html][(org) LaTeX fragments]].

Below in Org:
#+BEGIN_EXAMPLE
If $a^2=b$ and \( b=2 \), then the solution must be either
$$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]
#+END_EXAMPLE

renders to:

If $a^2=b$ and \( b=2 \), then the solution must be either
$$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]

(Note that the last two equations show up on their own lines.)
** Equations with (r), (c), ..                                    :@upstream:
:PROPERTIES:
:EXPORT_FILE_NAME: equations-with-r-c
:END:
{{{oxhugoissue(104)}}}

Below, =(r)= or =(R)= should not get converted to &reg;, =(c)= or
=(C)= should not get converted to &copy;, and =(tm)= or =(TM)= should
not get converted to &trade;:

- $(r)$ $(R)$
- $(c)$ $(C)$
- $(tm)$ $(TM)$


- \( (r) \) \( (R) \)
- \( (c) \) \( (C) \)
- \( (tm) \) \( (TM) \)

Same as above but in /Block Math equations/:

$$ (r) (R) $$
$$ (c) (C) $$
$$ (tm) (TM) $$

\[ (r) (R) \]
\[ (c) (C) \]
\[ (tm) (TM) \]
* Lists                                                               :lists:
** List following a list
:PROPERTIES:
:EXPORT_FILE_NAME: list-following-a-list
:EXPORT_DATE: 2017-07-31
:END:
You need to force end of list when you have something like an
unordered list immediately following an ordered list.

/The easiest and cleanest way to do that is adding a comment between
those lists./ -- [[https://stackoverflow.com/a/8964494/1219634][Reference]]

That would be the implementing in the Org exporter backend. But in
Org, two consecutive blank lines after a list ends the list.

In the below example, the /foo*/ items would be in a different =<ul>=
element than the /bar*/ items.
*** Unordered list following an unordered list
- foo1
- foo2


+ bar1
+ bar2
*** Unordered list following an ordered list
1. foo3
2. foo4


- bar3
- bar4
*** Ordered list following an unordered list
- foo5
- foo6


1. bar5
2. bar6
*** Description list following an ordered list
- foo1
- foo2


- bar1 :: description
- bar2 :: description
** Nested lists                                                   :@upstream:
:PROPERTIES:
:EXPORT_FILE_NAME: nested-lists
:EXPORT_DATE: 2017-07-31
:END:
+ foo1
+ foo2
  - bar1
  - bar2
    + baz1
    + baz2
      - zoo1
      - zoo2
        1. numbered1
        2. numbered2
*** Unordered list inside descriptive list
- bar1 :: description for bar1
  - foo1
  - foo2
- bar2 :: description for bar2
  - foo3
  - foo4
*** Descriptive list inside unordered list
*Seems like Blackfriday style descriptive list syntax does not work
when that list is nested in other lists.*

So in that case, switch back to the descriptive list syntax used in
=ox-md=.

-----

- foo1
  - bar1 :: description for bar1
  - bar2 :: description for bar2
- foo2
  - bar3 :: description for bar3
  - bar4 :: description for bar4
** Force ordered list numbering                              :custom_counter:
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: force-ordered-list-numbering
:END:
Ordered lists with custom counter.

1. This will be 1.
1. This will be 2.


1. [@10] This will be 10!
1. This will be 11.


1. [@17] This will be 17!
1. This will be 18.
1. [@123] This will be 123!
1. This will be 124.


1. This will be 1 again.
1. This will be 2.

Another example:

1. This will be 1.
1. [@3] This will be 3!
1. [@7] This will be 7!
1. [@100] This will be 100!

See [[https://orgmode.org/manual/Plain-lists.html][(org) Plain lists]] to read more about plain lists in Org.
** Checklist
:PROPERTIES:
:EXPORT_FILE_NAME: checklist
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :fractions false
:END:
This is a check-list:
*** Checklist 1 [60%]
Checklist showing progress in percentage.

- [ ] Task 1
- [X] Task 2
- [X] Task 3
- [ ] Task 4
- [X] Task 5
*** Checklist 2 [2/5]
Checklist showing progress in ratio.

- [ ] Task 1
- [ ] Task 2
- [X] Task 3
- [ ] Task 4
- [X] Task 5
** Plain lists with ATTR_HTML         :attr___html:attr___css:custom_counter:
:PROPERTIES:
:EXPORT_FILE_NAME: lists-with-attr-html
:END:
*** Unordered lists
#+ATTR_HTML: :class red-text
#+ATTR_CSS: :color red
- Red list item 1
- Red list item 2

#+ATTR_HTML: :class green-text
#+ATTR_CSS: :color green
- Green list item 1
- Green list item 2
*** Ordered lists
#+ATTR_HTML: :class green-text
1. Green ordered list item 1
2. Green ordered list item 2

/The =green-text= style is defined in the list above this one./
**** Ordered list with custom counter
#+ATTR_HTML: :class blue-text
#+ATTR_CSS: :color blue
1. Blue list item 1
2. Blue list item 2
3. [@10]Blue list item 10
*** Definition/descriptive lists
#+ATTR_HTML: :class red-text
- Defn A :: Something A in red
- Defn B :: Something B in red

/The =red-text= style is defined in the first list above./
* Quotes                                                             :quotes:
** Consecutive quotes
:PROPERTIES:
:EXPORT_FILE_NAME: consecutive-quotes
:EXPORT_DATE: 2017-08-01
:END:
Some text.
#+BEGIN_QUOTE
Quote 1. This is a long quote that auto-fills into multiple lines in
Org, but it will be a single paragraph in the exported format.
#+END_QUOTE
#+BEGIN_QUOTE
Quote 2. This is a short quote.
#+END_QUOTE
#+BEGIN_QUOTE
Quote 3. This is a multi-paragraph quote.

This is the second paragraph.
#+END_QUOTE
Some other text.
** Example block inside quote block
:PROPERTIES:
:EXPORT_FILE_NAME: example-block-inside-quote-block
:END:
Some text.
#+BEGIN_QUOTE
Some quoted text.

    #+BEGIN_EXAMPLE
    (some-example)
    #+END_EXAMPLE
#+END_QUOTE
Some other text.
** Multiple example blocks inside quote block
:PROPERTIES:
:EXPORT_FILE_NAME: multiple-example-blocks-inside-quote-block
:END:
Some text.
#+BEGIN_QUOTE
Some quoted text.

    #+BEGIN_EXAMPLE
    (some-example)
    #+END_EXAMPLE
    #+BEGIN_EXAMPLE
    (some-other-example)
    #+END_EXAMPLE
#+END_QUOTE
Some other text.
** Source block inside quote block, followed by another source block outside
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-inside-quote-block-and-another-source-block
:END:
[[https://github.com/russross/blackfriday/issues/407][Blackfriday Issue # 407]]

Some text.
#+BEGIN_QUOTE
Some quoted text.
    #+BEGIN_SRC emacs-lisp
    (message "hello")
    #+END_SRC
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(message "hello again")
#+END_SRC
Some other text.
** Example blocks inside quote block, followed by another example block outside
:PROPERTIES:
:EXPORT_FILE_NAME: example-blocks-inside-quote-block-and-another-example-block
:END:
[[https://github.com/russross/blackfriday/issues/407][Blackfriday Issue # 407]]

Some text.
#+BEGIN_QUOTE
Some quoted text.
    #+BEGIN_EXAMPLE
    (some-example)
    #+END_EXAMPLE
    #+BEGIN_EXAMPLE
    (some-other-example)
    #+END_EXAMPLE
#+END_QUOTE

#+BEGIN_EXAMPLE
(yet-another-example)
#+END_EXAMPLE
Some other text.
** Source block, followed by a quote block containing another source block
:PROPERTIES:
:EXPORT_FILE_NAME: source-block-followed-by-a-quote-block-containing-another-source-block
:END:
Some text.
#+BEGIN_SRC emacs-lisp
(message "hello")
#+END_SRC
#+BEGIN_QUOTE
Some quoted text.
    #+BEGIN_SRC emacs-lisp
    (message "hello again")
    #+END_SRC
#+END_QUOTE
Some other text.
** Example block with escaped Org syntax inside quote block
:PROPERTIES:
:EXPORT_FILE_NAME: example-block-with-escaped-org-inside-quote-block
:END:
Some text.
#+BEGIN_QUOTE
Some quoted text.

    #+BEGIN_EXAMPLE
    ,#+NAME: some_example
    (some-example)
    #+END_EXAMPLE
#+END_QUOTE
Some other text.
** Quote blocks with ATTR_HTML                       :attr___html:attr___css:
:PROPERTIES:
:EXPORT_FILE_NAME: quote-blocks-with-attr-html
:END:
Some text.

#+ATTR_HTML: :class red-text
#+ATTR_CSS: :color red
#+BEGIN_QUOTE
This is a red quote.
#+END_QUOTE

Some more text.
* Verse                                                               :verse:
** One verse
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: one-verse
:END:
To preserve the line breaks, indentation and blank lines in a region,
but otherwise use normal formatting, you can use the /verse/
construct, which can also be used to format poetry -- [[https://orgmode.org/manual/Paragraphs.html][Reference]].
#+BEGIN_VERSE
Great clouds overhead
Tiny black birds rise and fall
Snow covers Emacs

    -- AlexSchroeder
#+END_VERSE
** Consecutive verses
:PROPERTIES:
:EXPORT_DATE: 2017-08-01
:EXPORT_FILE_NAME: consecutive-verses
:END:
#+BEGIN_VERSE
Tyger Tyger, burning bright,
In the forests of the night;
What immortal hand or eye,
Could frame thy fearful symmetry?

In what distant deeps or skies.
Burnt the fire of thine eyes?
On what wings dare he aspire?
What the hand, dare seize the fire?

   -- "The Tyger" /by/ William Blake
#+END_VERSE
#+BEGIN_VERSE
Some parts can be *bold*
  Some can be =monospace=
    Some can be /italic/ too.
#+END_VERSE
#+BEGIN_VERSE
What is this life if, full of care,
We have no time to stand and stare.

No time to stand beneath the boughs
And stare as long as sheep or cows.

No time to see, when woods we pass,
Where squirrels hide their nuts in grass.

   -- "Leisure" /by/ William Henry Davis
#+END_VERSE
** Verse for indentation
:PROPERTIES:
:EXPORT_FILE_NAME: verse-for-indentation
:END:
Some text before indented text.
#+BEGIN_VERSE
>    Text indented by 4 spaces
#+END_VERSE
Org removes indentation from the first line of the text block even in
a Verse block. To get around that, the trick is to use the =>=
character before the required indentation spaces *only* on the first
non-blank line in a Verse block. Only that first =>= character is
removed when translating to Markdown.
*** More examples
- More indentation than in the above example:
  #+BEGIN_VERSE
>        Text indented by 8 spaces
#+END_VERSE
- Leading blank line followed by indented text:
  #+BEGIN_VERSE

>    Text indented by 4 spaces
#+END_VERSE
- Indented text followed by a trailing blank line:
  #+BEGIN_VERSE
>    Text indented by 4 spaces

#+END_VERSE
- Using tab characters for indentation; each tab character still
  constitutes for one =&nbsp;= in HTML.
  #+BEGIN_VERSE
>				Text indented by 4 tab characters
#+END_VERSE
*** Corner cases
Only the *first* =>= character immediately following spaces and empty
lines will be removed:
#+BEGIN_VERSE

>Line 1 above was empty. So the first =>= seen on this line is removed.
Line 3 had no =>= char.
> ← See that this =>= on line 4 is retained even at the beginning of the line.
Line 5 has this > charcter in-between and is retained.
#+END_VERSE

If someone really wants to have =>= as the first non-blank character
in the final output, they can use =>>= instead.. *only for that first
instance*. The below Verse block is same as above except that the
first =>= is retained in the final output.
#+BEGIN_VERSE

>>Line 1 above was empty. So *only* the first =>= seen on this line is removed.
Line 3 had no =>= char.
> ← See that this =>= on line 4 is retained even at the beginning of the line.
Line 5 has this > charcter in-between and is retained.
#+END_VERSE
* Special Blocks                                              :special_block:
:PROPERTIES:
:EXPORT_FILE_NAME: special-blocks
:END:
** HTML5 Element Blocks
*** Block without NAME, class or id
#+BEGIN_article
This is /an article/.
#+END_article
*** Block with NAME
#+NAME: Aside A
#+BEGIN_aside
/Some/ *text* --- 1

| a | b | c |
| d | e | f |
#+END_aside
*** Block with class and id
#+ATTR_HTML: :class my-section :id section-a
#+BEGIN_section
/Some/ *text* --- 2

| g | h | i |
| j | k | l |
#+END_section
*** An inline HTML5 element
Unmarked.
#+BEGIN_mark
/Some/ *marked* text --- 2.5.
#+END_mark
Unmarked again.
** DIV-wrapped Blocks
*** DIV without NAME, class or id
#+BEGIN_something
This is /some text/ wrapped in a =div= block with class =something=.
#+END_something
*** DIV with NAME
#+NAME: Foo A
#+BEGIN_foo
/Some/ *text* --- 3

| m | n | o |
| p | q | r |
#+END_foo
*** DIV with class and id
#+ATTR_HTML: :class my-bar :id bar-a
#+BEGIN_bar
/Some/ *text* --- 4

| s | t | u |
| v | w | x |
#+END_bar
* Paragraphs                                                      :paragraph:
** Paragraphs with ATTR_HTML                         :attr___html:attr___css:
:PROPERTIES:
:EXPORT_FILE_NAME: paragraphs-with-attr-html
:END:
Regular text.

#+ATTR_HTML: :class red-text
#+ATTR_CSS: :color red
Red text.

Regular text.

#+ATTR_HTML: :class green-text
#+ATTR_CSS: :color green
Green text.

Regular text.
* Org TODO keywords                                                    :todo:
** Post with a TODO heading
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-todo
:END:
*** Heading 1
Some text.
*** TODO Heading 2
Some text.
** Post with a DONE heading
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-done
:END:
*** Heading 1
Some text.
*** DONE Heading 2
CLOSED: [2017-08-09 Wed 16:15]
Some text.
* Level Offset                                                 :level_offset:
** Default level offset
:PROPERTIES:
:EXPORT_FILE_NAME: level-offset-default
:END:
*** Heading 1
**** Heading 1.1
*** Heading 2
** Level offset unset
:PROPERTIES:
:EXPORT_FILE_NAME: level-offset-unset
:EXPORT_HUGO_LEVEL_OFFSET:
:END:
Setting =:EXPORT_HUGO_LEVEL_OFFSET:= is same as setting
=:EXPORT_HUGO_LEVEL_OFFSET: 0=.
*** Heading 1
**** Heading 1.1
*** Heading 2
** Level offset of 0
:PROPERTIES:
:EXPORT_FILE_NAME: level-offset-0
:EXPORT_HUGO_LEVEL_OFFSET: 0
:END:
*** Heading 1
**** Heading 1.1
*** Heading 2
** Level offset of 1
:PROPERTIES:
:EXPORT_FILE_NAME: level-offset-1
:EXPORT_HUGO_LEVEL_OFFSET: 1
:END:
*** Heading 1
**** Heading 1.1
*** Heading 2
** Level offset of 2
:PROPERTIES:
:EXPORT_FILE_NAME: level-offset-2
:EXPORT_HUGO_LEVEL_OFFSET: 2
:END:
*** Heading 1
**** Heading 1.1
*** Heading 2
* Blackfriday Options                                           :blackfriday:
** Fractions
*** Fraction Table
:PROPERTIES:
:CUSTOM_ID: fraction-table
:END:
|------+------+------+------+------+------+------+------+------+-------+-------+-------+-------|
| /1   | /2   | /3   | /4   | /5   | /6   | /7   | /8   | /9   | /10   | /11   | /12   | /13   |
|------+------+------+------+------+------+------+------+------+-------+-------+-------+-------|
| 1/1  |      | 1/3  |      | 1/5  | 1/6  | 1/7  | 1/8  | 1/9  | 1/10  | 1/11  | 1/12  | 1/13  |
| 2/1  | 2/2  | 2/3  | 2/4  | 2/5  | 2/6  | 2/7  | 2/8  | 2/9  | 2/10  | 2/11  | 2/12  | 2/13  |
| 3/1  | 3/2  | 3/3  |      | 3/5  | 3/6  | 3/7  | 3/8  | 3/9  | 3/10  | 3/11  | 3/12  | 3/13  |
| 4/1  | 4/2  | 4/3  | 4/4  | 4/5  | 4/6  | 4/7  | 4/8  | 4/9  | 4/10  | 4/11  | 4/12  | 4/13  |
| 5/1  | 5/2  | 5/3  | 5/4  | 5/5  | 5/6  | 5/7  | 5/8  | 5/9  | 5/10  | 5/11  | 5/12  | 5/13  |
| 6/1  | 6/2  | 6/3  | 6/4  | 6/5  | 6/6  | 6/7  | 6/8  | 6/9  | 6/10  | 6/11  | 6/12  | 6/13  |
| 7/1  | 7/2  | 7/3  | 7/4  | 7/5  | 7/6  | 7/7  | 7/8  | 7/9  | 7/10  | 7/11  | 7/12  | 7/13  |
| 8/1  | 8/2  | 8/3  | 8/4  | 8/5  | 8/6  | 8/7  | 8/8  | 8/9  | 8/10  | 8/11  | 8/12  | 8/13  |
| 9/1  | 9/2  | 9/3  | 9/4  | 9/5  | 9/6  | 9/7  | 9/8  | 9/9  | 9/10  | 9/11  | 9/12  | 9/13  |
| 10/1 | 10/2 | 10/3 | 10/4 | 10/5 | 10/6 | 10/7 | 10/8 | 10/9 | 10/10 | 10/11 | 10/12 | 10/13 |
| 11/1 | 11/2 | 11/3 | 11/4 | 11/5 | 11/6 | 11/7 | 11/8 | 11/9 | 11/10 | 11/11 | 11/12 | 11/13 |
| 12/1 | 12/2 | 12/3 | 12/4 | 12/5 | 12/6 | 12/7 | 12/8 | 12/9 | 12/10 | 12/11 | 12/12 | 12/13 |
| 13/1 | 13/2 | 13/3 | 13/4 | 13/5 | 13/6 | 13/7 | 13/8 | 13/9 | 13/10 | 13/11 | 13/12 | 13/13 |
|------+------+------+------+------+------+------+------+------+-------+-------+-------+-------|
*** Blackfriday fractions false
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-fractions-false
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :fractions nil
:END:
A Blackfriday option can be disabled by setting the option value to
/nothing/, =nil= or =false=.

These will not be rendered as fractions:
#+INCLUDE: "./all-posts.org::#fraction-table" :only-contents t

But these will always be rendered as fractions, even when the
Blackfriday =fractions= option is set to =false= like in this post.
- 1/2, 1/4, 3/4
*** Blackfriday fractions true
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-fractions-true
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :fractions t
:END:
A Blackfriday option can be enabled by setting the option value to
=t= or =true=.

All of these will be rendered as fractions:
#+INCLUDE: "./all-posts.org::#fraction-table" :only-contents t

Below are special as they will *always* be rendered as fractions, even
when the Blackfriday =fractions= option is set to =false= (though this
post has that option set to =true= -- which is also the default value).
- 1/2, 1/4, 3/4
** Extensions
*** Hard line break wrong case (TOML)                                  :toml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-hardlinebreak-wrong-case-toml
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardlinebreak
:END:
The Blackfriday =hardLineBreak= extension is enabled here even where
user used the wrong case in the extension name:
#+BEGIN_EXAMPLE
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardlinebreak
#+END_EXAMPLE
instead of:
#+BEGIN_EXAMPLE
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardLineBreak
#+END_EXAMPLE

The Blackfriday extension names are case-sensitive. So even though,
the wrong case is used in the Org property drawer, =ox-hugo= ensures
that the Markdown front matter is written in the correct case!
:raised_hands:.

a
b
c

Above, /a/, /b/ and /c/ must appear on separate lines.
*** Hard line break (TOML)                                             :toml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-hardlinebreak-wrong-case-toml
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardLineBreak
:END:
a
b
c

Above, /a/, /b/ and /c/ must appear on separate lines.
*** Hard line break (YAML)                                             :yaml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-hardlinebreak-wrong-case-toml
:EXPORT_DATE: 2017-08-02
:EXPORT_HUGO_BLACKFRIDAY: :extensions hardLineBreak
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:END:
a
b
c

Above, /a/, /b/ and /c/ must appear on separate lines.
*** Enabling/Disabling extensions
:PROPERTIES:
:EXPORT_HUGO_BLACKFRIDAY: :smartdashes :fractions nil :plainidanchors false
:EXPORT_HUGO_BLACKFRIDAY+: :angledquotes t :hrefTargetBlank true
:EXPORT_HUGO_BLACKFRIDAY+: :extensions tabsizeeight hardlinebreak
:EXPORT_HUGO_BLACKFRIDAY+: :extensionsmask fencedcode strikethrough
:END:
**** Enabling/Disabling extensions example
:PROPERTIES:
:CUSTOM_ID: enabling-disabling-extensions-example
:END:
- Extensions enabled :: =tabSizeEight=, =hardLineBreak=
- Extensions disabled :: =fencedCode=, =strikethrough=
***** Angled quotes enabled
"this"
***** Hard line break enabled
a
b
c
***** Plain ID Anchors disabled
Check the ID for all the headings in this post's HTML. The ID's will
look something like:
#+BEGIN_SRC html
<h2 id="plain-id-anchors-disabled:c94b2acd735ed6a466ef85be48bdea8c">Plain ID Anchors disabled</h2>
#+END_SRC
where =:c94b2acd735ed6a466ef85be48bdea8c= is the document ID.
***** Fractions disabled
2/5
***** Smart dashes disabled
a--b	c--d
***** Fenced code disabled
Below, the code block language name will show up before the code.
#+BEGIN_SRC emacs-lisp
(message "Hello")
#+END_SRC
***** Strikethrough disabled
+not-canceled+
**** Enabling/Disabling extensions (TOML)                              :toml:
:PROPERTIES:
:EXPORT_FILE_NAME: blackfriday-ext-enabling-disabling-toml
:EXPORT_DATE: 2017-08-02
:END:
#+INCLUDE: "./all-posts.org::#enabling-disabling-extensions-example" :only-contents t
**** Enabling/Disabling extensions (YAML)                              :yaml:
:PROPERTIES:
:EXPORT_HUGO_FRONT_MATTER_FORMAT: yaml
:EXPORT_FILE_NAME: blackfriday-ext-enabling-disabling-yaml
:EXPORT_DATE: 2017-08-02
:END:
#+INCLUDE: "./all-posts.org::#enabling-disabling-extensions-example" :only-contents t
* Post Weight (Not the menu item weight)                             :weight:
** Auto post-weight calculation
:PROPERTIES:
:EXPORT_HUGO_WEIGHT: auto
:END:
*** Post with auto weight calc 1 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-1
:END:
*** Post with auto weight calc 2 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-2
:END:
*** Post with auto weight calc 3 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-3
:END:
*** Post with auto weight calc 4 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-4
:END:
*** Post with auto weight calc 5 (EXPORT_HUGO_WEIGHT as subtree property)
:PROPERTIES:
:EXPORT_FILE_NAME: hugo-post-weight-5
:END:
** Manually specified post weights
*** Post with weight 123
:PROPERTIES:
:EXPORT_HUGO_WEIGHT: 123
:EXPORT_FILE_NAME: hugo-post-weight-123
:END:
*** Post with weight 4567
:PROPERTIES:
:EXPORT_HUGO_WEIGHT: 4567
:EXPORT_FILE_NAME: hugo-post-weight-4567
:END:
* Dates                                                               :dates:
** Date                                                                :date:
*** Just date
:PROPERTIES:
:EXPORT_FILE_NAME: date-just-date
:EXPORT_DATE: 2017-09-12
:END:
The =date= for this post is Hugo-compatible i.e. [[https://tools.ietf.org/html/rfc3339#section-5.8][RFC3339-compliant]].
*** Date set using Org time stamp
:PROPERTIES:
:EXPORT_FILE_NAME: date-org-time-stamp
:EXPORT_DATE: <2018-01-23 Tue>
:END:
The =date= for this post is set in Org using the ~C-c . RET~ binding.
*** Date + Time
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time
:EXPORT_DATE: 2017-09-12T16:10:00
:END:
*** Date + Time (UTC)
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time-utc
:EXPORT_DATE: 2017-09-12T16:10:00Z
:END:
*** Date + Time (behind UTC)
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time-minus-utc
:EXPORT_DATE: 2017-09-12T16:10:00-04:00
:END:
*** Date + Time (after UTC)
:PROPERTIES:
:EXPORT_FILE_NAME: date-plus-time-plus-utc
:EXPORT_DATE: 2017-09-12T16:10:00+05:30
:END:
*** DONE Parsing date from CLOSED property                           :closed:
CLOSED: [2018-01-23 Tue 14:10]
:PROPERTIES:
:EXPORT_FILE_NAME: parsing-date-from-closed-property
:END:
When an Org TODO item is switched to the =DONE= state, a =CLOSED=
property is auto-inserted (default behavior).

If such a property is non-nil, the value (time-stamp) of that is used
to set the =date= field in the exported front-matter.

- Reference :: [[https://orgmode.org/manual/Special-properties.html][(org) Special properties]] or =C-h i g (org) Special properties=
*** DONE Parsing date for a post which begins with a subheading      :closed:
CLOSED: [2017-09-11 Mon 14:32]
:PROPERTIES:
:EXPORT_FILE_NAME: parsing-date-for-a-post-which-begins-with-a-subheading
:END:
**** The "CLOSED" state of this heading (which is nil) should be ignored
This is a test for {{{oxhugoissue(87)}}}.
*** Invalid Date                                                    :invalid:
:PROPERTIES:
:EXPORT_FILE_NAME: invalid-date
:EXPORT_DATE: 2012-2017
:END:
It's possible that someone is using an existing Org file to export to
Hugo. Some exporters like =ox-texinfo= recognize dates of style
=YEAR1-YEAR2= to use them in Copyright headers.

But that date is invalid as per the standard date format used by Hugo
in =date= front-matter, and also as per =org-parse-time-string=.

So in that case, don't allow =org-parse-time-string= to throw an error
and abort the export, but instead simply don't set the =date= in the
front-matter.

In this post the =:EXPORT_DATE:= property is set to =2012-2017=, but
the export will still happen fine, with the =date= front-matter not
set.
** Lastmod Date                                                     :lastmod:
*** Lastmod date set using Org time stamp
:PROPERTIES:
:EXPORT_FILE_NAME: lastmod-date-org-time-stamp
:EXPORT_HUGO_LASTMOD: <2018-01-23 Tue>
:END:
The =lastmod= for this post is set in Org using the ~C-c . RET~
binding.
*** Lastmod date set using Hugo-compatible date string
:PROPERTIES:
:EXPORT_FILE_NAME: lastmod-date-hugo-compatible-date
:EXPORT_HUGO_LASTMOD: 2018-01-23
:END:
The =lastmod= for this post is Hugo-compatible i.e. [[https://tools.ietf.org/html/rfc3339#section-5.8][RFC3339-compliant]].
** Publish Date                                                 :publishdate:
*** Publish date set using Org time stamp
:PROPERTIES:
:EXPORT_FILE_NAME: publish-date-org-time-stamp
:EXPORT_HUGO_PUBLISHDATE: <2018-01-23 Tue>
:END:
The =publishdate= for this post is set in Org using the ~C-c . RET~
binding.
*** Publish date set using Hugo-compatible date string
:PROPERTIES:
:EXPORT_FILE_NAME: publish-date-hugo-compatible-date
:EXPORT_HUGO_PUBLISHDATE: 2018-01-23
:END:
The =publishdate= for this post is Hugo-compatible
i.e. [[https://tools.ietf.org/html/rfc3339#section-5.8][RFC3339-compliant]].
*** Publish date set using SCHEDULED                              :scheduled:
SCHEDULED: <2018-01-26 Fri>
:PROPERTIES:
:EXPORT_FILE_NAME: publish-date-scheduled
:END:
If a subtree has the =SCHEDULED= [[https://orgmode.org/manual/Special-properties.html][Special Property]] set, set the
=publishdate= front-matter to the scheduled date.

By default, =C-c C-s= in Org adds the =SCHEDULED= property to the
current subtree.
** Expiry Date                                                   :expirydate:
*** Expiry date set using Org time stamp
:PROPERTIES:
:EXPORT_FILE_NAME: expiry-date-org-time-stamp
:EXPORT_HUGO_EXPIRYDATE: <2999-01-23 Tue>
:END:
The =expirydate= for this post is set in Org using the ~C-c . RET~
binding.
*** Expiry date set using Hugo-compatible date string
:PROPERTIES:
:EXPORT_FILE_NAME: expiry-date-hugo-compatible-date
:EXPORT_HUGO_EXPIRYDATE: 2999-01-23
:END:
The =expirydate= for this post is Hugo-compatible
i.e. [[https://tools.ietf.org/html/rfc3339#section-5.8][RFC3339-compliant]].
*** Expiry date set using DEADLINE                                 :deadline:
DEADLINE: <2999-01-01 Tue>
:PROPERTIES:
:EXPORT_FILE_NAME: expiry-date-deadline
:END:
If a subtree has the =DEADLINE= [[https://orgmode.org/manual/Special-properties.html][Special Property]] set, set the
=expirydate= front-matter to the deadline date.

By default, =C-c C-d= in Org adds the =DEADLINE= property to the
current subtree.
* Preserve filling option                                           :filling:
** Filling is preserved
:PROPERTIES:
:EXPORT_FILE_NAME: filling-is-preserved
:EXPORT_HUGO_PRESERVE_FILLING: t
:END:
abc
def
ghi
** Filling is not preserved
:PROPERTIES:
:EXPORT_FILE_NAME: filling-is-not-preserved
:EXPORT_HUGO_PRESERVE_FILLING:
:END:
abc
def
ghi
* Section Inheritance                                   :section_inheritance:
** Section A
:PROPERTIES:
:EXPORT_HUGO_SECTION: section-a
:END:
*** Post A1
:PROPERTIES:
:EXPORT_FILE_NAME: post-a1
:END:
This post should be created in =content/section-a/=.
*** Category X                                                       :@cat_x:
**** Post AX
:PROPERTIES:
:EXPORT_FILE_NAME: post-ax
:END:
This post should also be created in =content/section-a/=.
* Keywords                                                          :keyword:
** TOC                                                                  :toc:
*** Post with TOC using keyword set to 0
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-toc-keyword-0
:END:
#+TOC: headlines 0
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
*** Post with TOC using keyword set to 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-toc-keyword-2
:END:
#+TOC: headlines 2
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
*** Post with TOC using keyword set to 6
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-toc-keyword-6
:END:
#+TOC: headlines 6
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
* Export Options                                              :export_option:
** Table of Contents (TOC)                                              :toc:
=ox-hugo= has the =with-toc= option disabled by default as Hugo has an
inbuilt TOC generation feature.

Still some people might prefer to use the Org generated TOC.
*** Section Numbers                                                     :num:
**** Don't number headlines or TOC
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-nil
:EXPORT_OPTIONS: num:nil
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Don't number headlines (but yes in TOC)
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-onlytoc
:EXPORT_OPTIONS: num:onlytoc
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Number 0 levels
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-0
:EXPORT_OPTIONS: num:0
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Number 2 levels
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-2
:EXPORT_OPTIONS: num:2
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** Number all levels
:PROPERTIES:
:EXPORT_FILE_NAME: options-num-all
:EXPORT_OPTIONS: num:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
*** TOC
**** =num= set to =nil=
***** TOC with all headings (unnumbered)
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-t-num-nil
:EXPORT_OPTIONS: num:nil toc:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** TOC with headings (unnumbered) only till level 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-2-num-nil
:EXPORT_OPTIONS: num:nil toc:2
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** No TOC as toc set to nil
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-nil-num-nil
:EXPORT_OPTIONS: num:nil toc:nil
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** =num= set to =t=
***** TOC with all headings (numbered, except for selected unnumbered)
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-t-num-t
:EXPORT_OPTIONS: num:t toc:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** TOC with headings (numbered, except for selected unnumbered) only till level 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-2-num-t
:EXPORT_OPTIONS: num:t toc:2
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** No TOC as toc set to 0
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-0-num-t
:EXPORT_OPTIONS: num:t toc:0
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** =num= set to =onlytoc=
***** TOC with all headings (post-unnumbered, TOC-numbered)
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-t-num-onlytoc
:EXPORT_OPTIONS: num:onlytoc toc:t
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
***** TOC with headings (post-unnumbered, TOC-numbered) only till level 2
:PROPERTIES:
:EXPORT_FILE_NAME: post-with-export-options-toc-1-num-onlytoc
:EXPORT_OPTIONS: num:onlytoc toc:1
:END:
#+INCLUDE: "./all-posts.org::#nested-sections-example" :only-contents t
**** No TOC in Summary
:PROPERTIES:
:EXPORT_FILE_NAME: no-toc-in-summary
:EXPORT_OPTIONS: toc:t
:END:
By default, Hugo will dump everything at the beginning of a post into
its =.Summary= (See [[https://gohugo.io/content-management/summaries/][Hugo content summaries]]). As TOC enabled using the
export option like =toc:t= is inserted at the beginning of a post, TOC
will be shown in that summary too!

#+HUGO: more

***** =ox-hugo='s Solution
=ox-hugo= helps prevent that with a workaround.. it inserts a special
HTML comment *=<!--endtoc-->=* after the TOC.

It is important to insert a user-defined summary split by using
=#+HUGO: more=. Otherwise it is very likely that the TOC is big enough
to exceed the Hugo-defined max-summary length and so the
=<!--endtoc-->= that appears *after* the TOC never gets parsed.

#+BEGIN_QUOTE
*Always use =#+HUGO: more= when you enable Org generated TOC's.*
#+END_QUOTE

In your site's Hugo template, you can then filter that out with
something like:
***** Snippet
#+BEGIN_SRC html
{{ $summary_splits := split .Summary "<!--endtoc-->" }}
{{ if eq (len $summary_splits) 2 }}
    <!-- If that endtoc special comment is present, output only the part after that comment as Summary. -->
    {{ index $summary_splits 1 | safeHTML }}
{{ else }}
    <!-- Print the whole Summary if endtoc special comment is not found. -->
    {{ .Summary }}
{{ end }}
#+END_SRC
***** Example
See this test site's [[https://github.com/kaushalmodi/ox-hugo/blob/master/test/site/themes/bare_min/layouts/_default/summary.html][=summary.html=]] as an example.
** Sub/superscripts                                 :superscripts:subscripts:
*** Sub/superscripts require braces
:PROPERTIES:
:EXPORT_FILE_NAME: sub-superscripts-require-braces
:END:
By default, =ox-hugo= implements the =^:{}= export option. See =C-h v
org-export-with-sub-superscripts= for details. With this option, the
text that needs to be subscripted or superscripted has to be
surrounded by braces ={..}= following the =_= or =^=.
**** Following text will export =_= and =^= verbatim
a_b a_bc a^b a^bc
**** Following text will export =_{..}= as subscript and =^{..}= as superscript
a_{b} a_{bc} a^{b} a^{bc}
*** Sub/superscripts don't require braces
:PROPERTIES:
:EXPORT_FILE_NAME: sub-superscripts-dont-require-braces
:EXPORT_OPTIONS: ^:t
:END:
**** Following text will export =_..= as subscript and =^..= as superscript
a_b a_bc a^b a^bc
**** Following text will export =_{..}= as subscript and =^{..}= as superscript
a_{b} a_{bc} a^{b} a^{bc}
** Disable exporting title                                    :title:disable:
:PROPERTIES:
:EXPORT_OPTIONS: title:nil
:EXPORT_FILE_NAME: disable-title-2
:END:
This post will be exported without =title= in the front-matter because
it is disabled using =:EXPORT_OPTIONS: title:nil=.
** Disable exporting author                                  :author:disable:
:PROPERTIES:
:EXPORT_OPTIONS: author:nil
:EXPORT_FILE_NAME: disable-author
:EXPORT_AUTHOR: Foo Bar
:END:
This post will be exported without =author= in the front-matter because
it is disabled using =:EXPORT_OPTIONS: author:nil=.
** Creator                                             :creator:front_matter:
*** Default Creator                            :dont_export_during_make_test:
:PROPERTIES:
:EXPORT_DATE: 2017-12-01
:EXPORT_OPTIONS: creator:t
:EXPORT_FILE_NAME: default-creator
:END:
The front-matter for this post contains the default Creator string.
*** Custom Creator
:PROPERTIES:
:EXPORT_CREATOR: The awesome Emacs + Org-mode + ox-hugo + Hugo
:EXPORT_OPTIONS: creator:t
:EXPORT_FILE_NAME: custom-creator
:END:
The front-matter for this post contains a custom Creator string.
* Export snippets and blocks
** Export snippet                                            :export_snippet:
*** Export snippet Hugo                                                :hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: export_snippet_hugo
:END:
@@hugo:This will get exported **only for** Hugo exports, `verbatim`.@@

@@hugo:Newlines in Org source
between the `@​@` pairs are
allowed too
(but no blank lines).@@

Use *Export Blocks* if you need blank lines in-between.
*** Export snippet Markdown                                        :markdown:
:PROPERTIES:
:EXPORT_FILE_NAME: export_snippet_markdown
:END:
@@md:This Markdown **Export Snippet** will also get exported for Hugo
exports, `verbatim`.@@

@@markdown:_This one too_@@
- NOTE :: =ox-md.el= does not support *Export Snippets* as of writing
          this <2017-12-08 Fri>. So even the =@@md:foo@@= and
          =@@markdown:foo@@= snippets are handled by =ox-hugo=
          directly.
*** Export snippet HTML                                                :html:
:PROPERTIES:
:EXPORT_FILE_NAME: export_snippet_html
:END:
@@html:This HTML <b>Export Snippet</b> will also get exported for Hugo
exports, <code>verbatim</code>.@@
** Export block                                                :export_block:
*** Export block Hugo                                                  :hugo:
:PROPERTIES:
:EXPORT_FILE_NAME: export_block_hugo
:END:
#+BEGIN_EXPORT hugo
This will get exported **only for** Hugo exports, `verbatim`.
#+END_EXPORT
*** Export block Markdown                                          :markdown:
:PROPERTIES:
:EXPORT_FILE_NAME: export_block_markdown
:END:
#+BEGIN_EXPORT markdown
This Markdown **Export Block** will also get exported for Hugo exports,
`verbatim` ..
#+END_EXPORT

#+BEGIN_EXPORT md
and **this too**.
#+END_EXPORT
*** Export block HTML                                                  :html:
:PROPERTIES:
:EXPORT_FILE_NAME: export_block_html
:END:
#+BEGIN_EXPORT html
This HTML <b>Export Block</b>  will also get exported for Hugo exports,
<code>verbatim</code>.
#+END_EXPORT
* Miscellaneous Front Matter                                   :front_matter:
** Hugo Aliases                                                     :aliases:
*** Alias without section portion 1
:PROPERTIES:
:EXPORT_FILE_NAME: alias-without-section-1
:EXPORT_HUGO_ALIASES: alias-a
:END:
As the specified alias does not contain the "/" string, it will be
auto-prefixed with the section for the current post.
*** New section just for test
:PROPERTIES:
:EXPORT_HUGO_SECTION: alias-test
:END:
**** Alias without section portion 2
:PROPERTIES:
:EXPORT_FILE_NAME: alias-without-section-2
:EXPORT_HUGO_ALIASES: alias-b
:END:
As the specified alias does not contain the "/" string, it will be
auto-prefixed with the section for the current post.
*** Alias specifying a different section
:PROPERTIES:
:EXPORT_FILE_NAME: alias-different-section
:EXPORT_HUGO_ALIASES: /alias-test/alias-c
:END:
*** Alias specifying root section
:PROPERTIES:
:EXPORT_FILE_NAME: alias-root-section
:EXPORT_HUGO_ALIASES: /alias-d
:END:
*** Multiple aliases without section portion
:PROPERTIES:
:EXPORT_FILE_NAME: alias-multiple-without-section
:EXPORT_HUGO_ALIASES: alias-e alias-f
:END:
*** Multiple aliases with section portion
:PROPERTIES:
:EXPORT_FILE_NAME: alias-multiple-with-section
:EXPORT_HUGO_ALIASES: /alias-test/alias-g /alias-test/alias-h
:END:
** Author                                                            :author:
*** Single author
:PROPERTIES:
:EXPORT_FILE_NAME: single-author
:EXPORT_AUTHOR: Foo Bar
:END:
This post has 1 author.
*** Multiple authors
:PROPERTIES:
:EXPORT_FILE_NAME: multiple-authors
:EXPORT_AUTHOR: Foo Bar, Toto Kumar  , Zulu ,Ágota Kristóf
:END:
This post has multiple authors. In Org, multiple authors are added
comma-separated.
** Keywords                                                        :keywords:
*** Single keyword in front-matter
:PROPERTIES:
:EXPORT_FILE_NAME: single-keyword-in-front-matter
:EXPORT_KEYWORDS: abc
:END:
*** Multiple keywords in front-matter
:PROPERTIES:
:EXPORT_FILE_NAME: multiple-keywords-in-front-matter
:EXPORT_KEYWORDS: abc def hyphenated-keyword underscored_keyword "two words" "these are four words"
:END:
*** Keywords set using multiple properties
:PROPERTIES:
:EXPORT_FILE_NAME: keywords-set-using-multiple-properties
:EXPORT_KEYWORDS: abc
:EXPORT_KEYWORDS+: def
:END:
** Replace front-matter keys                                   :keys:replace:
*** Replace only "linkTitle" key                                  :linktitle:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-only-linktitle-key
:EXPORT_HUGO_LINKTITLE: Replace only "linkTitle" key
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: linkTitle>linktitle
:END:
This post will have the =linkTitle= key in front-matter replaced with
=linktitle=.
*** Replace only "tags" key                                            :tags:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-only-tags-key
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: tags>keywords
:END:
This post will have the =tags= key in front-matter replaced with
=keywords=.
*** Replace only "categories" key                    :categories:@test_cat_x:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-only-categories-key
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: categories>cats
:END:
This post will have the =categories= key in front-matter replaced with
=cats=.
*** Replace both "tags" and "categories" keys   :tags:categories:@test_cat_x:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-both-tags-and-categories-keys
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: tags>keywords categories>cats
:END:
This post will have the =tags= key in front-matter replaced with
=keywords= and =categories= replaced with =cats=.
*** Replace keys using multiple properties      :@test_cat_x:tags:categories:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-keys-using-multiple-properties
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: tags>keywords
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE+: categories>cats
:END:
This post will have the =tags= key in front-matter replaced with
=keywords= and =categories= replaced with =cats=.
*** Swap tags and categories               :@test_cat_x:tags:categories:swap:
:PROPERTIES:
:EXPORT_FILE_NAME: swap-tags-and-categories
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: tags>categories categories>tags
:END:
This post will have the =tags= and =categories= keys in the
front-matter swapped.
*** Replace custom keys                                              :custom:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-custom-keys
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :foo 1 :bar 2
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: foo>myfoo bar>mybar
:END:
This post will have the =foo= key in front-matter replaced with
=myfoo= and =bar= replaced with =mybar=.
*** Attempt to replace non-existing keys                       :non_existing:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-non-existing-keys
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: toto>zulu
:END:
Here, attempt is made to replace a non-existing key =toto=, but still,
there shouldn't be any error.
* Real Examples                                               :real_examples:
:PROPERTIES:
:EXPORT_HUGO_SECTION: real-examples
:END:
** Multifractals in ecology using R                          :math:equations:
:PROPERTIES:
:EXPORT_FILE_NAME: multifractals-in-ecology-using-r
:EXPORT_AUTHOR: Leonardo A. Saravia
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/lsaravia/MultifractalsInR/blob/master/Curso3.md
:EXPORT_DATE: 2017-11-28T10:48:00-05:00
:END:
- Disclaimer :: This post is from the [[https://github.com/lsaravia/MultifractalsInR/blob/master/Curso3.md][link]] posted by GitHub user
                [[https://github.com/lsaravia][*lsaravia*]] in [[https://github.com/gohugoio/hugo/issues/234#issuecomment-347532166][this comment]]. All credit for this post
                goes to the original author.
-----
[[file:/images/MultifractalsInR/fractal-ice.jpg]]
*** Multifractals
- Many natural systems cannot be characterized by a single number such
  as the fractal dimension. Instead an infinite spectrum of dimensions
  must be introduced.
  [[file:/images/MultifractalsInR/C3_Clouds.png]]
*** Multifractal definition
- Consider a given object $\Omega$, its multifractal nature is
  practically determined by covering the system with a set of boxes
  $\{B_i(r)\}$ with $(i=1,..., N(r))$ of side length $r$
- These boxes are nonoverlaping and such that

  $$\Omega = \bigcup_{i=1}^{N(r)} B_i(r)$$

  This is the box-counting method but now a measure $\mu(B_n)$ for each
  box is computed. This measure corresponds to the total population or
  biomass contained in $B_n$, in general will scale as:

  $$\mu(B_n) \propto r^\alpha$$
*** Box counting
[[file:/images/MultifractalsInR/C3_BoxCounting.png]]
*** The generalized dimensions
- The fractal dimension $D$ already defined is actually one of an
  infinite spectrum of so-called correlation dimension of order $q$ or
  also called Renyi entropies.

  $$D_q = \lim_{r \to 0} \frac{1}{q-1}\frac{log \left[ \sum_{i=1}^{N(r)}p_i^q \right]}{\log r}$$

  where $p_i=\mu(B_i)$ and a normalization is assumed:

  $$\sum_{i=1}^{N(r)}p_i=1$$

- For $q=0$ we have the familiar definition of fractal dimension. To see
  this we replace $q=0$

  $$D_0 = -\lim_{r \to 0}\frac{N(r)}{\log r}$$
*** Generalized dimensions 1
- It can be shown that the inequality $D_q' \leq D_q$ holds for
  $q' \geq q$
- The sum

  $$M_q(r) = \sum_{i=1}^{N(r)}[\mu(B_i(r))]^q = \sum_{i=1}^{N(r)}p_i^q$$

  is the so-called moment or partition function of order $q$.
- Varying q allows to measure the non-homogeneity of the pattern. The
  moments with larger $q$ will be dominated by the densest boxes. For
  $q<0$ will come from small $p_i$'s.
- Alternatively we can think that for $q>0$, $D_q$ reflects the scaling
  of the large fluctuations and strong singularities. In contrast, for
  $q<0$, $D_q$ reflects the scaling of the small fluctuations and weak
  singularities.
*** Exercise
- Calculate the partition function for the center and lower images of
  the figure:
  [[file:/images/MultifractalsInR/C3_BoxCounting.png]]
*** Two important dimensions
- Two particular cases are $q=1$ and $q=2$. The dimension for $q=1$ is
  the Shannon entropy or also called by ecologist the Shannon's index of
  diversity.

  $$D_1 = -\lim_{r \to 0}\sum_{i=1}^{N(r)} p_i \log p_i$$

  and the second is the so-called correlation dimension:

  $$D_2 = -\lim_{r \to 0} \frac{\log \left[ \sum_{i=1}^{N(r)} p_i^2 \right]}{\log r} $$

  the numerator is the log of the Simpson index.
*** Application
- Salinity stress in the cladoceran Daphniopsis Australis. Behavioral
  experiments were conducted on individual males, and their successive
  displacements analyzed using the generalized dimension function $D_q$
  and the mass exponent function $\tau_q$
  [[file:/images/MultifractalsInR/C3_Cladoceran.png]]
  both functions indicate that the successive displacements of male D.
  australis have weaker multifractal properties. This is consistent with
  and generalizes previous results showing a decrease in the complexity
  of behavioral sequences under stressful conditions for a range of
  organisms.
- A shift between multifractal and fractal properties or a change in
  multifractal properties, in animal behavior is then suggested as a
  potential diagnostic tool to assess animal stress levels and health.
*** Mass exponent and Hurst exponent
- The same information contained in the generalized dimensions can be
  expressed using mass exponents:

  $$M_q(r) \propto r^{-\tau_q}$$

  This is the scaling of the partition function. For monofractals
  $\tau_q$ is linear and related to the Hurst exponent:

  $$\tau_q = q H - 1$$

  For multifractals we have

  $$\tau_q = (q -1) D_q$$

  Note that for $q=0$, $D_q = \tau_q$ and for $q=1$, $\tau_q=0$
*** Paper
1. Kellner JR, Asner GP (2009) Convergent structural responses of
   tropical forests to diverse disturbance regimes. Ecology Letters 12:
   887--897. doi:10.1111/j.1461-0248.2009.01345.x.
** 神经网络基础    :math:equations:not_english:table:latex:latex_environment:
:PROPERTIES:
:EXPORT_FILE_NAME: nn-intro
:EXPORT_AUTHOR: Feng Ruohang
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/Vonng/Math/blob/master/nndl/nn-intro.md
:EXPORT_DATE: 2017-11-29
:END:
- Disclaimer :: This post is from the [[https://github.com/Vonng/Math/blob/master/nndl/nn-intro.md][link]] posted by GitHub user
                [[https://github.com/Vonng][*Vonng*]] in [[https://github.com/gohugoio/hugo/issues/234#issuecomment-347725391][this comment]]. All credit for this post
                goes to the original author.
-----
神经网络相关基本知识笔记
*** 神经网络表示
**** 神经元模型
神经网络从大脑的工作原理得到启发，可用于解决通用的学习问题。神经网络的
基本组成单元是 *神经元(neuron)* 。每个神经元具有一个轴突和多个树突。每
个连接到本神经元的树突都是一个输入，当所有输入树突的兴奋水平之和超过某
一阈值，神经元就会被激活。激活的神经元会沿着其轴突发射信号，轴突分出数
以万计的树突连接至其他神经元，并将本神经元的输出并作为其他神经元的输入。
数学上，神经元可以用 *感知机* 的模型表示。

[[file:/images/Vonng/neuron.png]]

一个神经元的数学模型主要包括以下内容：

| 名称                           | 符号 | 说明                               |
|--------------------------------+------+------------------------------------|
| 输入 (input)                   | $x$  | 列向量                             |
| 权值 (weight)                  | $w$  | 行向量，维度等于输入个数           |
| 偏置 (bias)                    | $b$  | 标量值，是阈值的相反数             |
| 带权输入 (weighted input)      | $z$  | $z=w · x + b$ ，激活函数的输入值   |
| 激活函数 (activation function) | $σ$  | 接受带权输入，给出激活值。         |
| 激活值 (activation)            | $a$  | 标量值，$a = σ(\vec{w}·\vec{x}+b)$ |

****** 激活函数表达式
$$
a
= \sigma(
    \left[ \begin{matrix}
        w_{1} & ⋯  & w_{n} \\
    \end{matrix}\right]  ·
    \left[ \begin{array}{x} x_1 \\ ⋮ \\ ⋮ \\ x_n \end{array}\right] +
    b
)
$$

激活函数通常使用S型函数，又称为sigmoid或者logsig，因为该函数具有良好的
特性： *光滑可微* ，形状接近感知机所使用的硬极限传输函数，函数值与 *导
数值计算方便* 。

$$
σ(z) = \frac 1 {1+e^{-z}}
$$

$$
σ'(z) = σ(z)(1-σ(z))
$$

也有一些其他的激活函数，例如：硬极限传输函数(hardlim)，对称硬极限函数(hardlims)，
线性函数(purelin)， 对称饱和线性函数(satlins) ，对数-s形函数(logsig)，正线性函数
(poslin)，双曲正切S形函数(tansig)，竞争函数(compet)，有时候为了学习速度或者其他
原因也会使用，表过不提。
**** 单层神经网络模型
可以并行操作的神经元组成的集合，称为神经网络的一层。

现在考虑一个具有 $n$ 个输入， $s$ 个神经元(输出)的单层神经网络，则原来单个神经元的数
学模型可扩展如下：

| 名称     | 符号 | 说明                                                                 |
|----------+------+----------------------------------------------------------------------|
| 输入     | $x$  | 同层所有神经元共用输入，故输入保持不变，仍为 $(n×1)$ 列向量          |
| 权值     | $W$  | 由 $1 × n$ 行向量，变为 $s × n$ 矩阵，每一行表示一个神经元的权值信息 |
| 偏$置    | $b$  | 由 $1 × 1$ 标量变为 $s × 1$ 列向量                                   |
| 带权输入 | $z$  | 由 $1 × 1$ 标量变为 $s × 1$ 列向量                                   |
| 激活值   | $a$  | 由 $1 × 1$ 标量变为 $s × 1$ 列向量                                   |
****** 激活函数向量表达式
$$
\left[ \begin{array}{a} a_1 \\ ⋮ \\ a_s \end{array}\right]
= \sigma(
    \left[ \begin{matrix}
        w_{1,1} & ⋯  & w_{1,n} \\
        ⋮ & ⋱  & ⋮  \\
        w_{s,1} & ⋯  & w_{s,n} \\
    \end{matrix}\right]  ·
    \left[ \begin{array}{x} x_1 \\ ⋮ \\ ⋮ \\ x_n \end{array}\right] +
    \left[ \begin{array}{b} b_1 \\ ⋮ \\ b_s \end{array}\right]
)
$$

单层神经网络能力有限，通常都会将多个单层神经网络的输出和输入相连，组成
多层神经网络。
**** 多层神经网络模型
- 多层神经网络的层数从1开始计数，第一层为 *输入层* ，第 $L$ 层为 *输出
  层* ，其它的层称为 *隐含层* 。
- 每一层神经网络都有自己的参数 $W,b,z,a,⋯$ ，为了区别，使用上标区分：
  $W^2,W^3,⋯$ 。
- 整个多层网络的输入，即为输入层的激活值 $x=a^1$ ，整个网络的输出，即
  为输出层的激活值： $y'=a^L$ 。
- 因为输入层没有神经元，所以该层所有参数中只有激活值 $a^1$ 作为网络输入
  值而存在，没有 $W^1,b^1,z^1$ 等。

现在考虑一个 $L​$ 层的神经网络，其各层神经元个数依次为：
$d_1,d_2,⋯,d_L​$ 。则该网络的数学模型可扩展如下：

| 名称     | 符号 | 说明                                                                             |
|----------+------+----------------------------------------------------------------------------------|
| 输入     | $x$  | 输入仍然保持不变，为 $(d_1×1)$ 列向量                                            |
| 权值     | $W$  | 由 $s × n$ 矩阵扩展为 $L-1$ 个矩阵组成的列表： $W^2_{d_2 × d_1},⋯,W^L_{d_L × d_{L-1}}$ |
| 偏置     | $b$  | 由 $s × 1$ 列向量扩展为 $L-1$ 个列向量组成的列表： $b^2_{d_2},⋯,b^L_{d_L}$             |
| 带权输入 | $z$  | 由 $s × 1$ 列向量扩展为 $L-1$ 个列向量组成的列表： $z^2_{d_2},⋯,z^L_{d_L}$             |
| 激活值   | $a$  | 由 $s × 1$ 列向量扩展为 *$L$ 个列向量* 组成的列表： $a^1_{d_1},a^2_{d_2},⋯,a^L_{d_L}$     |

****** 激活函数矩阵表达式

$$
\left[ \begin{array}{a} a^l_1 \\ ⋮ \\ a^l_{d_l} \end{array}\right]
= \sigma(
    \left[ \begin{matrix}
        w^l_{1,1} & ⋯  & w^l_{1,d_{l-1}} \\
        ⋮ & ⋱  & ⋮  \\
        w^l_{d_l,1} & ⋯  & w^l_{d_l,d_{l-1}} \\
    \end{matrix}\right]  ·
    \left[ \begin{array}{x} a^{l-1}_1 \\ ⋮ \\ ⋮ \\ a^{l-1}_{d_{l-1}} \end{array}\right] +
    \left[ \begin{array}{b} b^l_1 \\ ⋮ \\ b^l_{d_l} \end{array}\right])
$$

***** 权值矩阵的涵义
多层神经网络的权值由一系列权值矩阵表示

- 第 $l$ 层网络的权值矩阵可记作 $W^l$ ，表示前一层（ $l-1$ ）到本层
  （$l$）的连接权重
- $W^l$ 的第 $j$ 行可记作 $W^l_{j*}$
  ，表示从 $l-1$ 层所有 $d_{l-1}$ 个神经元出发，到达 $l$
  层 $j$ 号神经元的连接权重
- $W^l$ 的第 $k$ 列可记作 $W^l_{*k}$
  ，表示从 $l-1$ 层第 $k$ 号神经元出发，到达 $l$
  层所有 $d_l$ 个神经元的连接权重
- $W^l$ 的 $j$ 行 $k$ 列可记作 $W^l_{jk}$ ，表示从 $l-1$ 层 $k$ 号神经元
  出发，到达 $l$ 层 $j$ 神经元的连接权重
- 如图， $w^3_{24}$ 表示从2层4号神经元到3层2号神经元的连接权值：

[[file:/images/Vonng/nn-weight.png]]

只要记住，权值矩阵 $W$ 的 *行标表示本层神经元* 的标号， *列标表示上层
神 经元* 的标号即可。

*** 神经网络推断
*前馈（feed forward）* 是指神经网络接受输入，产生输出的一次计算过程。又
称为一次 *推断（inference）* 。

计算过程如下：

\begin{align}
a^1  &= x \\
a^2  &=  σ(W^2a^1 + b^2) \\
a^3  &=  σ(W^3a^2 + b^3) \\
⋯ \\
a^L  &= σ(W^La^{L-1} + b^L) \\
y  &= a^L \\
\end{align}

推断实际上就是一系列矩阵乘法与向量运算，一个训练好的神经网络可以高效地
使用各种语言实现。神经网络的功能是通过推断而体现的。推断实现起来很简单，
但如何 *训练神经网络* 才是真正的难点。

*** 神经网络训练
神经网络的训练，是调整网络中的权值参数与偏置参数，从而提高网络工作效果
的过程。

通常使用 *梯度下降(Gradient Descent)* 的方法来调整神经网络的参数，首先
要定义一个 *代价函数(cost function)* 用以衡量神经网络的误差，然后通过
梯度下降方法计算合适的参数修正量，从而 *最小化* 网络误差。
**** 代价函数
代价函数是用于衡量神经网络工作效果的函数，是定义在一个或多个样本上的实
值函数，通常应满足以下条件：

1. *误差是非负的，神经网络效果越好，误差越小*
2. *代价可以写成神经网络输出的函数*
3. *总体代价等于个体样本代价的均值* ： $C=\frac{1}{n} \sum_x C_x$

最常用的一个简单的代价函数是： *二次代价函数* ，又称为 *均方误差
(MeanSquareError)*

$$
C(w,b) = \frac{1}{2n} \sum_x{{\|y(x)-a\|}^2}
$$

前面的系数 $\frac 1 2$ 是为了求导后简洁的形式而添加的， $n$ 是使用样本
的数量，这里 $y$  和 $x$ 都是已知的样本数据。

理论上任何可以反映网络工作效果的指标都可以作为代价函数。但之所以使用
MSE，而不是诸如"正确分类图像个数"的指标，是因为只有一个 *光滑可导* 的
代价函数才可以使用 *梯度下降* (Gradient Descent)调整参数。

***** 样本的使用
代价函数的计算需要一个或多个训练样本。当训练样本非常多时，如果每轮训练
都要重新计算网络整个训练集上所有样本的误差函数，开销非常大，速度难以接
受。若只使用总体的一小部分，计算就能快很多。不过这样做依赖一个假设：
*随机样本的代价，近似等于总体的代价。*

按照使用样本的方式，梯度下降又分为：

- 批量梯度下降法(Batch GD)：最原始的形式，更新每一参数都使用所有样本。可以得到全
  局最优解，易于并行实现，但当样本数量很多时，训练速度极慢。

- 随机梯度下降法(Stochastic GD)：解决BGD训练慢的问题，每次随机使用一个样本。训练
  速度快，但准确度下降，且并不是全局最优，也不易于并行实现。
- 小批量梯度下降法(MiniBatch GD)：在每次更新参数时使用b个样本（例如每次10个样本），
  在BGD与SGD中取得折中。

每次只使用一个样本时，又称为在线学习或递增学习。

当训练集的所有样本都被使用过一轮，称为完成一轮 *迭代* 。

**** 梯度下降算法
若希望通过调整神经网络中的某个参数来减小整体代价，则可以考虑微分的方法。
因为每层的激活函数，以及最终的代价函数都是光滑可导的。所以最终的代价函
数 $C$ 对于某个我们感兴趣的参数 $w,b$ 也是光滑可导的。轻微拨动某个参数
的值，最终的误差值也会发生连续的轻微的变化。不断地沿着参数的梯度方向，
轻微调整每个参数的值，使得总误差值向下降的方向前进，最终达到极值点。就
是梯度下降法的核心思想。
***** 梯度下降的逻辑
现在假设代价函数 $C$ 为两个变量 $v_1,v_2$ 的可微函数，梯度下降实际上就是
选择合适的 $Δv$ ，使得 $ΔC$ 为负。由微积分可知：

$$
ΔC ≈ \frac{∂C}{∂v_1} Δv_1 + \frac{∂C}{∂v_2} Δv_2
$$

这里 $Δv$ 是向量： $Δv = \left[ \begin{array}{v} Δv_1 \\ Δv_2
\end{array}\right]$ ， $∇C$  是梯度向量 $\left[ \begin{array}{C}
\frac{∂C}{∂v_1} \\ \frac{∂C}{∂v_2} \end{array} \right]$ ，于是上式可重
写为

$$
ΔC ≈ ∇C·Δv
$$

怎样的 $Δv$ 才能令代价函数的变化量为负呢？一种简单办法是令即 $Δv$ 取一
个与梯度 $∇C$ 共线反向的小向量，此时 $Δv = -η∇C$ ，则损失函数变化量
$ΔC ≈ -η{∇C}^2$ ，可以确保为负值。按照这种方法，通过不断调整  $v$ ： $v
→ v' = v -η∇C$ ，使得 $C$ 最终达到极小值点。

这即梯度下降的涵义所在： *所有参数都会沿着自己的梯度(导数)方向不断进行
轻微下降， 使得总误差到达极值点。*

对于神经网络，学习的参数实际上是权重 $w$ 与偏置量 $b$ 。原理是一样的，不过这里的
 $w,b$ 数目非常巨大

$$
w →w' = w-η\frac{∂C}{∂w} \\
b → b' = b-η\frac{∂C}{∂b}
$$

真正棘手的问题在于梯度 $∇C_w,∇C_b$ 的计算方式。如果使用微分的方法，通
过 $\frac {C(p+ε)-C} {ε}$ 来求参数的梯度，那么网络中的每一个参数都需要
进行一次前馈和一次 $C(p+ε)$  的计算，在神经网络汪洋大海般的参数面前，这
样的办法是行不通的。

*反向传播(Back propagation)算法* 可以解决这一问题。通过巧妙的简化，可
以在一次前馈与一次反传中，高效地计算整个网络中所有参数梯度。

*** 反向传播
反向传播算法接受一个打标样本 $(x,y)$ 作为输入，给出网络中所有参数 $(W,b)$ 的梯度。

**** 反向传播误差δ
反向传播算法需要引入一个新的概念：误差 $δ$ 。误差的定义源于这样一种朴素的思想：如
果轻微修改某个神经元的带权输入 $z$ ，而最终代价 $C$ 已不再变化，则可认为 $z$ 已经到达
极值点，调整的很好了。于是损失函数 $C$ 对某神经元带权输入 $z$ 的偏导 $\frac {∂C}{∂z}$
可以作为该神经元上误差 $δ$ 的度量。故定义第 $l$ 层的第 $j^{th}$ 个神经元上的误差 $δ^l_j$ 为：

$$
δ^l_j ≡ \frac{∂C}{∂z^l_j}
$$

与激活值 $a$ ， 带权输入 $z$ 一 样，误差也可以写作向量。第 $l$ 层 的误差向量记作 $δ^l$ 。 虽
然看上去差不多，但之所以使用带权输入 $z$ 而 不是激活值输出 $a$ 来 定义本层的误差，有着
形式上巧妙的设计。

引入反向传播误差的概念，是为了通过误差向量来计算梯度 $∇C_w,∇C_b$ 。

反向传播算法一言蔽之：计算出 *输出层误差* ，通过递推方程逐层回算出 *每
一层的误差* ，再由每一层的误差算出 *本层的权值梯度与偏置梯度* 。

这需要解决四个问题：

1. 递推首项：如何计算输出层的误差： $δ^L$
2. 递推方程：如何根据后一层的误差 $δ^{l+1}$ 计 算前一层误差 $δ^l$
3. 权值梯度：如何根据本层误差 $δ^l$ 计 算本层权值梯度 $∇W^l$
4. 偏置梯度：如何根据本层误差 $δ^l$ 计 算本层偏置梯度 $∇b^l$

这四个问题，可以通过四个反向传播方程得到解决。

**** 反向传播方程
| 方程                            | 说明               | 编号 |
|---------------------------------+--------------------+------|
| $δ^L = ∇C_a ⊙ σ'(z^L)$          | 输出层误差计算公式 | BP1  |
| $δ^l = (W^{l+1})^T δ^{l+1} ⊙ σ'(z^l)$ | 误差传递公式       | BP2  |
| $∇C_{W^l} = δ^l × {(a^{{l-1})}}T$     | 权值梯度计算公式   | BP3  |
| $∇C_b = δ^l$                    | 偏置梯度计算公式   | BP4  |

当误差函数取MSE： $C = \frac 1 2 \|\vec{y} -\vec{a}\|^2= \frac 1 2
[(y_1 - a_1)^2 + \cdots + (y_{d_L} - a_{d_L})^2]$ ，激活函数取sigmoid时：

| 计算方程                             | 说明                                                              | 编号 |
|--------------------------------------+-------------------------------------------------------------------+------|
| $δ^L = (a^L - y) ⊙(1-a^L)⊙ a^L$      | 输出层误差需要 $a^L$ 和 $y$                                       | BP1  |
| $δ^l = (W^{{l+1})}T δ^{l+1} ⊙(1-a^l)⊙ a^l$ | 本层误差需要：后层权值 $W^{l+1}$ ， 后层误差 $δ^{l+1}$ ， 本层输出$a^l$ | BP2  |
| $∇C_{W^l} = δ^l × {(a^{{l-1})}}T$          | 权值梯度需要：本层误差 $δ^l$ ， 前层输出$a^{l-1}$                    | BP3  |
| $∇C_b = δ^l$                         | 偏置梯度需要：本层误差$δ^l$                                       | BP4  |

**** 反向传播方程的证明
***** BP1：输出层误差方程
输出层误差方程给出了根据网络输出 $a^L$ 与 标记结果 $y$ 计 算输出层误差 $δ$ 的 方法：

$$
δ^L = (a^L - y) ⊙(1-a^L)⊙ a^L
$$

****** 证明
因为 $a^L = σ(z^L)$ ，本方程可以直接从反向传播误差的定义，通过 *$a^L$
作为中间变量链 式求导* 推导得出：

$$
\frac{∂C}{∂z^L} = \frac{∂C}{∂a^L} \frac{∂a^L}{∂z^L}  = ∇C_a σ'(z^L)
$$

而因为误差函数 $C = \frac 1 2 \|\vec{y} -\vec{a}\|^2= \frac 1 2
[(y_1 - a_1)^2 + ⋯ + (y_{d_L} - a_{d_L})^2]$ ，方程两侧对某个 $a_j$ 取偏导则
有：

$$
\frac {∂C}{∂a^L_j} = (a^L_j-y_j)
$$

因为误差函数中，其他神经元的输出不会影响到误差函数对神经元 $j$ 输出的
偏导，系数也正好平掉了。写作向量形式即为： $(a^L - y)$ 。另一方面，易
证 $σ'(z^L) = (1-a^L)⊙ a^L$ 。

QED
***** BP2：误差传递方程
误差传递方程给出了根据后一层误差计算前一层误差的方法：

$$
δ^l = (W^{l+1})^T δ^{l+1} ⊙ σ'(z^l)
$$

****** 证明
本方程可以直接从反向传播误差的定义，以后一层所有神经元的带权输入 $z^{l+1}$ 作 为中间变
量进行链式求导推导出：

$$
δ^l_j = \frac {∂C}{∂z^l_j}
= \sum_{k=1}^{d_{l+1}}  \frac{∂C}{∂z^{l+1}_k} \frac{∂z^{l+1}_k}{∂z^{l}_j}
= \sum_{k=1}^{d_{l+1}}  (δ^{l+1}_k  \frac{∂z^{l+1}_k}{∂z^{l}_j})
$$

通过链式求导，引入后一层带权输入作为中间变量，从而在方程右侧引入后一层
误差的表达形式。现在要解决的就是 $\frac{∂z^{l+1}_k}{∂z^{l}_j}​$ 是 什么的问
题。由带权输入的定义 $z = wx + b​$ 可知：

$$
z^{l+1}_k = W^{l+1}_{k,*} ·a^l + b^{l+1}_{k}  =   W^{l+1}_{k,*} · σ(z^{l}) + b^{l+1}_{k}
= \sum_{j=1}^{d_{l}}(w_{kj}^{l+1} σ(z^{l_j})) + b^{l+1}_{k}
$$

两边同时对 $z^{l}_j$ 求 导可以得到：

$$
\frac{∂z^{l+1}_k}{∂z^{l}_j} = w^{l+1}_{kj} σ'(z^l)
$$

回代则有：

\begin{align}
δ^l_j & = \sum_{k=1}^{d_{l+1}}  (δ^{l+1}_k  \frac{∂z^{l+1}_k}{∂z^{l}_j})  \\
& = σ'(z^l)   \sum_{k=1}^{d_{l+1}}     (δ^{l+1}_k  w^{l+1}_{kj}) \\
& = σ'(z^l) ⊙  [(δ^{l+1}) · W^{l+1}_{*.j}] \\
& = σ'(z^l) ⊙ [(W^{l+1})^T_{j,*} ·  (δ^{l+1}) ]\\
\end{align}

这里，对后一层所有神经元的误差权值之积求和，可以改写为两个向量的点积：

- 后一层 $k$ 个 神经元的误差向量
- 后一层权值矩阵的第 $j$ 列 ，即所有从本层 $j$ 神 经元出发前往下一层所有 $k$ 个 神经元的
  权值。

又因为向量点积可以改写为矩阵乘法：以行向量乘以列向量的方式进行，所以将权值矩阵转
置，原来拿的是列，现在则拿出了行向量。这时候再改写回向量形式为：

$$
δ^l =  σ'(z^l) ⊙ (W^{l+1})^Tδ^{l+1}
$$

QED
***** BP3：权值梯度方程
每一层的权值梯度 $∇C_{W^l}$ 可 以根据本层的误差向量（列向量），与上层的输出向量（行向
量）的外积得出。

$$
∇C_{W^l} = δ^l × {(a^{l-1})}^T
$$

****** 证明
由误差的定义，以 $w^l_{jk}$ 作 为中间变量求偏导可得：

\begin{align}
δ^l_j & = \frac{∂C}{∂z^l_j}
= \frac{∂C}{∂w^l_{jk}} \frac{∂ w_{jk}}{∂ z^l_j}
= ∇C_{w^l_{jk}} \frac{∂w_{jk}}{∂ z^l_j}
\end{align}

由定义可得，第 $l$ 层 第 $j$ 个 神经元的带权输入 $z^l_j$ ：

$$
z^l_j = \sum_k w^l_{jk} a^{l-1}_k + b^l_j
$$

两侧对 $w_{jk}^l$ 求 导得到：

$$
\frac{\partial z_j}{\partial w^l_{jk}} = a^{l-1}_k
$$

代回则有： $$
∇C_{w^l_{jk}} = δ^l_j \frac{∂ z^l_j}{∂w_{jk}} =   δ^l_j a^{l-1}_k
$$ 观察可知，向量形式是一个外积： $$
∇C_{W^l} = δ^l × {(a^{l-1})}^T
$$

- *本层误差行向量* ： $δ^l$ ，维度为（$d_l \times 1$)

- *上层激活列向量* ： $(a^{l-1})^T​$ ，维度为（$1 \times d_{l-1}​$）

QED
***** BP4：偏置梯度方程
$$
∇C_b = δ^l
$$

****** 证明
由定义可知：

$$
δ^l_j  = \frac{∂C}{∂z^l_j}
= \frac{∂C}{∂b^l_j} \frac{∂b_j}{∂z^l_j}
= ∇C_{b^l_{j}} \frac{∂b_j}{∂z^l_j}
$$

因为 $z^l_j = W^l_{*,j} \cdot a^{l-1} + b^l_j$ ，两侧对 $z_j^l$ 求 导得到
$1=\frac{∂b_j}{∂z^l_j}$ 。 于是回代得到： $∇C_{b^l_{j}} =δ^l_j$ ，

QED

至此，四个方程均已证毕。只要将其转换为代码即可工作。
*** 神经网络的实现
作为概念验证，这里给出了MNIST手写数字分类神经网络的Python实现。

#+BEGIN_SRC python
# coding: utf-8
# author: vonng(fengruohang@outlook.com)
# ctime: 2017-05-10

import random
import numpy as np

class Network(object):
    def __init__(self, sizes):
        self.sizes = sizes
        self.L = len(sizes)
        self.layers = range(0, self.L - 1)
        self.w = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])]
        self.b = [np.random.randn(x, 1) for x in sizes[1:]]

    def feed_forward(self, a):
        for l in self.layers:
            a = 1.0 / (1.0 + np.exp(-np.dot(self.w[l], a) - self.b[l]))
        return a

    def gradient_descent(self, train, test, epoches=30, m=10, eta=3.0):
        for round in range(epoches):
            # generate mini batch
            random.shuffle(train)
            for batch in [train_data[k:k + m] for k in xrange(0, len(train), m)]:
                x = np.array([item[0].reshape(784) for item in batch]).transpose()
                y = np.array([item[1].reshape(10) for item in batch]).transpose()
                n, r, a = len(batch), eta / len(batch), [x]

                # forward & save activations
                for l in self.layers:
                    a.append(1.0 / (np.exp(-np.dot(self.w[l], a[-1]) - self.b[l]) + 1))

                # back propagation
                d = (a[-1] - y) * a[-1] * (1 - a[-1])   #BP1
                for l in range(1, self.L):  # l is reverse index since last layer
                    if l > 1:   #BP2
                        d = np.dot(self.w[-l + 1].transpose(), d) * a[-l] * (1 - a[-l])
                    self.w[-l] -= r * np.dot(d, a[-l - 1].transpose()) #BP3
                    self.b[-l] -= r * np.sum(d, axis=1, keepdims=True) #BP4

            # evaluate
            acc_cnt = sum([np.argmax(self.feed_forward(x)) == y for x, y in test])
            print "Round {%d}: {%s}/{%d}" % (round, acc_cnt, len(test_data))


if __name__ == '__main__':
    import mnist_loader

    train_data, valid_data, test_data = mnist_loader.load_data_wrapper()
    net = Network([784, 100, 10])
    net.gradient_descent(train_data, test_data, epoches=100, m=10, eta=2.0)
#+END_SRC

数据加载脚本： [[https://github.com/mnielsen/neural-networks-and-deep-learning/blob/master/src/mnist_loader.py][=mnist_loader.py=]]
。输入数据为二元组列表： =(input(784,1), output(10,1))=

#+BEGIN_SRC sh
$ python net.py
Round {0}: {9136}/{10000}
Round {1}: {9265}/{10000}
Round {2}: {9327}/{10000}
Round {3}: {9387}/{10000}
Round {4}: {9418}/{10000}
Round {5}: {9470}/{10000}
Round {6}: {9469}/{10000}
Round {7}: {9484}/{10000}
Round {8}: {9509}/{10000}
Round {9}: {9539}/{10000}
Round {10}: {9526}/{10000}
#+END_SRC

一轮迭代后，网络在测试集上的分类准确率就达到90%，最终收敛至96%左右。

对于五十行代码，这个效果是值得惊叹的。然而96%的准确率在实际生产中恐怕仍然是无法
接受的。想要达到更好的效果，就需要对神经网络进行优化。

*** 神经网络优化
神经网络的基础知识也就这么多，但优化其表现却是一个无尽的挑战。每一种优化的手段都
可以当做一个进阶的课题深入研究。优化手段也是八仙过海各显神通：有数学，有科学，有
工程学，也有哲学，还有玄学...

改进神经网络的学习效果有几种主要的方法：

- 选取 *更好的代价函数* ：例如 *交叉熵（cross-entropy）*
- *规范化（regularization）* ： *L2规范化* 、弃权、L1规范化
- 采用其他的 *激活神经元* ：线性修正神经元（ReLU），双曲正切神经元（tansig）
- 修改神经网络的输出层： *柔性最大值(softmax)*
- 修改神经网络输入的组织方式：递归神经网络（Recurrent
  NN），卷积神经网络（Convolutional NN）。
- 添加层数：深度神经网络（Deep NN）
- 通过尝试，选择合适的 *超参数（hyper-parameters）* ，按照迭代轮数或评
  估效果动态调整超参数。
- 采用其他的梯度下降方法：基于动量的梯度下降
- 使用更好的 *初始化权重*
- 人为扩展已有训练数据集

这里介绍两种方法， *交叉熵代价函数* 与 *L2规范化* 。因为它们：

- 实现简单，修改一行代码即可实现，还减小了计算开销。
- 效果立竿见影，将分类错误率从4%降低到2%以下。

**** 代价函数：交叉熵
MSE是一个不错的代价函数，然而它存在一个很尴尬的问题：学习速度。

MSE输出层误差的计算公式为： $$
δ^L =  (a^L - y)σ'(z^L)
$$

sigmoid又称为逻辑斯蒂曲线，其导数 $σ'$ 是 一个钟形曲线。所以当带权输入 $z$ 从 大到小或
从小到大时，梯度的变化会经历一个"小，大，小"的过程。学习的速度也会被导数项拖累，
存在一个"慢，快，慢"的过程。

| MSE                       | Cross Entropy                       |
|---------------------------+-------------------------------------|
| [[file:/images/Vonng/mse.png]] | [[file:/images/Vonng/cross-entropy.png]] |

若采用 *交叉熵（cross entropy）* 误差函数：

$$
C = - \frac 1 n \sum_x [ y ln(a) + (1-y)ln(1-a)]
$$

对于单个样本，即

$$
C = - [ y ln(a) + (1-y)ln(1-a)]
$$

虽然看起来很复杂，但输出层的误差公式变得异常简单，变为： $δ^L = a^L - y$

比起MSE少掉了导数因子，所以误差直接和（预测值-实际值）成正比，不会遇到学习速度被
激活函数的导数拖慢的问题，计算起来也更为简单。

***** 证明
$C$ 对 网络输出值 $a$ 求 导，则有：

$$
∇C_a = \frac {∂C} {∂a^L} = - [ \frac y a - \frac {(1-y)} {1-a}] = \frac {a - y} {a (1-a)}
$$

反向传播的四个基本方程里，与误差函数 $C$ 相 关的只有BP1：即输出层误差的计算方式。

$$
δ^L = ∇C_a ⊙ σ'(z^L)
$$

现在 $C$ 换 了计算方式，将新的误差函数 $C$ 对 输出值 $a^L$ 的 梯度
$\frac {∂C} {∂a^L}$ 带回BP1，即有：

$$
δ^L = \frac {a - y} {a (1-a)}× a(1-a) = a-y
$$

**** 规范化
拥有大量的自由参数的模型能够描述特别神奇的现象。

费米说："With four parameters I can fit an elephant, and with five I can make
him wiggle his trunk"。神经网络这种动辄百万的参数的模型能拟合出什么奇妙的东西是
难以想象的。

一个模型能够很好的拟合已有的数据，可能只是因为模型中足够的自由度，使得
它可以描述几乎所有给定大小的数据集，而不是真正洞察数据集背后的本质。发
生这种情形时， *模型对已有的数据表现的很好，但是对新的数据很难泛化* 。
这种情况称为 *过拟合（overfitting）* 。

例如用3阶多项式拟合一个带随机噪声的正弦函数，看上去就还不错；而10阶多项式，虽然
完美拟合了数据集中的所有点，但实际预测能力就很离谱了。它拟合的更多地是数据集中的
噪声，而非数据集背后的潜在规律。

#+BEGIN_SRC python
x, xs = np.linspace(0, 2 * np.pi, 10), np.arange(0, 2 * np.pi, 0.001)
y = np.sin(x) + np.random.randn(10) * 0.4
p1,p2 = np.polyfit(x, y, 10), np.polyfit(x, y, 3)
plt.plot(xs, np.polyval(p1, xs));plt.plot(x, y, 'ro');plt.plot(xs, np.sin(xs), 'r--')
plt.plot(xs, np.polyval(p2, xs));plt.plot(x, y, 'ro');plt.plot(xs, np.sin(xs), 'r--')
#+END_SRC

| 3阶多项式                        | 10阶多项式                        |
|----------------------------------+-----------------------------------|
| [[file:/images/Vonng/overfit-3.png]] | [[file:/images/Vonng/overfit-10.png]] |

一个模型真正的测验标准，是它对没有见过的场景的预测能力，称为 *泛化能力
（generalize）* 。

如何避免过拟合？按照奥卡姆剃刀原理： *两个效果相同的解释，选择简单的那
一个。*

当然这个原理只是我们抱有的一种信念，并不是真正的定理铁律：这些数据点真的由拟合出
的十阶多项式产生，也不能否认这种可能...

总之，如果出现非常大的权重参数，通常就意味着过拟合。例如拟合所得十阶多项式系数就
非常畸形：

#+BEGIN_EXAMPLE
-0.001278386964370502
0.02826407452052734
-0.20310716176300195
0.049178327509096835
7.376259706365357
-46.295365250182925
135.58265224859255
-211.767050023543
167.26204130954324
-50.95259728945658
0.4211227089756039
#+END_EXAMPLE

通过添加权重衰减项，可以有效遏制过拟合。例如 $L2$ 规 范化为损失函数添
加了一个 $\frac λ 2 w^2$ 的惩罚项：

$$
C = -\frac{1}{n} \sum_{xj} \left[ y_j \ln a^L_j+(1-y_j) \ln
  (1-a^L_j)\right] + \frac{\lambda}{2n} \sum_w w^2
$$

所以，权重越大，损失值越大，这就避免神经网络了向拟合出畸形参数的方向发展。

这里使用的是交叉熵损失函数。但无论哪种损失函数，都可以写成：

$$
C = C_0 + \frac {λ}{2n} \sum_w {w^2}
$$

其中原始的代价函数为 $C_0$ 。 那么，原来损失函数对权值的偏导，就可以写成：

$$
\frac{∂C}{∂w} = \frac{ ∂C_0}{∂w}+\frac{λ}{n} w
$$

因此，引入 $L2$ 规 范化惩罚项在计算上的唯一变化，就是在处理权值梯度时首先要乘一个衰
减系数：

$$
w → w' = w\left(1 - \frac{ηλ}{n} \right) - η\frac{∂C_0}{∂ w}
$$

注意这里的 $n$ 是 所有的训练样本数，而不是一个小批次使用的训练样本数。

***** 改进实现
#+BEGIN_SRC python
# coding: utf-8
# author: vonng(fengruohang@outlook.com)
# ctime: 2017-05-10

import random
import numpy as np

class Network(object):
    def __init__(self, sizes):
        self.sizes = sizes
        self.L = len(sizes)
        self.layers = range(0, self.L - 1)
        self.w = [np.random.randn(y, x) / np.sqrt(x) for x, y in zip(sizes[:-1], sizes[1:])]
        self.b = [np.random.randn(x, 1) for x in sizes[1:]]

    def feed_forward(self, a):
        for l in self.layers:
            a = 1.0 / (1.0 + np.exp(-np.dot(self.w[l], a) - self.b[l]))
        return a

    def gradient_descent(self, train, test, epoches=30, m=10, eta=0.1, lmd=5.0):
        n = len(train)
        for round in range(epoches):
            random.shuffle(train)
            for batch in [train_data[k:k + m] for k in xrange(0, len(train), m)]:
                x = np.array([item[0].reshape(784) for item in batch]).transpose()
                y = np.array([item[1].reshape(10) for item in batch]).transpose()
                r = eta / len(batch)
                w = 1 - eta * lmd / n

                a = [x]
                for l in self.layers:
                    a.append(1.0 / (np.exp(-np.dot(self.w[l], a[-1]) - self.b[l]) + 1))

                d = (a[-1] - y)  # cross-entropy    BP1
                for l in range(1, self.L):
                    if l > 1:   # BP2
                        d = np.dot(self.w[-l + 1].transpose(), d) * a[-l] * (1 - a[-l])
                    self.w[-l] *= w  # weight decay
                    self.w[-l] -= r * np.dot(d, a[-l - 1].transpose())  # BP3
                    self.b[-l] -= r * np.sum(d, axis=1, keepdims=True)  # BP4

            acc_cnt = sum([np.argmax(self.feed_forward(x)) == y for x, y in test])
            print "Round {%d}: {%s}/{%d}" % (round, acc_cnt, len(test_data))


if __name__ == '__main__':
    import mnist_loader
    train_data, valid_data, test_data = mnist_loader.load_data_wrapper()
    net = Network([784, 100, 10])
    net.gradient_descent(train_data, test_data, epoches=50, m=10, eta=0.1, lmd=5.0)
#+END_SRC

#+BEGIN_EXAMPLE
Round {0}: {9348}/{10000}
Round {1}: {9538}/{10000}
Round {2}: {9589}/{10000}
Round {3}: {9667}/{10000}
Round {4}: {9651}/{10000}
Round {5}: {9676}/{10000}
...
Round {25}: {9801}/{10000}
Round {26}: {9799}/{10000}
Round {27}: {9806}/{10000}
Round {28}: {9804}/{10000}
Round {29}: {9804}/{10000}
Round {30}: {9802}/{10000}
#+END_EXAMPLE

可见只是简单的变更，就使准确率有了显著提高，最终收敛至98%。

修改Size为 =[784,128,64,10]= 添加一层隐藏层，可以进一步提升测试集准确
率至98.33%，验证集至98.24%。

对于MNIST数字分类任务，目前最好的准确率为99.79%，那些识别错误的case，恐怕人类想
要正确识别也很困难。神经网络的分类效果最新进展可以参看这里：
[[http://rodrigob.github.io/are_we_there_yet/build/classification_datasets_results.html][classification\_datasets\_results]]。

本文是tensorflow官方推荐教程：[[http://neuralnetworksanddeeplearning.com/][Neural Networks and Deep Learning]]的笔记整理，原文
[[https://github.com/Vonng/Math/blob/master/nndl/nn-intro.md][Github Page]]。
* TODO Pre-Draft State
:PROPERTIES:
:EXPORT_FILE_NAME: draft-state-todo
:EXPORT_DATE: 2017-07-12T17:05:41-04:00
:END:
If a post has the =TODO= keyword, the =draft= front matter variable
should be set to =true=.

Idea to to mark a post or blog idea as =TODO= that you yet have to
start writing.
* DRAFT Draft state
:PROPERTIES:
:EXPORT_FILE_NAME: draft-state-draft
:EXPORT_DATE: 2017-07-12T13:46:16-04:00
:END:
If a post has the =DRAFT= keyword too, the =draft= front matter variable
should be set to =true=.

Idea is to mark a post as =DRAFT= that you have already started
writing, or are in the process at the moment, but it is not yet ready
to be published
* DRAFT Draft state with other headlines :post_heading_followed_soon_with_subheading:
:PROPERTIES:
:EXPORT_FILE_NAME: draft-state-other-headings-draft
:EXPORT_DATE: 2017-07-12T13:46:16-04:00
:END:
** The "TODO" state of this heading (which is nil) should be ignored
If a post has the =DRAFT= state set, the =draft= front matter variable
should be set to =true=, even if the post has a sub-heading
immediately after the post heading.
* Reusable sections                                        :noexport:ARCHIVE:
** Nested sections example
:PROPERTIES:
:CUSTOM_ID: nested-sections-example
:END:
*** Post sub-heading 1
**** Post sub-heading 1.1
***** Post sub-heading 1.1.1
**** Post sub-heading 1.2
**** Post sub-heading 1.3
*** Post sub-heading 2
**** Post sub-heading 2.1
**** Post sub-heading 2.2
***** Post sub-heading 2.2.1
***** Post sub-heading 2.2.2
:PROPERTIES:
:UNNUMBERED: t
:END:
The =UNNUMBERED= property for this subtree is set to =t=. So this
heading will show up as unnumbered in both the post body and the TOC.
***** Post sub-heading 2.2.3
*** Post sub-heading 3
**** Post sub-heading 3.1
** Example text with code blocks
:PROPERTIES:
:CUSTOM_ID: example-text-with-code-blocks
:END:
Here are few variables that you might like to change in the =local.mk=:
- =prefix= :: Org installation directory
  #+BEGIN_SRC makefile
  prefix = /dir/where/you/want/to/install/org # Default: /usr/share
  #+END_SRC
  The =.el= files will go to =$(prefix)/emacs/site-lisp/org= by
              default. If you'd like to change that, you can tweak the
              =lispdir= variable.
- =infodir= :: Org Info installation directory. I like to keep the
                   Info file for development version of Org in a separate
                   directory.
  #+BEGIN_SRC makefile
  infodir = $(prefix)/org/info # Default: $(prefix)/info
  #+END_SRC
- =ORG_MAKE_DOC= :: Types of Org documentation you'd like to build by
                    default.
  #+BEGIN_SRC makefile
  # Define below you only need info documentation, the default includes html and pdf
  ORG_MAKE_DOC = info pdf card # html
  #+END_SRC
- =ORG_ADD_CONTRIB= :: Packages from the =contrib/= directory that
     you'd like to build along with Org. Below are the ones on my
     /must-have/ list.
  #+BEGIN_SRC makefile
  # Define if you want to include some (or all) files from contrib/lisp
  # just the filename please (no path prefix, no .el suffix), maybe with globbing
  #   org-eldoc - Headline breadcrumb trail in minibuffer
  #   ox-extra - Allow ignoring just the heading, but still export the body of those headings
  #   org-mime - Convert org buffer to htmlized format for email
  ORG_ADD_CONTRIB = org-eldoc ox-extra org-mime
  #+END_SRC

Here's an example of an =emacs-lisp= block:
#+BEGIN_SRC emacs-lisp
(defvar emacs-version-short (format "%s_%s"
                                    emacs-major-version emacs-minor-version)
  "A variable to store the current emacs versions as <MAJORVER>_<MINORVER>.
So, for emacs version 25.0.50.1, this variable will be 25_0.")
#+END_SRC
** Source block with line numbers examples
:PROPERTIES:
:CUSTOM_ID: source-block-with-line-numbers-examples
:END:
#+BEGIN_SRC org :noweb-ref src-block-n-default-start
,#+BEGIN_SRC emacs-lisp -n
;; this will export with line number 1 (default)
(message "This is line 2")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-n-custom-start
,#+BEGIN_SRC emacs-lisp -n 20
;; this will export with line number 20
(message "This is line 21")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-n-default-continue
,#+BEGIN_SRC emacs-lisp +n
;; This will be listed as line 22
(message "This is line 23")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-n-custom-continue
,#+BEGIN_SRC emacs-lisp +n 10
;; This will be listed as line 33
(message "This is line 34")
,#+END_SRC
#+END_SRC
** Source block with line highlighting examples
:PROPERTIES:
:CUSTOM_ID: source-block-with-line-highlighting-examples
:END:
#+BEGIN_SRC org :noweb-ref src-block-hl-without-n
,#+BEGIN_SRC emacs-lisp :hl_lines 1,3-5
(message "This is line 1")
(message "This is line 2")
(message "This is line 3")
(message "This is line 4")
(message "This is line 5")
(message "This is line 6")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-hl-with-n-not-1
,#+BEGIN_SRC emacs-lisp -n 7 :hl_lines 1,3-5
(message "This is line 7 in code, but line 1 for highlighting reference")
(message "This is line 8 in code, but line 2 for highlighting reference")
(message "This is line 9 in code, but line 3 for highlighting reference")
(message "This is line 10 in code, but line 4 for highlighting reference")
(message "This is line 11 in code, but line 5 for highlighting reference")
(message "This is line 12 in code, but line 6 for highlighting reference")
,#+END_SRC
#+END_SRC

#+BEGIN_SRC org :noweb-ref src-block-hl-with-n
,#+BEGIN_SRC emacs-lisp -n :hl_lines 1,3-5
(message "This is line 1")
(message "This is line 2")
(message "This is line 3")
(message "This is line 4")
(message "This is line 5")
(message "This is line 6")
,#+END_SRC
#+END_SRC
** Lorem Ipsum
:PROPERTIES:
:CUSTOM_ID: lorem-ipsum
:END:
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque et
quam metus. Etiam in iaculis mi, sit amet pretium magna. Donec ut dui
mi. Maecenas pharetra sapien nunc, ut mollis enim aliquam quis. Nam at
ultricies metus. Nulla tempor augue in vestibulum tristique. Phasellus
volutpat pharetra metus quis suscipit. Morbi maximus sem dolor, id
accumsan ipsum commodo non.

Fusce quam ligula, gravida ac dui venenatis, bibendum commodo
lorem. Duis id elit turpis. Integer sed diam nibh. Donec tempus
lacinia odio, a laoreet velit dictum id. Suspendisse efficitur euismod
purus et porttitor. Aliquam sit amet tellus mauris. Mauris semper
dignissim nibh, faucibus vestibulum purus varius quis. Suspendisse
potenti. Cras at ligula sit amet nunc vehicula condimentum quis nec
est. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices
posuere cubilia Curae; Donec iaculis, neque sit amet maximus rhoncus,
nisl tortor convallis ante, ut mollis purus augue ut justo. Praesent
felis urna, volutpat sit amet posuere dictum, luctus quis nibh. Proin
et tristique ipsum, in aliquam ante.

Aenean eget ex mauris. Cras ut tempor quam. Curabitur eget nulla
laoreet, bibendum neque porta, tempus nulla. Ut tellus nisi, semper eu
ligula pretium, aliquam accumsan dolor. Nunc fermentum cursus arcu eu
suscipit. Nam dolor tellus, efficitur sed condimentum at, fringilla
eget nisi. Nulla luctus metus felis. Suspendisse potenti. Cras lacinia
orci nec dui sodales commodo. Donec tellus arcu, congue porta ultrices
non, pretium et sapien. Proin mattis risus dignissim feugiat
tristique. Donec nibh lorem, facilisis id posuere ut, varius ac
urna. Etiam ultrices dignissim mauris, quis venenatis ex semper ut.

Curabitur id fermentum erat, rhoncus scelerisque est. Sed pulvinar,
nulla sed sollicitudin scelerisque, ipsum erat sollicitudin dolor, ut
commodo arcu justo vel libero. Curabitur turpis dolor, fermentum ut
elit a, vehicula commodo nunc. Sed sit amet blandit nulla, quis
sodales massa. Donec lobortis, urna vel volutpat ullamcorper, mauris
est efficitur nulla, et suscipit velit dui at metus. Aliquam id sem
sed metus tristique scelerisque nec vitae odio. Phasellus a
pellentesque libero, vel convallis metus. Sed nec fringilla magna, non
varius ex. Sed interdum eleifend ligula, quis porta enim ultrices
a. Donec hendrerit diam ac elementum tincidunt.

Pellentesque eget nisl rhoncus, malesuada justo nec, suscipit
quam. Nam sodales mauris eu bibendum suscipit. Vivamus sodales dui
lorem, scelerisque pellentesque diam fermentum sed. Etiam fermentum
nisl id nisl blandit, sit amet semper erat ultricies. Nulla tincidunt
nulla metus, eu imperdiet lorem malesuada sagittis. Maecenas accumsan
risus sed ante eleifend, vitae pretium leo porta. Suspendisse vitae
eros vitae dui ornare condimentum id sit amet mauris. Etiam tincidunt
consequat risus, eu posuere mi. Donec ut nunc eu massa porttitor
suscipit nec nec neque. Suspendisse vitae tincidunt justo, sed
molestie velit. Nullam pellentesque convallis ante, vel posuere libero
blandit in.
# a comment forces paragraph break in Org
* Footnotes
[fn:4] Even if the user has set the =HUGO_CODE_FENCE= value to =t=
(via variable, keyword or subtree property), the Hugo =highlight=
shortcode will be used automatically instead of code fences if either
(i) the user has chosen to either show the line numbers, or (ii) has
chosen to highlight lines of code (See the =ox-hugo= documentation on
{{{doc(source-blocks,Source Blocks)}}}).

[fn:3] This is a long footnote. It is so long that it gets auto-filled
over multiple lines. But even then it should be handled fine.

[fn:2] Second footnote

[fn:1] First footnote
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# fill-column: 70
# eval: (auto-fill-mode 1)
# End:
